/*
 * Vertex AI API
 * Train high-quality custom machine learning models with minimal machine learning expertise and effort.
 *
 * The version of the OpenAPI document: v1
 * Contact: info@stackql.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.GoogleCloudAiplatformV1BigQuerySource;
import org.openapitools.client.model.GoogleCloudAiplatformV1FeatureGroupBigQueryTimeSeries;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Input source type for BigQuery Tables and Views.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-11-07T10:15:10.793031100+01:00[Europe/Berlin]", comments = "Generator version: 7.8.0")
public class GoogleCloudAiplatformV1FeatureGroupBigQuery {
  public static final String SERIALIZED_NAME_DENSE = "dense";
  @SerializedName(SERIALIZED_NAME_DENSE)
  private Boolean dense;

  public static final String SERIALIZED_NAME_ENTITY_ID_COLUMNS = "entityIdColumns";
  @SerializedName(SERIALIZED_NAME_ENTITY_ID_COLUMNS)
  private List<String> entityIdColumns = new ArrayList<>();

  public static final String SERIALIZED_NAME_STATIC_DATA_SOURCE = "staticDataSource";
  @SerializedName(SERIALIZED_NAME_STATIC_DATA_SOURCE)
  private Boolean staticDataSource;

  public static final String SERIALIZED_NAME_TIME_SERIES = "timeSeries";
  @SerializedName(SERIALIZED_NAME_TIME_SERIES)
  private GoogleCloudAiplatformV1FeatureGroupBigQueryTimeSeries timeSeries;

  public static final String SERIALIZED_NAME_BIG_QUERY_SOURCE = "bigQuerySource";
  @SerializedName(SERIALIZED_NAME_BIG_QUERY_SOURCE)
  private GoogleCloudAiplatformV1BigQuerySource bigQuerySource;

  public GoogleCloudAiplatformV1FeatureGroupBigQuery() {
  }

  public GoogleCloudAiplatformV1FeatureGroupBigQuery dense(Boolean dense) {
    this.dense = dense;
    return this;
  }

  /**
   * Optional. If set, all feature values will be fetched from a single row per unique entityId including nulls. If not set, will collapse all rows for each unique entityId into a singe row with any non-null values if present, if no non-null values are present will sync null. ex: If source has schema &#x60;(entity_id, feature_timestamp, f0, f1)&#x60; and the following rows: &#x60;(e1, 2020-01-01T10:00:00.123Z, 10, 15)&#x60; &#x60;(e1, 2020-02-01T10:00:00.123Z, 20, null)&#x60; If dense is set, &#x60;(e1, 20, null)&#x60; is synced to online stores. If dense is not set, &#x60;(e1, 20, 15)&#x60; is synced to online stores.
   * @return dense
   */
  @javax.annotation.Nullable
  public Boolean getDense() {
    return dense;
  }

  public void setDense(Boolean dense) {
    this.dense = dense;
  }


  public GoogleCloudAiplatformV1FeatureGroupBigQuery entityIdColumns(List<String> entityIdColumns) {
    this.entityIdColumns = entityIdColumns;
    return this;
  }

  public GoogleCloudAiplatformV1FeatureGroupBigQuery addEntityIdColumnsItem(String entityIdColumnsItem) {
    if (this.entityIdColumns == null) {
      this.entityIdColumns = new ArrayList<>();
    }
    this.entityIdColumns.add(entityIdColumnsItem);
    return this;
  }

  /**
   * Optional. Columns to construct entity_id / row keys. If not provided defaults to &#x60;entity_id&#x60;.
   * @return entityIdColumns
   */
  @javax.annotation.Nullable
  public List<String> getEntityIdColumns() {
    return entityIdColumns;
  }

  public void setEntityIdColumns(List<String> entityIdColumns) {
    this.entityIdColumns = entityIdColumns;
  }


  public GoogleCloudAiplatformV1FeatureGroupBigQuery staticDataSource(Boolean staticDataSource) {
    this.staticDataSource = staticDataSource;
    return this;
  }

  /**
   * Optional. Set if the data source is not a time-series.
   * @return staticDataSource
   */
  @javax.annotation.Nullable
  public Boolean getStaticDataSource() {
    return staticDataSource;
  }

  public void setStaticDataSource(Boolean staticDataSource) {
    this.staticDataSource = staticDataSource;
  }


  public GoogleCloudAiplatformV1FeatureGroupBigQuery timeSeries(GoogleCloudAiplatformV1FeatureGroupBigQueryTimeSeries timeSeries) {
    this.timeSeries = timeSeries;
    return this;
  }

  /**
   * Optional. If the source is a time-series source, this can be set to control how downstream sources (ex: FeatureView ) will treat time-series sources. If not set, will treat the source as a time-series source with &#x60;feature_timestamp&#x60; as timestamp column and no scan boundary.
   * @return timeSeries
   */
  @javax.annotation.Nullable
  public GoogleCloudAiplatformV1FeatureGroupBigQueryTimeSeries getTimeSeries() {
    return timeSeries;
  }

  public void setTimeSeries(GoogleCloudAiplatformV1FeatureGroupBigQueryTimeSeries timeSeries) {
    this.timeSeries = timeSeries;
  }


  public GoogleCloudAiplatformV1FeatureGroupBigQuery bigQuerySource(GoogleCloudAiplatformV1BigQuerySource bigQuerySource) {
    this.bigQuerySource = bigQuerySource;
    return this;
  }

  /**
   * Required. Immutable. The BigQuery source URI that points to either a BigQuery Table or View.
   * @return bigQuerySource
   */
  @javax.annotation.Nullable
  public GoogleCloudAiplatformV1BigQuerySource getBigQuerySource() {
    return bigQuerySource;
  }

  public void setBigQuerySource(GoogleCloudAiplatformV1BigQuerySource bigQuerySource) {
    this.bigQuerySource = bigQuerySource;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GoogleCloudAiplatformV1FeatureGroupBigQuery googleCloudAiplatformV1FeatureGroupBigQuery = (GoogleCloudAiplatformV1FeatureGroupBigQuery) o;
    return Objects.equals(this.dense, googleCloudAiplatformV1FeatureGroupBigQuery.dense) &&
        Objects.equals(this.entityIdColumns, googleCloudAiplatformV1FeatureGroupBigQuery.entityIdColumns) &&
        Objects.equals(this.staticDataSource, googleCloudAiplatformV1FeatureGroupBigQuery.staticDataSource) &&
        Objects.equals(this.timeSeries, googleCloudAiplatformV1FeatureGroupBigQuery.timeSeries) &&
        Objects.equals(this.bigQuerySource, googleCloudAiplatformV1FeatureGroupBigQuery.bigQuerySource);
  }

  @Override
  public int hashCode() {
    return Objects.hash(dense, entityIdColumns, staticDataSource, timeSeries, bigQuerySource);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GoogleCloudAiplatformV1FeatureGroupBigQuery {\n");
    sb.append("    dense: ").append(toIndentedString(dense)).append("\n");
    sb.append("    entityIdColumns: ").append(toIndentedString(entityIdColumns)).append("\n");
    sb.append("    staticDataSource: ").append(toIndentedString(staticDataSource)).append("\n");
    sb.append("    timeSeries: ").append(toIndentedString(timeSeries)).append("\n");
    sb.append("    bigQuerySource: ").append(toIndentedString(bigQuerySource)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("dense");
    openapiFields.add("entityIdColumns");
    openapiFields.add("staticDataSource");
    openapiFields.add("timeSeries");
    openapiFields.add("bigQuerySource");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GoogleCloudAiplatformV1FeatureGroupBigQuery
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GoogleCloudAiplatformV1FeatureGroupBigQuery.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GoogleCloudAiplatformV1FeatureGroupBigQuery is not found in the empty JSON string", GoogleCloudAiplatformV1FeatureGroupBigQuery.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GoogleCloudAiplatformV1FeatureGroupBigQuery.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GoogleCloudAiplatformV1FeatureGroupBigQuery` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("entityIdColumns") != null && !jsonObj.get("entityIdColumns").isJsonNull() && !jsonObj.get("entityIdColumns").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `entityIdColumns` to be an array in the JSON string but got `%s`", jsonObj.get("entityIdColumns").toString()));
      }
      // validate the optional field `timeSeries`
      if (jsonObj.get("timeSeries") != null && !jsonObj.get("timeSeries").isJsonNull()) {
        GoogleCloudAiplatformV1FeatureGroupBigQueryTimeSeries.validateJsonElement(jsonObj.get("timeSeries"));
      }
      // validate the optional field `bigQuerySource`
      if (jsonObj.get("bigQuerySource") != null && !jsonObj.get("bigQuerySource").isJsonNull()) {
        GoogleCloudAiplatformV1BigQuerySource.validateJsonElement(jsonObj.get("bigQuerySource"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GoogleCloudAiplatformV1FeatureGroupBigQuery.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GoogleCloudAiplatformV1FeatureGroupBigQuery' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GoogleCloudAiplatformV1FeatureGroupBigQuery> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GoogleCloudAiplatformV1FeatureGroupBigQuery.class));

       return (TypeAdapter<T>) new TypeAdapter<GoogleCloudAiplatformV1FeatureGroupBigQuery>() {
           @Override
           public void write(JsonWriter out, GoogleCloudAiplatformV1FeatureGroupBigQuery value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GoogleCloudAiplatformV1FeatureGroupBigQuery read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GoogleCloudAiplatformV1FeatureGroupBigQuery given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GoogleCloudAiplatformV1FeatureGroupBigQuery
   * @throws IOException if the JSON string is invalid with respect to GoogleCloudAiplatformV1FeatureGroupBigQuery
   */
  public static GoogleCloudAiplatformV1FeatureGroupBigQuery fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GoogleCloudAiplatformV1FeatureGroupBigQuery.class);
  }

  /**
   * Convert an instance of GoogleCloudAiplatformV1FeatureGroupBigQuery to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

