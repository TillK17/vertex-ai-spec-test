/*
 * Vertex AI API
 * Train high-quality custom machine learning models with minimal machine learning expertise and effort.
 *
 * The version of the OpenAPI document: v1
 * Contact: info@stackql.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.Any;
import org.openapitools.client.model.GoogleCloudAiplatformV1ErrorAnalysisAnnotation;
import org.openapitools.client.model.GoogleCloudAiplatformV1EvaluatedAnnotationExplanation;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * True positive, false positive, or false negative. EvaluatedAnnotation is only available under ModelEvaluationSlice with slice of &#x60;annotationSpec&#x60; dimension.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-11-07T09:54:52.538010900+01:00[Europe/Berlin]", comments = "Generator version: 7.8.0")
public class GoogleCloudAiplatformV1EvaluatedAnnotation {
  public static final String SERIALIZED_NAME_EVALUATED_DATA_ITEM_VIEW_ID = "evaluatedDataItemViewId";
  @SerializedName(SERIALIZED_NAME_EVALUATED_DATA_ITEM_VIEW_ID)
  private String evaluatedDataItemViewId;

  /**
   * Output only. Type of the EvaluatedAnnotation.
   */
  @JsonAdapter(TypeEnum.Adapter.class)
  public enum TypeEnum {
    EVALUATED_ANNOTATION_TYPE_UNSPECIFIED("EVALUATED_ANNOTATION_TYPE_UNSPECIFIED"),
    
    TRUE_POSITIVE("TRUE_POSITIVE"),
    
    FALSE_POSITIVE("FALSE_POSITIVE"),
    
    FALSE_NEGATIVE("FALSE_NEGATIVE");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TypeEnum fromValue(String value) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      TypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private TypeEnum type;

  public static final String SERIALIZED_NAME_PREDICTIONS = "predictions";
  @SerializedName(SERIALIZED_NAME_PREDICTIONS)
  private List<Any> predictions = new ArrayList<>();

  public static final String SERIALIZED_NAME_ERROR_ANALYSIS_ANNOTATIONS = "errorAnalysisAnnotations";
  @SerializedName(SERIALIZED_NAME_ERROR_ANALYSIS_ANNOTATIONS)
  private List<GoogleCloudAiplatformV1ErrorAnalysisAnnotation> errorAnalysisAnnotations = new ArrayList<>();

  public static final String SERIALIZED_NAME_GROUND_TRUTHS = "groundTruths";
  @SerializedName(SERIALIZED_NAME_GROUND_TRUTHS)
  private List<Any> groundTruths = new ArrayList<>();

  public static final String SERIALIZED_NAME_EXPLANATIONS = "explanations";
  @SerializedName(SERIALIZED_NAME_EXPLANATIONS)
  private List<GoogleCloudAiplatformV1EvaluatedAnnotationExplanation> explanations = new ArrayList<>();

  public static final String SERIALIZED_NAME_DATA_ITEM_PAYLOAD = "dataItemPayload";
  @SerializedName(SERIALIZED_NAME_DATA_ITEM_PAYLOAD)
  private Any dataItemPayload = null;

  public GoogleCloudAiplatformV1EvaluatedAnnotation() {
  }

  public GoogleCloudAiplatformV1EvaluatedAnnotation(
     String evaluatedDataItemViewId, 
     TypeEnum type, 
     Any dataItemPayload
  ) {
    this();
    this.evaluatedDataItemViewId = evaluatedDataItemViewId;
    this.type = type;
    this.dataItemPayload = dataItemPayload;
  }

  /**
   * Output only. ID of the EvaluatedDataItemView under the same ancestor ModelEvaluation. The EvaluatedDataItemView consists of all ground truths and predictions on data_item_payload.
   * @return evaluatedDataItemViewId
   */
  @javax.annotation.Nullable
  public String getEvaluatedDataItemViewId() {
    return evaluatedDataItemViewId;
  }



  /**
   * Output only. Type of the EvaluatedAnnotation.
   * @return type
   */
  @javax.annotation.Nullable
  public TypeEnum getType() {
    return type;
  }



  public GoogleCloudAiplatformV1EvaluatedAnnotation predictions(List<Any> predictions) {
    this.predictions = predictions;
    return this;
  }

  public GoogleCloudAiplatformV1EvaluatedAnnotation addPredictionsItem(Any predictionsItem) {
    if (this.predictions == null) {
      this.predictions = new ArrayList<>();
    }
    this.predictions.add(predictionsItem);
    return this;
  }

  /**
   * Output only. The model predicted annotations. For true positive, there is one and only one prediction, which matches the only one ground truth annotation in ground_truths. For false positive, there is one and only one prediction, which doesn&#39;t match any ground truth annotation of the corresponding data_item_view_id. For false negative, there are zero or more predictions which are similar to the only ground truth annotation in ground_truths but not enough for a match. The schema of the prediction is stored in ModelEvaluation.annotation_schema_uri
   * @return predictions
   */
  @javax.annotation.Nullable
  public List<Any> getPredictions() {
    return predictions;
  }

  public void setPredictions(List<Any> predictions) {
    this.predictions = predictions;
  }


  public GoogleCloudAiplatformV1EvaluatedAnnotation errorAnalysisAnnotations(List<GoogleCloudAiplatformV1ErrorAnalysisAnnotation> errorAnalysisAnnotations) {
    this.errorAnalysisAnnotations = errorAnalysisAnnotations;
    return this;
  }

  public GoogleCloudAiplatformV1EvaluatedAnnotation addErrorAnalysisAnnotationsItem(GoogleCloudAiplatformV1ErrorAnalysisAnnotation errorAnalysisAnnotationsItem) {
    if (this.errorAnalysisAnnotations == null) {
      this.errorAnalysisAnnotations = new ArrayList<>();
    }
    this.errorAnalysisAnnotations.add(errorAnalysisAnnotationsItem);
    return this;
  }

  /**
   * Annotations of model error analysis results.
   * @return errorAnalysisAnnotations
   */
  @javax.annotation.Nullable
  public List<GoogleCloudAiplatformV1ErrorAnalysisAnnotation> getErrorAnalysisAnnotations() {
    return errorAnalysisAnnotations;
  }

  public void setErrorAnalysisAnnotations(List<GoogleCloudAiplatformV1ErrorAnalysisAnnotation> errorAnalysisAnnotations) {
    this.errorAnalysisAnnotations = errorAnalysisAnnotations;
  }


  public GoogleCloudAiplatformV1EvaluatedAnnotation groundTruths(List<Any> groundTruths) {
    this.groundTruths = groundTruths;
    return this;
  }

  public GoogleCloudAiplatformV1EvaluatedAnnotation addGroundTruthsItem(Any groundTruthsItem) {
    if (this.groundTruths == null) {
      this.groundTruths = new ArrayList<>();
    }
    this.groundTruths.add(groundTruthsItem);
    return this;
  }

  /**
   * Output only. The ground truth Annotations, i.e. the Annotations that exist in the test data the Model is evaluated on. For true positive, there is one and only one ground truth annotation, which matches the only prediction in predictions. For false positive, there are zero or more ground truth annotations that are similar to the only prediction in predictions, but not enough for a match. For false negative, there is one and only one ground truth annotation, which doesn&#39;t match any predictions created by the model. The schema of the ground truth is stored in ModelEvaluation.annotation_schema_uri
   * @return groundTruths
   */
  @javax.annotation.Nullable
  public List<Any> getGroundTruths() {
    return groundTruths;
  }

  public void setGroundTruths(List<Any> groundTruths) {
    this.groundTruths = groundTruths;
  }


  public GoogleCloudAiplatformV1EvaluatedAnnotation explanations(List<GoogleCloudAiplatformV1EvaluatedAnnotationExplanation> explanations) {
    this.explanations = explanations;
    return this;
  }

  public GoogleCloudAiplatformV1EvaluatedAnnotation addExplanationsItem(GoogleCloudAiplatformV1EvaluatedAnnotationExplanation explanationsItem) {
    if (this.explanations == null) {
      this.explanations = new ArrayList<>();
    }
    this.explanations.add(explanationsItem);
    return this;
  }

  /**
   * Explanations of predictions. Each element of the explanations indicates the explanation for one explanation Method. The attributions list in the EvaluatedAnnotationExplanation.explanation object corresponds to the predictions list. For example, the second element in the attributions list explains the second element in the predictions list.
   * @return explanations
   */
  @javax.annotation.Nullable
  public List<GoogleCloudAiplatformV1EvaluatedAnnotationExplanation> getExplanations() {
    return explanations;
  }

  public void setExplanations(List<GoogleCloudAiplatformV1EvaluatedAnnotationExplanation> explanations) {
    this.explanations = explanations;
  }


  /**
   * Output only. The data item payload that the Model predicted this EvaluatedAnnotation on.
   * @return dataItemPayload
   */
  @javax.annotation.Nullable
  public Any getDataItemPayload() {
    return dataItemPayload;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GoogleCloudAiplatformV1EvaluatedAnnotation googleCloudAiplatformV1EvaluatedAnnotation = (GoogleCloudAiplatformV1EvaluatedAnnotation) o;
    return Objects.equals(this.evaluatedDataItemViewId, googleCloudAiplatformV1EvaluatedAnnotation.evaluatedDataItemViewId) &&
        Objects.equals(this.type, googleCloudAiplatformV1EvaluatedAnnotation.type) &&
        Objects.equals(this.predictions, googleCloudAiplatformV1EvaluatedAnnotation.predictions) &&
        Objects.equals(this.errorAnalysisAnnotations, googleCloudAiplatformV1EvaluatedAnnotation.errorAnalysisAnnotations) &&
        Objects.equals(this.groundTruths, googleCloudAiplatformV1EvaluatedAnnotation.groundTruths) &&
        Objects.equals(this.explanations, googleCloudAiplatformV1EvaluatedAnnotation.explanations) &&
        Objects.equals(this.dataItemPayload, googleCloudAiplatformV1EvaluatedAnnotation.dataItemPayload);
  }

  @Override
  public int hashCode() {
    return Objects.hash(evaluatedDataItemViewId, type, predictions, errorAnalysisAnnotations, groundTruths, explanations, dataItemPayload);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GoogleCloudAiplatformV1EvaluatedAnnotation {\n");
    sb.append("    evaluatedDataItemViewId: ").append(toIndentedString(evaluatedDataItemViewId)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    predictions: ").append(toIndentedString(predictions)).append("\n");
    sb.append("    errorAnalysisAnnotations: ").append(toIndentedString(errorAnalysisAnnotations)).append("\n");
    sb.append("    groundTruths: ").append(toIndentedString(groundTruths)).append("\n");
    sb.append("    explanations: ").append(toIndentedString(explanations)).append("\n");
    sb.append("    dataItemPayload: ").append(toIndentedString(dataItemPayload)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("evaluatedDataItemViewId");
    openapiFields.add("type");
    openapiFields.add("predictions");
    openapiFields.add("errorAnalysisAnnotations");
    openapiFields.add("groundTruths");
    openapiFields.add("explanations");
    openapiFields.add("dataItemPayload");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GoogleCloudAiplatformV1EvaluatedAnnotation
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GoogleCloudAiplatformV1EvaluatedAnnotation.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GoogleCloudAiplatformV1EvaluatedAnnotation is not found in the empty JSON string", GoogleCloudAiplatformV1EvaluatedAnnotation.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GoogleCloudAiplatformV1EvaluatedAnnotation.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GoogleCloudAiplatformV1EvaluatedAnnotation` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("evaluatedDataItemViewId") != null && !jsonObj.get("evaluatedDataItemViewId").isJsonNull()) && !jsonObj.get("evaluatedDataItemViewId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `evaluatedDataItemViewId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("evaluatedDataItemViewId").toString()));
      }
      if ((jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) && !jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      // validate the optional field `type`
      if (jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) {
        TypeEnum.validateJsonElement(jsonObj.get("type"));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("predictions") != null && !jsonObj.get("predictions").isJsonNull() && !jsonObj.get("predictions").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `predictions` to be an array in the JSON string but got `%s`", jsonObj.get("predictions").toString()));
      }
      if (jsonObj.get("errorAnalysisAnnotations") != null && !jsonObj.get("errorAnalysisAnnotations").isJsonNull()) {
        JsonArray jsonArrayerrorAnalysisAnnotations = jsonObj.getAsJsonArray("errorAnalysisAnnotations");
        if (jsonArrayerrorAnalysisAnnotations != null) {
          // ensure the json data is an array
          if (!jsonObj.get("errorAnalysisAnnotations").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `errorAnalysisAnnotations` to be an array in the JSON string but got `%s`", jsonObj.get("errorAnalysisAnnotations").toString()));
          }

          // validate the optional field `errorAnalysisAnnotations` (array)
          for (int i = 0; i < jsonArrayerrorAnalysisAnnotations.size(); i++) {
            GoogleCloudAiplatformV1ErrorAnalysisAnnotation.validateJsonElement(jsonArrayerrorAnalysisAnnotations.get(i));
          };
        }
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("groundTruths") != null && !jsonObj.get("groundTruths").isJsonNull() && !jsonObj.get("groundTruths").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `groundTruths` to be an array in the JSON string but got `%s`", jsonObj.get("groundTruths").toString()));
      }
      if (jsonObj.get("explanations") != null && !jsonObj.get("explanations").isJsonNull()) {
        JsonArray jsonArrayexplanations = jsonObj.getAsJsonArray("explanations");
        if (jsonArrayexplanations != null) {
          // ensure the json data is an array
          if (!jsonObj.get("explanations").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `explanations` to be an array in the JSON string but got `%s`", jsonObj.get("explanations").toString()));
          }

          // validate the optional field `explanations` (array)
          for (int i = 0; i < jsonArrayexplanations.size(); i++) {
            GoogleCloudAiplatformV1EvaluatedAnnotationExplanation.validateJsonElement(jsonArrayexplanations.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GoogleCloudAiplatformV1EvaluatedAnnotation.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GoogleCloudAiplatformV1EvaluatedAnnotation' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GoogleCloudAiplatformV1EvaluatedAnnotation> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GoogleCloudAiplatformV1EvaluatedAnnotation.class));

       return (TypeAdapter<T>) new TypeAdapter<GoogleCloudAiplatformV1EvaluatedAnnotation>() {
           @Override
           public void write(JsonWriter out, GoogleCloudAiplatformV1EvaluatedAnnotation value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GoogleCloudAiplatformV1EvaluatedAnnotation read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GoogleCloudAiplatformV1EvaluatedAnnotation given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GoogleCloudAiplatformV1EvaluatedAnnotation
   * @throws IOException if the JSON string is invalid with respect to GoogleCloudAiplatformV1EvaluatedAnnotation
   */
  public static GoogleCloudAiplatformV1EvaluatedAnnotation fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GoogleCloudAiplatformV1EvaluatedAnnotation.class);
  }

  /**
   * Convert an instance of GoogleCloudAiplatformV1EvaluatedAnnotation to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

