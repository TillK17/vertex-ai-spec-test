/*
 * Vertex AI API
 * Train high-quality custom machine learning models with minimal machine learning expertise and effort.
 *
 * The version of the OpenAPI document: v1
 * Contact: info@stackql.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.GoogleCloudAiplatformV1BigQueryDestination;
import org.openapitools.client.model.GoogleCloudAiplatformV1GcsDestination;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Configures the output of BatchPredictionJob. See Model.supported_output_storage_formats for supported output formats, and how predictions are expressed via any of them.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-11-07T09:54:52.538010900+01:00[Europe/Berlin]", comments = "Generator version: 7.8.0")
public class GoogleCloudAiplatformV1BatchPredictionJobOutputConfig {
  public static final String SERIALIZED_NAME_BIGQUERY_DESTINATION = "bigqueryDestination";
  @SerializedName(SERIALIZED_NAME_BIGQUERY_DESTINATION)
  private GoogleCloudAiplatformV1BigQueryDestination bigqueryDestination;

  public static final String SERIALIZED_NAME_PREDICTIONS_FORMAT = "predictionsFormat";
  @SerializedName(SERIALIZED_NAME_PREDICTIONS_FORMAT)
  private String predictionsFormat;

  public static final String SERIALIZED_NAME_GCS_DESTINATION = "gcsDestination";
  @SerializedName(SERIALIZED_NAME_GCS_DESTINATION)
  private GoogleCloudAiplatformV1GcsDestination gcsDestination;

  public GoogleCloudAiplatformV1BatchPredictionJobOutputConfig() {
  }

  public GoogleCloudAiplatformV1BatchPredictionJobOutputConfig bigqueryDestination(GoogleCloudAiplatformV1BigQueryDestination bigqueryDestination) {
    this.bigqueryDestination = bigqueryDestination;
    return this;
  }

  /**
   * The BigQuery project or dataset location where the output is to be written to. If project is provided, a new dataset is created with name &#x60;prediction__&#x60; where is made BigQuery-dataset-name compatible (for example, most special characters become underscores), and timestamp is in YYYY_MM_DDThh_mm_ss_sssZ \&quot;based on ISO-8601\&quot; format. In the dataset two tables will be created, &#x60;predictions&#x60;, and &#x60;errors&#x60;. If the Model has both instance and prediction schemata defined then the tables have columns as follows: The &#x60;predictions&#x60; table contains instances for which the prediction succeeded, it has columns as per a concatenation of the Model&#39;s instance and prediction schemata. The &#x60;errors&#x60; table contains rows for which the prediction has failed, it has instance columns, as per the instance schema, followed by a single \&quot;errors\&quot; column, which as values has google.rpc.Status represented as a STRUCT, and containing only &#x60;code&#x60; and &#x60;message&#x60;.
   * @return bigqueryDestination
   */
  @javax.annotation.Nullable
  public GoogleCloudAiplatformV1BigQueryDestination getBigqueryDestination() {
    return bigqueryDestination;
  }

  public void setBigqueryDestination(GoogleCloudAiplatformV1BigQueryDestination bigqueryDestination) {
    this.bigqueryDestination = bigqueryDestination;
  }


  public GoogleCloudAiplatformV1BatchPredictionJobOutputConfig predictionsFormat(String predictionsFormat) {
    this.predictionsFormat = predictionsFormat;
    return this;
  }

  /**
   * Required. The format in which Vertex AI gives the predictions, must be one of the Model&#39;s supported_output_storage_formats.
   * @return predictionsFormat
   */
  @javax.annotation.Nullable
  public String getPredictionsFormat() {
    return predictionsFormat;
  }

  public void setPredictionsFormat(String predictionsFormat) {
    this.predictionsFormat = predictionsFormat;
  }


  public GoogleCloudAiplatformV1BatchPredictionJobOutputConfig gcsDestination(GoogleCloudAiplatformV1GcsDestination gcsDestination) {
    this.gcsDestination = gcsDestination;
    return this;
  }

  /**
   * The Cloud Storage location of the directory where the output is to be written to. In the given directory a new directory is created. Its name is &#x60;prediction--&#x60;, where timestamp is in YYYY-MM-DDThh:mm:ss.sssZ ISO-8601 format. Inside of it files &#x60;predictions_0001.&#x60;, &#x60;predictions_0002.&#x60;, ..., &#x60;predictions_N.&#x60; are created where &#x60;&#x60; depends on chosen predictions_format, and N may equal 0001 and depends on the total number of successfully predicted instances. If the Model has both instance and prediction schemata defined then each such file contains predictions as per the predictions_format. If prediction for any instance failed (partially or completely), then an additional &#x60;errors_0001.&#x60;, &#x60;errors_0002.&#x60;,..., &#x60;errors_N.&#x60; files are created (N depends on total number of failed predictions). These files contain the failed instances, as per their schema, followed by an additional &#x60;error&#x60; field which as value has google.rpc.Status containing only &#x60;code&#x60; and &#x60;message&#x60; fields.
   * @return gcsDestination
   */
  @javax.annotation.Nullable
  public GoogleCloudAiplatformV1GcsDestination getGcsDestination() {
    return gcsDestination;
  }

  public void setGcsDestination(GoogleCloudAiplatformV1GcsDestination gcsDestination) {
    this.gcsDestination = gcsDestination;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GoogleCloudAiplatformV1BatchPredictionJobOutputConfig googleCloudAiplatformV1BatchPredictionJobOutputConfig = (GoogleCloudAiplatformV1BatchPredictionJobOutputConfig) o;
    return Objects.equals(this.bigqueryDestination, googleCloudAiplatformV1BatchPredictionJobOutputConfig.bigqueryDestination) &&
        Objects.equals(this.predictionsFormat, googleCloudAiplatformV1BatchPredictionJobOutputConfig.predictionsFormat) &&
        Objects.equals(this.gcsDestination, googleCloudAiplatformV1BatchPredictionJobOutputConfig.gcsDestination);
  }

  @Override
  public int hashCode() {
    return Objects.hash(bigqueryDestination, predictionsFormat, gcsDestination);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GoogleCloudAiplatformV1BatchPredictionJobOutputConfig {\n");
    sb.append("    bigqueryDestination: ").append(toIndentedString(bigqueryDestination)).append("\n");
    sb.append("    predictionsFormat: ").append(toIndentedString(predictionsFormat)).append("\n");
    sb.append("    gcsDestination: ").append(toIndentedString(gcsDestination)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("bigqueryDestination");
    openapiFields.add("predictionsFormat");
    openapiFields.add("gcsDestination");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GoogleCloudAiplatformV1BatchPredictionJobOutputConfig
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GoogleCloudAiplatformV1BatchPredictionJobOutputConfig.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GoogleCloudAiplatformV1BatchPredictionJobOutputConfig is not found in the empty JSON string", GoogleCloudAiplatformV1BatchPredictionJobOutputConfig.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GoogleCloudAiplatformV1BatchPredictionJobOutputConfig.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GoogleCloudAiplatformV1BatchPredictionJobOutputConfig` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `bigqueryDestination`
      if (jsonObj.get("bigqueryDestination") != null && !jsonObj.get("bigqueryDestination").isJsonNull()) {
        GoogleCloudAiplatformV1BigQueryDestination.validateJsonElement(jsonObj.get("bigqueryDestination"));
      }
      if ((jsonObj.get("predictionsFormat") != null && !jsonObj.get("predictionsFormat").isJsonNull()) && !jsonObj.get("predictionsFormat").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `predictionsFormat` to be a primitive type in the JSON string but got `%s`", jsonObj.get("predictionsFormat").toString()));
      }
      // validate the optional field `gcsDestination`
      if (jsonObj.get("gcsDestination") != null && !jsonObj.get("gcsDestination").isJsonNull()) {
        GoogleCloudAiplatformV1GcsDestination.validateJsonElement(jsonObj.get("gcsDestination"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GoogleCloudAiplatformV1BatchPredictionJobOutputConfig.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GoogleCloudAiplatformV1BatchPredictionJobOutputConfig' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GoogleCloudAiplatformV1BatchPredictionJobOutputConfig> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GoogleCloudAiplatformV1BatchPredictionJobOutputConfig.class));

       return (TypeAdapter<T>) new TypeAdapter<GoogleCloudAiplatformV1BatchPredictionJobOutputConfig>() {
           @Override
           public void write(JsonWriter out, GoogleCloudAiplatformV1BatchPredictionJobOutputConfig value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GoogleCloudAiplatformV1BatchPredictionJobOutputConfig read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GoogleCloudAiplatformV1BatchPredictionJobOutputConfig given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GoogleCloudAiplatformV1BatchPredictionJobOutputConfig
   * @throws IOException if the JSON string is invalid with respect to GoogleCloudAiplatformV1BatchPredictionJobOutputConfig
   */
  public static GoogleCloudAiplatformV1BatchPredictionJobOutputConfig fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GoogleCloudAiplatformV1BatchPredictionJobOutputConfig.class);
  }

  /**
   * Convert an instance of GoogleCloudAiplatformV1BatchPredictionJobOutputConfig to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

