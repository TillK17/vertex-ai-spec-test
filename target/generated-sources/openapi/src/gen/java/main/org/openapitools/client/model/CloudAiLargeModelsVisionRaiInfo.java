/*
 * Vertex AI API
 * Train high-quality custom machine learning models with minimal machine learning expertise and effort.
 *
 * The version of the OpenAPI document: v1
 * Contact: info@stackql.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.CloudAiLargeModelsVisionRaiInfoDetectedLabels;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Next ID: 6
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-11-07T09:54:52.538010900+01:00[Europe/Berlin]", comments = "Generator version: 7.8.0")
public class CloudAiLargeModelsVisionRaiInfo {
  public static final String SERIALIZED_NAME_BLOCKED_ENTITIES = "blockedEntities";
  @SerializedName(SERIALIZED_NAME_BLOCKED_ENTITIES)
  private List<String> blockedEntities = new ArrayList<>();

  public static final String SERIALIZED_NAME_MODEL_NAME = "modelName";
  @SerializedName(SERIALIZED_NAME_MODEL_NAME)
  private String modelName;

  public static final String SERIALIZED_NAME_SCORES = "scores";
  @SerializedName(SERIALIZED_NAME_SCORES)
  private List<Float> scores = new ArrayList<>();

  public static final String SERIALIZED_NAME_RAI_CATEGORIES = "raiCategories";
  @SerializedName(SERIALIZED_NAME_RAI_CATEGORIES)
  private List<String> raiCategories = new ArrayList<>();

  public static final String SERIALIZED_NAME_DETECTED_LABELS = "detectedLabels";
  @SerializedName(SERIALIZED_NAME_DETECTED_LABELS)
  private List<CloudAiLargeModelsVisionRaiInfoDetectedLabels> detectedLabels = new ArrayList<>();

  public CloudAiLargeModelsVisionRaiInfo() {
  }

  public CloudAiLargeModelsVisionRaiInfo blockedEntities(List<String> blockedEntities) {
    this.blockedEntities = blockedEntities;
    return this;
  }

  public CloudAiLargeModelsVisionRaiInfo addBlockedEntitiesItem(String blockedEntitiesItem) {
    if (this.blockedEntities == null) {
      this.blockedEntities = new ArrayList<>();
    }
    this.blockedEntities.add(blockedEntitiesItem);
    return this;
  }

  /**
   * List of blocked entities from the blocklist if it is detected.
   * @return blockedEntities
   */
  @javax.annotation.Nullable
  public List<String> getBlockedEntities() {
    return blockedEntities;
  }

  public void setBlockedEntities(List<String> blockedEntities) {
    this.blockedEntities = blockedEntities;
  }


  public CloudAiLargeModelsVisionRaiInfo modelName(String modelName) {
    this.modelName = modelName;
    return this;
  }

  /**
   * The model name used to indexing into the RaiFilterConfig map. Would either be one of imagegeneration@002-006, imagen-3.0-... api endpoint names, or internal names used for mapping to different filter configs (genselfie, ai_watermark) than its api endpoint.
   * @return modelName
   */
  @javax.annotation.Nullable
  public String getModelName() {
    return modelName;
  }

  public void setModelName(String modelName) {
    this.modelName = modelName;
  }


  public CloudAiLargeModelsVisionRaiInfo scores(List<Float> scores) {
    this.scores = scores;
    return this;
  }

  public CloudAiLargeModelsVisionRaiInfo addScoresItem(Float scoresItem) {
    if (this.scores == null) {
      this.scores = new ArrayList<>();
    }
    this.scores.add(scoresItem);
    return this;
  }

  /**
   * List of rai scores mapping to the rai categories. Rounded to 1 decimal place.
   * @return scores
   */
  @javax.annotation.Nullable
  public List<Float> getScores() {
    return scores;
  }

  public void setScores(List<Float> scores) {
    this.scores = scores;
  }


  public CloudAiLargeModelsVisionRaiInfo raiCategories(List<String> raiCategories) {
    this.raiCategories = raiCategories;
    return this;
  }

  public CloudAiLargeModelsVisionRaiInfo addRaiCategoriesItem(String raiCategoriesItem) {
    if (this.raiCategories == null) {
      this.raiCategories = new ArrayList<>();
    }
    this.raiCategories.add(raiCategoriesItem);
    return this;
  }

  /**
   * List of rai categories&#39; information to return
   * @return raiCategories
   */
  @javax.annotation.Nullable
  public List<String> getRaiCategories() {
    return raiCategories;
  }

  public void setRaiCategories(List<String> raiCategories) {
    this.raiCategories = raiCategories;
  }


  public CloudAiLargeModelsVisionRaiInfo detectedLabels(List<CloudAiLargeModelsVisionRaiInfoDetectedLabels> detectedLabels) {
    this.detectedLabels = detectedLabels;
    return this;
  }

  public CloudAiLargeModelsVisionRaiInfo addDetectedLabelsItem(CloudAiLargeModelsVisionRaiInfoDetectedLabels detectedLabelsItem) {
    if (this.detectedLabels == null) {
      this.detectedLabels = new ArrayList<>();
    }
    this.detectedLabels.add(detectedLabelsItem);
    return this;
  }

  /**
   * The list of detected labels for different rai categories.
   * @return detectedLabels
   */
  @javax.annotation.Nullable
  public List<CloudAiLargeModelsVisionRaiInfoDetectedLabels> getDetectedLabels() {
    return detectedLabels;
  }

  public void setDetectedLabels(List<CloudAiLargeModelsVisionRaiInfoDetectedLabels> detectedLabels) {
    this.detectedLabels = detectedLabels;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CloudAiLargeModelsVisionRaiInfo cloudAiLargeModelsVisionRaiInfo = (CloudAiLargeModelsVisionRaiInfo) o;
    return Objects.equals(this.blockedEntities, cloudAiLargeModelsVisionRaiInfo.blockedEntities) &&
        Objects.equals(this.modelName, cloudAiLargeModelsVisionRaiInfo.modelName) &&
        Objects.equals(this.scores, cloudAiLargeModelsVisionRaiInfo.scores) &&
        Objects.equals(this.raiCategories, cloudAiLargeModelsVisionRaiInfo.raiCategories) &&
        Objects.equals(this.detectedLabels, cloudAiLargeModelsVisionRaiInfo.detectedLabels);
  }

  @Override
  public int hashCode() {
    return Objects.hash(blockedEntities, modelName, scores, raiCategories, detectedLabels);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CloudAiLargeModelsVisionRaiInfo {\n");
    sb.append("    blockedEntities: ").append(toIndentedString(blockedEntities)).append("\n");
    sb.append("    modelName: ").append(toIndentedString(modelName)).append("\n");
    sb.append("    scores: ").append(toIndentedString(scores)).append("\n");
    sb.append("    raiCategories: ").append(toIndentedString(raiCategories)).append("\n");
    sb.append("    detectedLabels: ").append(toIndentedString(detectedLabels)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("blockedEntities");
    openapiFields.add("modelName");
    openapiFields.add("scores");
    openapiFields.add("raiCategories");
    openapiFields.add("detectedLabels");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CloudAiLargeModelsVisionRaiInfo
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CloudAiLargeModelsVisionRaiInfo.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CloudAiLargeModelsVisionRaiInfo is not found in the empty JSON string", CloudAiLargeModelsVisionRaiInfo.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CloudAiLargeModelsVisionRaiInfo.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CloudAiLargeModelsVisionRaiInfo` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("blockedEntities") != null && !jsonObj.get("blockedEntities").isJsonNull() && !jsonObj.get("blockedEntities").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `blockedEntities` to be an array in the JSON string but got `%s`", jsonObj.get("blockedEntities").toString()));
      }
      if ((jsonObj.get("modelName") != null && !jsonObj.get("modelName").isJsonNull()) && !jsonObj.get("modelName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `modelName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("modelName").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("scores") != null && !jsonObj.get("scores").isJsonNull() && !jsonObj.get("scores").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `scores` to be an array in the JSON string but got `%s`", jsonObj.get("scores").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("raiCategories") != null && !jsonObj.get("raiCategories").isJsonNull() && !jsonObj.get("raiCategories").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `raiCategories` to be an array in the JSON string but got `%s`", jsonObj.get("raiCategories").toString()));
      }
      if (jsonObj.get("detectedLabels") != null && !jsonObj.get("detectedLabels").isJsonNull()) {
        JsonArray jsonArraydetectedLabels = jsonObj.getAsJsonArray("detectedLabels");
        if (jsonArraydetectedLabels != null) {
          // ensure the json data is an array
          if (!jsonObj.get("detectedLabels").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `detectedLabels` to be an array in the JSON string but got `%s`", jsonObj.get("detectedLabels").toString()));
          }

          // validate the optional field `detectedLabels` (array)
          for (int i = 0; i < jsonArraydetectedLabels.size(); i++) {
            CloudAiLargeModelsVisionRaiInfoDetectedLabels.validateJsonElement(jsonArraydetectedLabels.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CloudAiLargeModelsVisionRaiInfo.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CloudAiLargeModelsVisionRaiInfo' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CloudAiLargeModelsVisionRaiInfo> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CloudAiLargeModelsVisionRaiInfo.class));

       return (TypeAdapter<T>) new TypeAdapter<CloudAiLargeModelsVisionRaiInfo>() {
           @Override
           public void write(JsonWriter out, CloudAiLargeModelsVisionRaiInfo value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CloudAiLargeModelsVisionRaiInfo read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CloudAiLargeModelsVisionRaiInfo given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CloudAiLargeModelsVisionRaiInfo
   * @throws IOException if the JSON string is invalid with respect to CloudAiLargeModelsVisionRaiInfo
   */
  public static CloudAiLargeModelsVisionRaiInfo fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CloudAiLargeModelsVisionRaiInfo.class);
  }

  /**
   * Convert an instance of CloudAiLargeModelsVisionRaiInfo to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

