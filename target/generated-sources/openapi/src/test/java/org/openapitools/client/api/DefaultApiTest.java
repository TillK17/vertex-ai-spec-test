/*
 * Vertex AI API
 * Train high-quality custom machine learning models with minimal machine learning expertise and effort.
 *
 * The version of the OpenAPI document: v1
 * Contact: info@stackql.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.GoogleApiHttpBody;
import org.openapitools.client.model.GoogleCloudAiplatformV1AddContextArtifactsAndExecutionsRequest;
import org.openapitools.client.model.GoogleCloudAiplatformV1AddContextChildrenRequest;
import org.openapitools.client.model.GoogleCloudAiplatformV1AddExecutionEventsRequest;
import org.openapitools.client.model.GoogleCloudAiplatformV1AddTrialMeasurementRequest;
import org.openapitools.client.model.GoogleCloudAiplatformV1AnnotationSpec;
import org.openapitools.client.model.GoogleCloudAiplatformV1Artifact;
import org.openapitools.client.model.GoogleCloudAiplatformV1AssignNotebookRuntimeRequest;
import org.openapitools.client.model.GoogleCloudAiplatformV1BatchCancelPipelineJobsRequest;
import org.openapitools.client.model.GoogleCloudAiplatformV1BatchCreateFeaturesRequest;
import org.openapitools.client.model.GoogleCloudAiplatformV1BatchCreateTensorboardRunsRequest;
import org.openapitools.client.model.GoogleCloudAiplatformV1BatchCreateTensorboardRunsResponse;
import org.openapitools.client.model.GoogleCloudAiplatformV1BatchCreateTensorboardTimeSeriesRequest;
import org.openapitools.client.model.GoogleCloudAiplatformV1BatchCreateTensorboardTimeSeriesResponse;
import org.openapitools.client.model.GoogleCloudAiplatformV1BatchDeletePipelineJobsRequest;
import org.openapitools.client.model.GoogleCloudAiplatformV1BatchImportEvaluatedAnnotationsRequest;
import org.openapitools.client.model.GoogleCloudAiplatformV1BatchImportEvaluatedAnnotationsResponse;
import org.openapitools.client.model.GoogleCloudAiplatformV1BatchMigrateResourcesRequest;
import org.openapitools.client.model.GoogleCloudAiplatformV1BatchPredictionJob;
import org.openapitools.client.model.GoogleCloudAiplatformV1BatchReadFeatureValuesRequest;
import org.openapitools.client.model.GoogleCloudAiplatformV1BatchReadTensorboardTimeSeriesDataResponse;
import org.openapitools.client.model.GoogleCloudAiplatformV1CompleteTrialRequest;
import org.openapitools.client.model.GoogleCloudAiplatformV1ComputeTokensRequest;
import org.openapitools.client.model.GoogleCloudAiplatformV1ComputeTokensResponse;
import org.openapitools.client.model.GoogleCloudAiplatformV1Context;
import org.openapitools.client.model.GoogleCloudAiplatformV1CopyModelRequest;
import org.openapitools.client.model.GoogleCloudAiplatformV1CountTokensRequest;
import org.openapitools.client.model.GoogleCloudAiplatformV1CountTokensResponse;
import org.openapitools.client.model.GoogleCloudAiplatformV1CreateDeploymentResourcePoolRequest;
import org.openapitools.client.model.GoogleCloudAiplatformV1CustomJob;
import org.openapitools.client.model.GoogleCloudAiplatformV1DataLabelingJob;
import org.openapitools.client.model.GoogleCloudAiplatformV1Dataset;
import org.openapitools.client.model.GoogleCloudAiplatformV1DatasetVersion;
import org.openapitools.client.model.GoogleCloudAiplatformV1DeleteFeatureValuesRequest;
import org.openapitools.client.model.GoogleCloudAiplatformV1DeployIndexRequest;
import org.openapitools.client.model.GoogleCloudAiplatformV1DeployModelRequest;
import org.openapitools.client.model.GoogleCloudAiplatformV1DeployedIndex;
import org.openapitools.client.model.GoogleCloudAiplatformV1DeploymentResourcePool;
import org.openapitools.client.model.GoogleCloudAiplatformV1DirectPredictRequest;
import org.openapitools.client.model.GoogleCloudAiplatformV1DirectPredictResponse;
import org.openapitools.client.model.GoogleCloudAiplatformV1DirectRawPredictRequest;
import org.openapitools.client.model.GoogleCloudAiplatformV1DirectRawPredictResponse;
import org.openapitools.client.model.GoogleCloudAiplatformV1Endpoint;
import org.openapitools.client.model.GoogleCloudAiplatformV1EntityType;
import org.openapitools.client.model.GoogleCloudAiplatformV1EvaluateInstancesRequest;
import org.openapitools.client.model.GoogleCloudAiplatformV1EvaluateInstancesResponse;
import org.openapitools.client.model.GoogleCloudAiplatformV1Execution;
import org.openapitools.client.model.GoogleCloudAiplatformV1ExplainRequest;
import org.openapitools.client.model.GoogleCloudAiplatformV1ExplainResponse;
import org.openapitools.client.model.GoogleCloudAiplatformV1ExportDataRequest;
import org.openapitools.client.model.GoogleCloudAiplatformV1ExportFeatureValuesRequest;
import org.openapitools.client.model.GoogleCloudAiplatformV1ExportModelRequest;
import org.openapitools.client.model.GoogleCloudAiplatformV1ExportTensorboardTimeSeriesDataRequest;
import org.openapitools.client.model.GoogleCloudAiplatformV1ExportTensorboardTimeSeriesDataResponse;
import org.openapitools.client.model.GoogleCloudAiplatformV1Feature;
import org.openapitools.client.model.GoogleCloudAiplatformV1FeatureGroup;
import org.openapitools.client.model.GoogleCloudAiplatformV1FeatureOnlineStore;
import org.openapitools.client.model.GoogleCloudAiplatformV1FeatureView;
import org.openapitools.client.model.GoogleCloudAiplatformV1FeatureViewSync;
import org.openapitools.client.model.GoogleCloudAiplatformV1Featurestore;
import org.openapitools.client.model.GoogleCloudAiplatformV1FetchFeatureValuesRequest;
import org.openapitools.client.model.GoogleCloudAiplatformV1FetchFeatureValuesResponse;
import org.openapitools.client.model.GoogleCloudAiplatformV1FindNeighborsRequest;
import org.openapitools.client.model.GoogleCloudAiplatformV1FindNeighborsResponse;
import org.openapitools.client.model.GoogleCloudAiplatformV1GenerateContentRequest;
import org.openapitools.client.model.GoogleCloudAiplatformV1GenerateContentResponse;
import org.openapitools.client.model.GoogleCloudAiplatformV1HyperparameterTuningJob;
import org.openapitools.client.model.GoogleCloudAiplatformV1ImportDataRequest;
import org.openapitools.client.model.GoogleCloudAiplatformV1ImportFeatureValuesRequest;
import org.openapitools.client.model.GoogleCloudAiplatformV1ImportModelEvaluationRequest;
import org.openapitools.client.model.GoogleCloudAiplatformV1Index;
import org.openapitools.client.model.GoogleCloudAiplatformV1IndexEndpoint;
import org.openapitools.client.model.GoogleCloudAiplatformV1LineageSubgraph;
import org.openapitools.client.model.GoogleCloudAiplatformV1ListAnnotationsResponse;
import org.openapitools.client.model.GoogleCloudAiplatformV1ListArtifactsResponse;
import org.openapitools.client.model.GoogleCloudAiplatformV1ListBatchPredictionJobsResponse;
import org.openapitools.client.model.GoogleCloudAiplatformV1ListContextsResponse;
import org.openapitools.client.model.GoogleCloudAiplatformV1ListCustomJobsResponse;
import org.openapitools.client.model.GoogleCloudAiplatformV1ListDataItemsResponse;
import org.openapitools.client.model.GoogleCloudAiplatformV1ListDataLabelingJobsResponse;
import org.openapitools.client.model.GoogleCloudAiplatformV1ListDatasetVersionsResponse;
import org.openapitools.client.model.GoogleCloudAiplatformV1ListDatasetsResponse;
import org.openapitools.client.model.GoogleCloudAiplatformV1ListDeploymentResourcePoolsResponse;
import org.openapitools.client.model.GoogleCloudAiplatformV1ListEndpointsResponse;
import org.openapitools.client.model.GoogleCloudAiplatformV1ListEntityTypesResponse;
import org.openapitools.client.model.GoogleCloudAiplatformV1ListExecutionsResponse;
import org.openapitools.client.model.GoogleCloudAiplatformV1ListFeatureGroupsResponse;
import org.openapitools.client.model.GoogleCloudAiplatformV1ListFeatureOnlineStoresResponse;
import org.openapitools.client.model.GoogleCloudAiplatformV1ListFeatureViewSyncsResponse;
import org.openapitools.client.model.GoogleCloudAiplatformV1ListFeatureViewsResponse;
import org.openapitools.client.model.GoogleCloudAiplatformV1ListFeaturesResponse;
import org.openapitools.client.model.GoogleCloudAiplatformV1ListFeaturestoresResponse;
import org.openapitools.client.model.GoogleCloudAiplatformV1ListHyperparameterTuningJobsResponse;
import org.openapitools.client.model.GoogleCloudAiplatformV1ListIndexEndpointsResponse;
import org.openapitools.client.model.GoogleCloudAiplatformV1ListIndexesResponse;
import org.openapitools.client.model.GoogleCloudAiplatformV1ListMetadataSchemasResponse;
import org.openapitools.client.model.GoogleCloudAiplatformV1ListMetadataStoresResponse;
import org.openapitools.client.model.GoogleCloudAiplatformV1ListModelDeploymentMonitoringJobsResponse;
import org.openapitools.client.model.GoogleCloudAiplatformV1ListModelEvaluationSlicesResponse;
import org.openapitools.client.model.GoogleCloudAiplatformV1ListModelEvaluationsResponse;
import org.openapitools.client.model.GoogleCloudAiplatformV1ListModelVersionsResponse;
import org.openapitools.client.model.GoogleCloudAiplatformV1ListModelsResponse;
import org.openapitools.client.model.GoogleCloudAiplatformV1ListNasJobsResponse;
import org.openapitools.client.model.GoogleCloudAiplatformV1ListNasTrialDetailsResponse;
import org.openapitools.client.model.GoogleCloudAiplatformV1ListNotebookExecutionJobsResponse;
import org.openapitools.client.model.GoogleCloudAiplatformV1ListNotebookRuntimeTemplatesResponse;
import org.openapitools.client.model.GoogleCloudAiplatformV1ListNotebookRuntimesResponse;
import org.openapitools.client.model.GoogleCloudAiplatformV1ListOptimalTrialsResponse;
import org.openapitools.client.model.GoogleCloudAiplatformV1ListPersistentResourcesResponse;
import org.openapitools.client.model.GoogleCloudAiplatformV1ListPipelineJobsResponse;
import org.openapitools.client.model.GoogleCloudAiplatformV1ListSavedQueriesResponse;
import org.openapitools.client.model.GoogleCloudAiplatformV1ListSchedulesResponse;
import org.openapitools.client.model.GoogleCloudAiplatformV1ListSpecialistPoolsResponse;
import org.openapitools.client.model.GoogleCloudAiplatformV1ListStudiesResponse;
import org.openapitools.client.model.GoogleCloudAiplatformV1ListTensorboardExperimentsResponse;
import org.openapitools.client.model.GoogleCloudAiplatformV1ListTensorboardRunsResponse;
import org.openapitools.client.model.GoogleCloudAiplatformV1ListTensorboardTimeSeriesResponse;
import org.openapitools.client.model.GoogleCloudAiplatformV1ListTensorboardsResponse;
import org.openapitools.client.model.GoogleCloudAiplatformV1ListTrainingPipelinesResponse;
import org.openapitools.client.model.GoogleCloudAiplatformV1ListTrialsResponse;
import org.openapitools.client.model.GoogleCloudAiplatformV1ListTuningJobsResponse;
import org.openapitools.client.model.GoogleCloudAiplatformV1LookupStudyRequest;
import org.openapitools.client.model.GoogleCloudAiplatformV1MergeVersionAliasesRequest;
import org.openapitools.client.model.GoogleCloudAiplatformV1MetadataSchema;
import org.openapitools.client.model.GoogleCloudAiplatformV1MetadataStore;
import org.openapitools.client.model.GoogleCloudAiplatformV1Model;
import org.openapitools.client.model.GoogleCloudAiplatformV1ModelDeploymentMonitoringJob;
import org.openapitools.client.model.GoogleCloudAiplatformV1ModelEvaluation;
import org.openapitools.client.model.GoogleCloudAiplatformV1ModelEvaluationSlice;
import org.openapitools.client.model.GoogleCloudAiplatformV1MutateDeployedModelRequest;
import org.openapitools.client.model.GoogleCloudAiplatformV1NasJob;
import org.openapitools.client.model.GoogleCloudAiplatformV1NasTrialDetail;
import org.openapitools.client.model.GoogleCloudAiplatformV1NotebookExecutionJob;
import org.openapitools.client.model.GoogleCloudAiplatformV1NotebookRuntime;
import org.openapitools.client.model.GoogleCloudAiplatformV1NotebookRuntimeTemplate;
import org.openapitools.client.model.GoogleCloudAiplatformV1PersistentResource;
import org.openapitools.client.model.GoogleCloudAiplatformV1PipelineJob;
import org.openapitools.client.model.GoogleCloudAiplatformV1PredictRequest;
import org.openapitools.client.model.GoogleCloudAiplatformV1PredictResponse;
import org.openapitools.client.model.GoogleCloudAiplatformV1PublisherModel;
import org.openapitools.client.model.GoogleCloudAiplatformV1PurgeArtifactsRequest;
import org.openapitools.client.model.GoogleCloudAiplatformV1PurgeContextsRequest;
import org.openapitools.client.model.GoogleCloudAiplatformV1PurgeExecutionsRequest;
import org.openapitools.client.model.GoogleCloudAiplatformV1QueryDeployedModelsResponse;
import org.openapitools.client.model.GoogleCloudAiplatformV1RawPredictRequest;
import org.openapitools.client.model.GoogleCloudAiplatformV1ReadFeatureValuesRequest;
import org.openapitools.client.model.GoogleCloudAiplatformV1ReadFeatureValuesResponse;
import org.openapitools.client.model.GoogleCloudAiplatformV1ReadIndexDatapointsRequest;
import org.openapitools.client.model.GoogleCloudAiplatformV1ReadIndexDatapointsResponse;
import org.openapitools.client.model.GoogleCloudAiplatformV1ReadTensorboardBlobDataResponse;
import org.openapitools.client.model.GoogleCloudAiplatformV1ReadTensorboardSizeResponse;
import org.openapitools.client.model.GoogleCloudAiplatformV1ReadTensorboardTimeSeriesDataResponse;
import org.openapitools.client.model.GoogleCloudAiplatformV1ReadTensorboardUsageResponse;
import org.openapitools.client.model.GoogleCloudAiplatformV1RemoveContextChildrenRequest;
import org.openapitools.client.model.GoogleCloudAiplatformV1RemoveDatapointsRequest;
import org.openapitools.client.model.GoogleCloudAiplatformV1ResumeScheduleRequest;
import org.openapitools.client.model.GoogleCloudAiplatformV1Schedule;
import org.openapitools.client.model.GoogleCloudAiplatformV1SearchDataItemsResponse;
import org.openapitools.client.model.GoogleCloudAiplatformV1SearchFeaturesResponse;
import org.openapitools.client.model.GoogleCloudAiplatformV1SearchMigratableResourcesRequest;
import org.openapitools.client.model.GoogleCloudAiplatformV1SearchMigratableResourcesResponse;
import org.openapitools.client.model.GoogleCloudAiplatformV1SearchModelDeploymentMonitoringStatsAnomaliesRequest;
import org.openapitools.client.model.GoogleCloudAiplatformV1SearchModelDeploymentMonitoringStatsAnomaliesResponse;
import org.openapitools.client.model.GoogleCloudAiplatformV1SearchNearestEntitiesRequest;
import org.openapitools.client.model.GoogleCloudAiplatformV1SearchNearestEntitiesResponse;
import org.openapitools.client.model.GoogleCloudAiplatformV1SpecialistPool;
import org.openapitools.client.model.GoogleCloudAiplatformV1StreamRawPredictRequest;
import org.openapitools.client.model.GoogleCloudAiplatformV1StreamingPredictRequest;
import org.openapitools.client.model.GoogleCloudAiplatformV1StreamingPredictResponse;
import org.openapitools.client.model.GoogleCloudAiplatformV1StreamingReadFeatureValuesRequest;
import org.openapitools.client.model.GoogleCloudAiplatformV1Study;
import org.openapitools.client.model.GoogleCloudAiplatformV1SuggestTrialsRequest;
import org.openapitools.client.model.GoogleCloudAiplatformV1SyncFeatureViewResponse;
import org.openapitools.client.model.GoogleCloudAiplatformV1Tensorboard;
import org.openapitools.client.model.GoogleCloudAiplatformV1TensorboardExperiment;
import org.openapitools.client.model.GoogleCloudAiplatformV1TensorboardRun;
import org.openapitools.client.model.GoogleCloudAiplatformV1TensorboardTimeSeries;
import org.openapitools.client.model.GoogleCloudAiplatformV1TrainingPipeline;
import org.openapitools.client.model.GoogleCloudAiplatformV1Trial;
import org.openapitools.client.model.GoogleCloudAiplatformV1TuningJob;
import org.openapitools.client.model.GoogleCloudAiplatformV1UndeployIndexRequest;
import org.openapitools.client.model.GoogleCloudAiplatformV1UndeployModelRequest;
import org.openapitools.client.model.GoogleCloudAiplatformV1UpdateExplanationDatasetRequest;
import org.openapitools.client.model.GoogleCloudAiplatformV1UploadModelRequest;
import org.openapitools.client.model.GoogleCloudAiplatformV1UpsertDatapointsRequest;
import org.openapitools.client.model.GoogleCloudAiplatformV1WriteFeatureValuesRequest;
import org.openapitools.client.model.GoogleCloudAiplatformV1WriteTensorboardExperimentDataRequest;
import org.openapitools.client.model.GoogleCloudAiplatformV1WriteTensorboardRunDataRequest;
import org.openapitools.client.model.GoogleCloudLocationListLocationsResponse;
import org.openapitools.client.model.GoogleCloudLocationLocation;
import org.openapitools.client.model.GoogleIamV1Policy;
import org.openapitools.client.model.GoogleIamV1SetIamPolicyRequest;
import org.openapitools.client.model.GoogleIamV1TestIamPermissionsResponse;
import org.openapitools.client.model.GoogleLongrunningListOperationsResponse;
import org.openapitools.client.model.GoogleLongrunningOperation;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for DefaultApi
 */
@Disabled
public class DefaultApiTest {

    private final DefaultApi api = new DefaultApi();

    /**
     * Creates a Dataset.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void aiplatformDatasetsCreateTest() throws ApiException {
        String parent = null;
        String uploadProtocol = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String key = null;
        String fields = null;
        String alt = null;
        String uploadType = null;
        String accessToken = null;
        String quotaUser = null;
        String paramCallback = null;
        String $xgafv = null;
        GoogleCloudAiplatformV1Dataset googleCloudAiplatformV1Dataset = null;
        GoogleLongrunningOperation response = api.aiplatformDatasetsCreate(parent, uploadProtocol, oauthToken, prettyPrint, key, fields, alt, uploadType, accessToken, quotaUser, paramCallback, $xgafv, googleCloudAiplatformV1Dataset);
        // TODO: test validations
    }

    /**
     * Create a version from a Dataset.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void aiplatformDatasetsDatasetVersionsCreateTest() throws ApiException {
        String datasetsId = null;
        String uploadProtocol = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String key = null;
        String fields = null;
        String alt = null;
        String uploadType = null;
        String accessToken = null;
        String quotaUser = null;
        String paramCallback = null;
        String $xgafv = null;
        GoogleCloudAiplatformV1DatasetVersion googleCloudAiplatformV1DatasetVersion = null;
        GoogleLongrunningOperation response = api.aiplatformDatasetsDatasetVersionsCreate(datasetsId, uploadProtocol, oauthToken, prettyPrint, key, fields, alt, uploadType, accessToken, quotaUser, paramCallback, $xgafv, googleCloudAiplatformV1DatasetVersion);
        // TODO: test validations
    }

    /**
     * Deletes a Dataset version.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void aiplatformDatasetsDatasetVersionsDeleteTest() throws ApiException {
        String datasetsId = null;
        String datasetVersionsId = null;
        String uploadProtocol = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String key = null;
        String fields = null;
        String alt = null;
        String uploadType = null;
        String accessToken = null;
        String quotaUser = null;
        String paramCallback = null;
        String $xgafv = null;
        GoogleLongrunningOperation response = api.aiplatformDatasetsDatasetVersionsDelete(datasetsId, datasetVersionsId, uploadProtocol, oauthToken, prettyPrint, key, fields, alt, uploadType, accessToken, quotaUser, paramCallback, $xgafv);
        // TODO: test validations
    }

    /**
     * Gets a Dataset version.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void aiplatformDatasetsDatasetVersionsGetTest() throws ApiException {
        String datasetsId = null;
        String datasetVersionsId = null;
        String readMask = null;
        String uploadProtocol = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String key = null;
        String fields = null;
        String alt = null;
        String uploadType = null;
        String accessToken = null;
        String quotaUser = null;
        String paramCallback = null;
        String $xgafv = null;
        GoogleCloudAiplatformV1DatasetVersion response = api.aiplatformDatasetsDatasetVersionsGet(datasetsId, datasetVersionsId, readMask, uploadProtocol, oauthToken, prettyPrint, key, fields, alt, uploadType, accessToken, quotaUser, paramCallback, $xgafv);
        // TODO: test validations
    }

    /**
     * Lists DatasetVersions in a Dataset.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void aiplatformDatasetsDatasetVersionsListTest() throws ApiException {
        String datasetsId = null;
        String orderBy = null;
        String filter = null;
        String readMask = null;
        String pageToken = null;
        Integer pageSize = null;
        String uploadProtocol = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String key = null;
        String fields = null;
        String alt = null;
        String uploadType = null;
        String accessToken = null;
        String quotaUser = null;
        String paramCallback = null;
        String $xgafv = null;
        GoogleCloudAiplatformV1ListDatasetVersionsResponse response = api.aiplatformDatasetsDatasetVersionsList(datasetsId, orderBy, filter, readMask, pageToken, pageSize, uploadProtocol, oauthToken, prettyPrint, key, fields, alt, uploadType, accessToken, quotaUser, paramCallback, $xgafv);
        // TODO: test validations
    }

    /**
     * Updates a DatasetVersion.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void aiplatformDatasetsDatasetVersionsPatchTest() throws ApiException {
        String datasetsId = null;
        String datasetVersionsId = null;
        String updateMask = null;
        String uploadProtocol = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String key = null;
        String fields = null;
        String alt = null;
        String uploadType = null;
        String accessToken = null;
        String quotaUser = null;
        String paramCallback = null;
        String $xgafv = null;
        GoogleCloudAiplatformV1DatasetVersion googleCloudAiplatformV1DatasetVersion = null;
        GoogleCloudAiplatformV1DatasetVersion response = api.aiplatformDatasetsDatasetVersionsPatch(datasetsId, datasetVersionsId, updateMask, uploadProtocol, oauthToken, prettyPrint, key, fields, alt, uploadType, accessToken, quotaUser, paramCallback, $xgafv, googleCloudAiplatformV1DatasetVersion);
        // TODO: test validations
    }

    /**
     * Restores a dataset version.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void aiplatformDatasetsDatasetVersionsRestoreTest() throws ApiException {
        String datasetsId = null;
        String datasetVersionsId = null;
        String uploadProtocol = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String key = null;
        String fields = null;
        String alt = null;
        String uploadType = null;
        String accessToken = null;
        String quotaUser = null;
        String paramCallback = null;
        String $xgafv = null;
        GoogleLongrunningOperation response = api.aiplatformDatasetsDatasetVersionsRestore(datasetsId, datasetVersionsId, uploadProtocol, oauthToken, prettyPrint, key, fields, alt, uploadType, accessToken, quotaUser, paramCallback, $xgafv);
        // TODO: test validations
    }

    /**
     * Deletes a Dataset.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void aiplatformDatasetsDeleteTest() throws ApiException {
        String datasetsId = null;
        String uploadProtocol = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String key = null;
        String fields = null;
        String alt = null;
        String uploadType = null;
        String accessToken = null;
        String quotaUser = null;
        String paramCallback = null;
        String $xgafv = null;
        GoogleLongrunningOperation response = api.aiplatformDatasetsDelete(datasetsId, uploadProtocol, oauthToken, prettyPrint, key, fields, alt, uploadType, accessToken, quotaUser, paramCallback, $xgafv);
        // TODO: test validations
    }

    /**
     * Gets a Dataset.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void aiplatformDatasetsGetTest() throws ApiException {
        String datasetsId = null;
        String readMask = null;
        String uploadProtocol = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String key = null;
        String fields = null;
        String alt = null;
        String uploadType = null;
        String accessToken = null;
        String quotaUser = null;
        String paramCallback = null;
        String $xgafv = null;
        GoogleCloudAiplatformV1Dataset response = api.aiplatformDatasetsGet(datasetsId, readMask, uploadProtocol, oauthToken, prettyPrint, key, fields, alt, uploadType, accessToken, quotaUser, paramCallback, $xgafv);
        // TODO: test validations
    }

    /**
     * Lists Datasets in a Location.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void aiplatformDatasetsListTest() throws ApiException {
        String filter = null;
        String parent = null;
        String readMask = null;
        Integer pageSize = null;
        String orderBy = null;
        String pageToken = null;
        String uploadProtocol = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String key = null;
        String fields = null;
        String alt = null;
        String uploadType = null;
        String accessToken = null;
        String quotaUser = null;
        String paramCallback = null;
        String $xgafv = null;
        GoogleCloudAiplatformV1ListDatasetsResponse response = api.aiplatformDatasetsList(filter, parent, readMask, pageSize, orderBy, pageToken, uploadProtocol, oauthToken, prettyPrint, key, fields, alt, uploadType, accessToken, quotaUser, paramCallback, $xgafv);
        // TODO: test validations
    }

    /**
     * Updates a Dataset.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void aiplatformDatasetsPatchTest() throws ApiException {
        String datasetsId = null;
        String updateMask = null;
        String uploadProtocol = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String key = null;
        String fields = null;
        String alt = null;
        String uploadType = null;
        String accessToken = null;
        String quotaUser = null;
        String paramCallback = null;
        String $xgafv = null;
        GoogleCloudAiplatformV1Dataset googleCloudAiplatformV1Dataset = null;
        GoogleCloudAiplatformV1Dataset response = api.aiplatformDatasetsPatch(datasetsId, updateMask, uploadProtocol, oauthToken, prettyPrint, key, fields, alt, uploadType, accessToken, quotaUser, paramCallback, $xgafv, googleCloudAiplatformV1Dataset);
        // TODO: test validations
    }

    /**
     * Return a list of tokens based on the input text.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void aiplatformEndpointsComputeTokensTest() throws ApiException {
        String endpointsId = null;
        String uploadProtocol = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String key = null;
        String fields = null;
        String alt = null;
        String uploadType = null;
        String accessToken = null;
        String quotaUser = null;
        String paramCallback = null;
        String $xgafv = null;
        GoogleCloudAiplatformV1ComputeTokensRequest googleCloudAiplatformV1ComputeTokensRequest = null;
        GoogleCloudAiplatformV1ComputeTokensResponse response = api.aiplatformEndpointsComputeTokens(endpointsId, uploadProtocol, oauthToken, prettyPrint, key, fields, alt, uploadType, accessToken, quotaUser, paramCallback, $xgafv, googleCloudAiplatformV1ComputeTokensRequest);
        // TODO: test validations
    }

    /**
     * Perform a token counting.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void aiplatformEndpointsCountTokensTest() throws ApiException {
        String endpointsId = null;
        String uploadProtocol = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String key = null;
        String fields = null;
        String alt = null;
        String uploadType = null;
        String accessToken = null;
        String quotaUser = null;
        String paramCallback = null;
        String $xgafv = null;
        GoogleCloudAiplatformV1CountTokensRequest googleCloudAiplatformV1CountTokensRequest = null;
        GoogleCloudAiplatformV1CountTokensResponse response = api.aiplatformEndpointsCountTokens(endpointsId, uploadProtocol, oauthToken, prettyPrint, key, fields, alt, uploadType, accessToken, quotaUser, paramCallback, $xgafv, googleCloudAiplatformV1CountTokensRequest);
        // TODO: test validations
    }

    /**
     * Generate content with multimodal inputs.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void aiplatformEndpointsGenerateContentTest() throws ApiException {
        String endpointsId = null;
        String uploadProtocol = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String key = null;
        String fields = null;
        String alt = null;
        String uploadType = null;
        String accessToken = null;
        String quotaUser = null;
        String paramCallback = null;
        String $xgafv = null;
        GoogleCloudAiplatformV1GenerateContentRequest googleCloudAiplatformV1GenerateContentRequest = null;
        GoogleCloudAiplatformV1GenerateContentResponse response = api.aiplatformEndpointsGenerateContent(endpointsId, uploadProtocol, oauthToken, prettyPrint, key, fields, alt, uploadType, accessToken, quotaUser, paramCallback, $xgafv, googleCloudAiplatformV1GenerateContentRequest);
        // TODO: test validations
    }

    /**
     * Generate content with multimodal inputs with streaming support.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void aiplatformEndpointsStreamGenerateContentTest() throws ApiException {
        String endpointsId = null;
        String uploadProtocol = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String key = null;
        String fields = null;
        String alt = null;
        String uploadType = null;
        String accessToken = null;
        String quotaUser = null;
        String paramCallback = null;
        String $xgafv = null;
        GoogleCloudAiplatformV1GenerateContentRequest googleCloudAiplatformV1GenerateContentRequest = null;
        GoogleCloudAiplatformV1GenerateContentResponse response = api.aiplatformEndpointsStreamGenerateContent(endpointsId, uploadProtocol, oauthToken, prettyPrint, key, fields, alt, uploadType, accessToken, quotaUser, paramCallback, $xgafv, googleCloudAiplatformV1GenerateContentRequest);
        // TODO: test validations
    }

    /**
     * Cancels a BatchPredictionJob. Starts asynchronous cancellation on the BatchPredictionJob. The server makes the best effort to cancel the job, but success is not guaranteed. Clients can use JobService.GetBatchPredictionJob or other methods to check whether the cancellation succeeded or whether the job completed despite cancellation. On a successful cancellation, the BatchPredictionJob is not deleted;instead its BatchPredictionJob.state is set to &#x60;CANCELLED&#x60;. Any files already outputted by the job are not deleted.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void aiplatformProjectsLocationsBatchPredictionJobsCancelTest() throws ApiException {
        String projectsId = null;
        String locationsId = null;
        String batchPredictionJobsId = null;
        String uploadProtocol = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String key = null;
        String fields = null;
        String alt = null;
        String uploadType = null;
        String accessToken = null;
        String quotaUser = null;
        String paramCallback = null;
        String $xgafv = null;
        Object body = null;
        Object response = api.aiplatformProjectsLocationsBatchPredictionJobsCancel(projectsId, locationsId, batchPredictionJobsId, uploadProtocol, oauthToken, prettyPrint, key, fields, alt, uploadType, accessToken, quotaUser, paramCallback, $xgafv, body);
        // TODO: test validations
    }

    /**
     * Creates a BatchPredictionJob. A BatchPredictionJob once created will right away be attempted to start.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void aiplatformProjectsLocationsBatchPredictionJobsCreateTest() throws ApiException {
        String projectsId = null;
        String locationsId = null;
        String uploadProtocol = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String key = null;
        String fields = null;
        String alt = null;
        String uploadType = null;
        String accessToken = null;
        String quotaUser = null;
        String paramCallback = null;
        String $xgafv = null;
        GoogleCloudAiplatformV1BatchPredictionJob googleCloudAiplatformV1BatchPredictionJob = null;
        GoogleCloudAiplatformV1BatchPredictionJob response = api.aiplatformProjectsLocationsBatchPredictionJobsCreate(projectsId, locationsId, uploadProtocol, oauthToken, prettyPrint, key, fields, alt, uploadType, accessToken, quotaUser, paramCallback, $xgafv, googleCloudAiplatformV1BatchPredictionJob);
        // TODO: test validations
    }

    /**
     * Deletes a BatchPredictionJob. Can only be called on jobs that already finished.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void aiplatformProjectsLocationsBatchPredictionJobsDeleteTest() throws ApiException {
        String projectsId = null;
        String locationsId = null;
        String batchPredictionJobsId = null;
        String uploadProtocol = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String key = null;
        String fields = null;
        String alt = null;
        String uploadType = null;
        String accessToken = null;
        String quotaUser = null;
        String paramCallback = null;
        String $xgafv = null;
        GoogleLongrunningOperation response = api.aiplatformProjectsLocationsBatchPredictionJobsDelete(projectsId, locationsId, batchPredictionJobsId, uploadProtocol, oauthToken, prettyPrint, key, fields, alt, uploadType, accessToken, quotaUser, paramCallback, $xgafv);
        // TODO: test validations
    }

    /**
     * Gets a BatchPredictionJob
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void aiplatformProjectsLocationsBatchPredictionJobsGetTest() throws ApiException {
        String projectsId = null;
        String locationsId = null;
        String batchPredictionJobsId = null;
        String uploadProtocol = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String key = null;
        String fields = null;
        String alt = null;
        String uploadType = null;
        String accessToken = null;
        String quotaUser = null;
        String paramCallback = null;
        String $xgafv = null;
        GoogleCloudAiplatformV1BatchPredictionJob response = api.aiplatformProjectsLocationsBatchPredictionJobsGet(projectsId, locationsId, batchPredictionJobsId, uploadProtocol, oauthToken, prettyPrint, key, fields, alt, uploadType, accessToken, quotaUser, paramCallback, $xgafv);
        // TODO: test validations
    }

    /**
     * Lists BatchPredictionJobs in a Location.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void aiplatformProjectsLocationsBatchPredictionJobsListTest() throws ApiException {
        String projectsId = null;
        String locationsId = null;
        String pageToken = null;
        Integer pageSize = null;
        String filter = null;
        String readMask = null;
        String uploadProtocol = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String key = null;
        String fields = null;
        String alt = null;
        String uploadType = null;
        String accessToken = null;
        String quotaUser = null;
        String paramCallback = null;
        String $xgafv = null;
        GoogleCloudAiplatformV1ListBatchPredictionJobsResponse response = api.aiplatformProjectsLocationsBatchPredictionJobsList(projectsId, locationsId, pageToken, pageSize, filter, readMask, uploadProtocol, oauthToken, prettyPrint, key, fields, alt, uploadType, accessToken, quotaUser, paramCallback, $xgafv);
        // TODO: test validations
    }

    /**
     * Cancels a CustomJob. Starts asynchronous cancellation on the CustomJob. The server makes a best effort to cancel the job, but success is not guaranteed. Clients can use JobService.GetCustomJob or other methods to check whether the cancellation succeeded or whether the job completed despite cancellation. On successful cancellation, the CustomJob is not deleted; instead it becomes a job with a CustomJob.error value with a google.rpc.Status.code of 1, corresponding to &#x60;Code.CANCELLED&#x60;, and CustomJob.state is set to &#x60;CANCELLED&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void aiplatformProjectsLocationsCustomJobsCancelTest() throws ApiException {
        String projectsId = null;
        String locationsId = null;
        String customJobsId = null;
        String uploadProtocol = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String key = null;
        String fields = null;
        String alt = null;
        String uploadType = null;
        String accessToken = null;
        String quotaUser = null;
        String paramCallback = null;
        String $xgafv = null;
        Object body = null;
        Object response = api.aiplatformProjectsLocationsCustomJobsCancel(projectsId, locationsId, customJobsId, uploadProtocol, oauthToken, prettyPrint, key, fields, alt, uploadType, accessToken, quotaUser, paramCallback, $xgafv, body);
        // TODO: test validations
    }

    /**
     * Creates a CustomJob. A created CustomJob right away will be attempted to be run.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void aiplatformProjectsLocationsCustomJobsCreateTest() throws ApiException {
        String projectsId = null;
        String locationsId = null;
        String uploadProtocol = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String key = null;
        String fields = null;
        String alt = null;
        String uploadType = null;
        String accessToken = null;
        String quotaUser = null;
        String paramCallback = null;
        String $xgafv = null;
        GoogleCloudAiplatformV1CustomJob googleCloudAiplatformV1CustomJob = null;
        GoogleCloudAiplatformV1CustomJob response = api.aiplatformProjectsLocationsCustomJobsCreate(projectsId, locationsId, uploadProtocol, oauthToken, prettyPrint, key, fields, alt, uploadType, accessToken, quotaUser, paramCallback, $xgafv, googleCloudAiplatformV1CustomJob);
        // TODO: test validations
    }

    /**
     * Deletes a CustomJob.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void aiplatformProjectsLocationsCustomJobsDeleteTest() throws ApiException {
        String projectsId = null;
        String locationsId = null;
        String customJobsId = null;
        String uploadProtocol = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String key = null;
        String fields = null;
        String alt = null;
        String uploadType = null;
        String accessToken = null;
        String quotaUser = null;
        String paramCallback = null;
        String $xgafv = null;
        GoogleLongrunningOperation response = api.aiplatformProjectsLocationsCustomJobsDelete(projectsId, locationsId, customJobsId, uploadProtocol, oauthToken, prettyPrint, key, fields, alt, uploadType, accessToken, quotaUser, paramCallback, $xgafv);
        // TODO: test validations
    }

    /**
     * Gets a CustomJob.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void aiplatformProjectsLocationsCustomJobsGetTest() throws ApiException {
        String projectsId = null;
        String locationsId = null;
        String customJobsId = null;
        String uploadProtocol = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String key = null;
        String fields = null;
        String alt = null;
        String uploadType = null;
        String accessToken = null;
        String quotaUser = null;
        String paramCallback = null;
        String $xgafv = null;
        GoogleCloudAiplatformV1CustomJob response = api.aiplatformProjectsLocationsCustomJobsGet(projectsId, locationsId, customJobsId, uploadProtocol, oauthToken, prettyPrint, key, fields, alt, uploadType, accessToken, quotaUser, paramCallback, $xgafv);
        // TODO: test validations
    }

    /**
     * Lists CustomJobs in a Location.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void aiplatformProjectsLocationsCustomJobsListTest() throws ApiException {
        String projectsId = null;
        String locationsId = null;
        String filter = null;
        String readMask = null;
        String pageToken = null;
        Integer pageSize = null;
        String uploadProtocol = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String key = null;
        String fields = null;
        String alt = null;
        String uploadType = null;
        String accessToken = null;
        String quotaUser = null;
        String paramCallback = null;
        String $xgafv = null;
        GoogleCloudAiplatformV1ListCustomJobsResponse response = api.aiplatformProjectsLocationsCustomJobsList(projectsId, locationsId, filter, readMask, pageToken, pageSize, uploadProtocol, oauthToken, prettyPrint, key, fields, alt, uploadType, accessToken, quotaUser, paramCallback, $xgafv);
        // TODO: test validations
    }

    /**
     * Starts asynchronous cancellation on a long-running operation. The server makes a best effort to cancel the operation, but success is not guaranteed. If the server doesn&#39;t support this method, it returns &#x60;google.rpc.Code.UNIMPLEMENTED&#x60;. Clients can use Operations.GetOperation or other methods to check whether the cancellation succeeded or whether the operation completed despite cancellation. On successful cancellation, the operation is not deleted; instead, it becomes an operation with an Operation.error value with a google.rpc.Status.code of 1, corresponding to &#x60;Code.CANCELLED&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void aiplatformProjectsLocationsCustomJobsOperationsCancelTest() throws ApiException {
        String projectsId = null;
        String locationsId = null;
        String customJobsId = null;
        String operationsId = null;
        String uploadProtocol = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String key = null;
        String fields = null;
        String alt = null;
        String uploadType = null;
        String accessToken = null;
        String quotaUser = null;
        String paramCallback = null;
        String $xgafv = null;
        Object response = api.aiplatformProjectsLocationsCustomJobsOperationsCancel(projectsId, locationsId, customJobsId, operationsId, uploadProtocol, oauthToken, prettyPrint, key, fields, alt, uploadType, accessToken, quotaUser, paramCallback, $xgafv);
        // TODO: test validations
    }

    /**
     * Deletes a long-running operation. This method indicates that the client is no longer interested in the operation result. It does not cancel the operation. If the server doesn&#39;t support this method, it returns &#x60;google.rpc.Code.UNIMPLEMENTED&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void aiplatformProjectsLocationsCustomJobsOperationsDeleteTest() throws ApiException {
        String projectsId = null;
        String locationsId = null;
        String customJobsId = null;
        String operationsId = null;
        String uploadProtocol = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String key = null;
        String fields = null;
        String alt = null;
        String uploadType = null;
        String accessToken = null;
        String quotaUser = null;
        String paramCallback = null;
        String $xgafv = null;
        Object response = api.aiplatformProjectsLocationsCustomJobsOperationsDelete(projectsId, locationsId, customJobsId, operationsId, uploadProtocol, oauthToken, prettyPrint, key, fields, alt, uploadType, accessToken, quotaUser, paramCallback, $xgafv);
        // TODO: test validations
    }

    /**
     * Gets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void aiplatformProjectsLocationsCustomJobsOperationsGetTest() throws ApiException {
        String projectsId = null;
        String locationsId = null;
        String customJobsId = null;
        String operationsId = null;
        String uploadProtocol = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String key = null;
        String fields = null;
        String alt = null;
        String uploadType = null;
        String accessToken = null;
        String quotaUser = null;
        String paramCallback = null;
        String $xgafv = null;
        GoogleLongrunningOperation response = api.aiplatformProjectsLocationsCustomJobsOperationsGet(projectsId, locationsId, customJobsId, operationsId, uploadProtocol, oauthToken, prettyPrint, key, fields, alt, uploadType, accessToken, quotaUser, paramCallback, $xgafv);
        // TODO: test validations
    }

    /**
     * Lists operations that match the specified filter in the request. If the server doesn&#39;t support this method, it returns &#x60;UNIMPLEMENTED&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void aiplatformProjectsLocationsCustomJobsOperationsListTest() throws ApiException {
        String projectsId = null;
        String locationsId = null;
        String customJobsId = null;
        String pageToken = null;
        String filter = null;
        Integer pageSize = null;
        String uploadProtocol = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String key = null;
        String fields = null;
        String alt = null;
        String uploadType = null;
        String accessToken = null;
        String quotaUser = null;
        String paramCallback = null;
        String $xgafv = null;
        GoogleLongrunningListOperationsResponse response = api.aiplatformProjectsLocationsCustomJobsOperationsList(projectsId, locationsId, customJobsId, pageToken, filter, pageSize, uploadProtocol, oauthToken, prettyPrint, key, fields, alt, uploadType, accessToken, quotaUser, paramCallback, $xgafv);
        // TODO: test validations
    }

    /**
     * Waits until the specified long-running operation is done or reaches at most a specified timeout, returning the latest state. If the operation is already done, the latest state is immediately returned. If the timeout specified is greater than the default HTTP/RPC timeout, the HTTP/RPC timeout is used. If the server does not support this method, it returns &#x60;google.rpc.Code.UNIMPLEMENTED&#x60;. Note that this method is on a best-effort basis. It may return the latest state before the specified timeout (including immediately), meaning even an immediate response is no guarantee that the operation is done.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void aiplatformProjectsLocationsCustomJobsOperationsWaitTest() throws ApiException {
        String projectsId = null;
        String locationsId = null;
        String customJobsId = null;
        String operationsId = null;
        String timeout = null;
        String uploadProtocol = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String key = null;
        String fields = null;
        String alt = null;
        String uploadType = null;
        String accessToken = null;
        String quotaUser = null;
        String paramCallback = null;
        String $xgafv = null;
        GoogleLongrunningOperation response = api.aiplatformProjectsLocationsCustomJobsOperationsWait(projectsId, locationsId, customJobsId, operationsId, timeout, uploadProtocol, oauthToken, prettyPrint, key, fields, alt, uploadType, accessToken, quotaUser, paramCallback, $xgafv);
        // TODO: test validations
    }

    /**
     * Cancels a DataLabelingJob. Success of cancellation is not guaranteed.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void aiplatformProjectsLocationsDataLabelingJobsCancelTest() throws ApiException {
        String projectsId = null;
        String locationsId = null;
        String dataLabelingJobsId = null;
        String uploadProtocol = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String key = null;
        String fields = null;
        String alt = null;
        String uploadType = null;
        String accessToken = null;
        String quotaUser = null;
        String paramCallback = null;
        String $xgafv = null;
        Object body = null;
        Object response = api.aiplatformProjectsLocationsDataLabelingJobsCancel(projectsId, locationsId, dataLabelingJobsId, uploadProtocol, oauthToken, prettyPrint, key, fields, alt, uploadType, accessToken, quotaUser, paramCallback, $xgafv, body);
        // TODO: test validations
    }

    /**
     * Creates a DataLabelingJob.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void aiplatformProjectsLocationsDataLabelingJobsCreateTest() throws ApiException {
        String projectsId = null;
        String locationsId = null;
        String uploadProtocol = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String key = null;
        String fields = null;
        String alt = null;
        String uploadType = null;
        String accessToken = null;
        String quotaUser = null;
        String paramCallback = null;
        String $xgafv = null;
        GoogleCloudAiplatformV1DataLabelingJob googleCloudAiplatformV1DataLabelingJob = null;
        GoogleCloudAiplatformV1DataLabelingJob response = api.aiplatformProjectsLocationsDataLabelingJobsCreate(projectsId, locationsId, uploadProtocol, oauthToken, prettyPrint, key, fields, alt, uploadType, accessToken, quotaUser, paramCallback, $xgafv, googleCloudAiplatformV1DataLabelingJob);
        // TODO: test validations
    }

    /**
     * Deletes a DataLabelingJob.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void aiplatformProjectsLocationsDataLabelingJobsDeleteTest() throws ApiException {
        String projectsId = null;
        String locationsId = null;
        String dataLabelingJobsId = null;
        String uploadProtocol = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String key = null;
        String fields = null;
        String alt = null;
        String uploadType = null;
        String accessToken = null;
        String quotaUser = null;
        String paramCallback = null;
        String $xgafv = null;
        GoogleLongrunningOperation response = api.aiplatformProjectsLocationsDataLabelingJobsDelete(projectsId, locationsId, dataLabelingJobsId, uploadProtocol, oauthToken, prettyPrint, key, fields, alt, uploadType, accessToken, quotaUser, paramCallback, $xgafv);
        // TODO: test validations
    }

    /**
     * Gets a DataLabelingJob.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void aiplatformProjectsLocationsDataLabelingJobsGetTest() throws ApiException {
        String projectsId = null;
        String locationsId = null;
        String dataLabelingJobsId = null;
        String uploadProtocol = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String key = null;
        String fields = null;
        String alt = null;
        String uploadType = null;
        String accessToken = null;
        String quotaUser = null;
        String paramCallback = null;
        String $xgafv = null;
        GoogleCloudAiplatformV1DataLabelingJob response = api.aiplatformProjectsLocationsDataLabelingJobsGet(projectsId, locationsId, dataLabelingJobsId, uploadProtocol, oauthToken, prettyPrint, key, fields, alt, uploadType, accessToken, quotaUser, paramCallback, $xgafv);
        // TODO: test validations
    }

    /**
     * Lists DataLabelingJobs in a Location.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void aiplatformProjectsLocationsDataLabelingJobsListTest() throws ApiException {
        String projectsId = null;
        String locationsId = null;
        String pageToken = null;
        Integer pageSize = null;
        String readMask = null;
        String orderBy = null;
        String filter = null;
        String uploadProtocol = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String key = null;
        String fields = null;
        String alt = null;
        String uploadType = null;
        String accessToken = null;
        String quotaUser = null;
        String paramCallback = null;
        String $xgafv = null;
        GoogleCloudAiplatformV1ListDataLabelingJobsResponse response = api.aiplatformProjectsLocationsDataLabelingJobsList(projectsId, locationsId, pageToken, pageSize, readMask, orderBy, filter, uploadProtocol, oauthToken, prettyPrint, key, fields, alt, uploadType, accessToken, quotaUser, paramCallback, $xgafv);
        // TODO: test validations
    }

    /**
     * Starts asynchronous cancellation on a long-running operation. The server makes a best effort to cancel the operation, but success is not guaranteed. If the server doesn&#39;t support this method, it returns &#x60;google.rpc.Code.UNIMPLEMENTED&#x60;. Clients can use Operations.GetOperation or other methods to check whether the cancellation succeeded or whether the operation completed despite cancellation. On successful cancellation, the operation is not deleted; instead, it becomes an operation with an Operation.error value with a google.rpc.Status.code of 1, corresponding to &#x60;Code.CANCELLED&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void aiplatformProjectsLocationsDataLabelingJobsOperationsCancelTest() throws ApiException {
        String projectsId = null;
        String locationsId = null;
        String dataLabelingJobsId = null;
        String operationsId = null;
        String uploadProtocol = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String key = null;
        String fields = null;
        String alt = null;
        String uploadType = null;
        String accessToken = null;
        String quotaUser = null;
        String paramCallback = null;
        String $xgafv = null;
        Object response = api.aiplatformProjectsLocationsDataLabelingJobsOperationsCancel(projectsId, locationsId, dataLabelingJobsId, operationsId, uploadProtocol, oauthToken, prettyPrint, key, fields, alt, uploadType, accessToken, quotaUser, paramCallback, $xgafv);
        // TODO: test validations
    }

    /**
     * Deletes a long-running operation. This method indicates that the client is no longer interested in the operation result. It does not cancel the operation. If the server doesn&#39;t support this method, it returns &#x60;google.rpc.Code.UNIMPLEMENTED&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void aiplatformProjectsLocationsDataLabelingJobsOperationsDeleteTest() throws ApiException {
        String projectsId = null;
        String locationsId = null;
        String dataLabelingJobsId = null;
        String operationsId = null;
        String uploadProtocol = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String key = null;
        String fields = null;
        String alt = null;
        String uploadType = null;
        String accessToken = null;
        String quotaUser = null;
        String paramCallback = null;
        String $xgafv = null;
        Object response = api.aiplatformProjectsLocationsDataLabelingJobsOperationsDelete(projectsId, locationsId, dataLabelingJobsId, operationsId, uploadProtocol, oauthToken, prettyPrint, key, fields, alt, uploadType, accessToken, quotaUser, paramCallback, $xgafv);
        // TODO: test validations
    }

    /**
     * Gets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void aiplatformProjectsLocationsDataLabelingJobsOperationsGetTest() throws ApiException {
        String projectsId = null;
        String locationsId = null;
        String dataLabelingJobsId = null;
        String operationsId = null;
        String uploadProtocol = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String key = null;
        String fields = null;
        String alt = null;
        String uploadType = null;
        String accessToken = null;
        String quotaUser = null;
        String paramCallback = null;
        String $xgafv = null;
        GoogleLongrunningOperation response = api.aiplatformProjectsLocationsDataLabelingJobsOperationsGet(projectsId, locationsId, dataLabelingJobsId, operationsId, uploadProtocol, oauthToken, prettyPrint, key, fields, alt, uploadType, accessToken, quotaUser, paramCallback, $xgafv);
        // TODO: test validations
    }

    /**
     * Lists operations that match the specified filter in the request. If the server doesn&#39;t support this method, it returns &#x60;UNIMPLEMENTED&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void aiplatformProjectsLocationsDataLabelingJobsOperationsListTest() throws ApiException {
        String projectsId = null;
        String locationsId = null;
        String dataLabelingJobsId = null;
        String pageToken = null;
        Integer pageSize = null;
        String filter = null;
        String uploadProtocol = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String key = null;
        String fields = null;
        String alt = null;
        String uploadType = null;
        String accessToken = null;
        String quotaUser = null;
        String paramCallback = null;
        String $xgafv = null;
        GoogleLongrunningListOperationsResponse response = api.aiplatformProjectsLocationsDataLabelingJobsOperationsList(projectsId, locationsId, dataLabelingJobsId, pageToken, pageSize, filter, uploadProtocol, oauthToken, prettyPrint, key, fields, alt, uploadType, accessToken, quotaUser, paramCallback, $xgafv);
        // TODO: test validations
    }

    /**
     * Waits until the specified long-running operation is done or reaches at most a specified timeout, returning the latest state. If the operation is already done, the latest state is immediately returned. If the timeout specified is greater than the default HTTP/RPC timeout, the HTTP/RPC timeout is used. If the server does not support this method, it returns &#x60;google.rpc.Code.UNIMPLEMENTED&#x60;. Note that this method is on a best-effort basis. It may return the latest state before the specified timeout (including immediately), meaning even an immediate response is no guarantee that the operation is done.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void aiplatformProjectsLocationsDataLabelingJobsOperationsWaitTest() throws ApiException {
        String projectsId = null;
        String locationsId = null;
        String dataLabelingJobsId = null;
        String operationsId = null;
        String timeout = null;
        String uploadProtocol = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String key = null;
        String fields = null;
        String alt = null;
        String uploadType = null;
        String accessToken = null;
        String quotaUser = null;
        String paramCallback = null;
        String $xgafv = null;
        GoogleLongrunningOperation response = api.aiplatformProjectsLocationsDataLabelingJobsOperationsWait(projectsId, locationsId, dataLabelingJobsId, operationsId, timeout, uploadProtocol, oauthToken, prettyPrint, key, fields, alt, uploadType, accessToken, quotaUser, paramCallback, $xgafv);
        // TODO: test validations
    }

    /**
     * Gets an AnnotationSpec.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void aiplatformProjectsLocationsDatasetsAnnotationSpecsGetTest() throws ApiException {
        String projectsId = null;
        String locationsId = null;
        String datasetsId = null;
        String annotationSpecsId = null;
        String readMask = null;
        String uploadProtocol = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String key = null;
        String fields = null;
        String alt = null;
        String uploadType = null;
        String accessToken = null;
        String quotaUser = null;
        String paramCallback = null;
        String $xgafv = null;
        GoogleCloudAiplatformV1AnnotationSpec response = api.aiplatformProjectsLocationsDatasetsAnnotationSpecsGet(projectsId, locationsId, datasetsId, annotationSpecsId, readMask, uploadProtocol, oauthToken, prettyPrint, key, fields, alt, uploadType, accessToken, quotaUser, paramCallback, $xgafv);
        // TODO: test validations
    }

    /**
     * Starts asynchronous cancellation on a long-running operation. The server makes a best effort to cancel the operation, but success is not guaranteed. If the server doesn&#39;t support this method, it returns &#x60;google.rpc.Code.UNIMPLEMENTED&#x60;. Clients can use Operations.GetOperation or other methods to check whether the cancellation succeeded or whether the operation completed despite cancellation. On successful cancellation, the operation is not deleted; instead, it becomes an operation with an Operation.error value with a google.rpc.Status.code of 1, corresponding to &#x60;Code.CANCELLED&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void aiplatformProjectsLocationsDatasetsAnnotationSpecsOperationsCancelTest() throws ApiException {
        String projectsId = null;
        String locationsId = null;
        String datasetsId = null;
        String annotationSpecsId = null;
        String operationsId = null;
        String uploadProtocol = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String key = null;
        String fields = null;
        String alt = null;
        String uploadType = null;
        String accessToken = null;
        String quotaUser = null;
        String paramCallback = null;
        String $xgafv = null;
        Object response = api.aiplatformProjectsLocationsDatasetsAnnotationSpecsOperationsCancel(projectsId, locationsId, datasetsId, annotationSpecsId, operationsId, uploadProtocol, oauthToken, prettyPrint, key, fields, alt, uploadType, accessToken, quotaUser, paramCallback, $xgafv);
        // TODO: test validations
    }

    /**
     * Deletes a long-running operation. This method indicates that the client is no longer interested in the operation result. It does not cancel the operation. If the server doesn&#39;t support this method, it returns &#x60;google.rpc.Code.UNIMPLEMENTED&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void aiplatformProjectsLocationsDatasetsAnnotationSpecsOperationsDeleteTest() throws ApiException {
        String projectsId = null;
        String locationsId = null;
        String datasetsId = null;
        String annotationSpecsId = null;
        String operationsId = null;
        String uploadProtocol = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String key = null;
        String fields = null;
        String alt = null;
        String uploadType = null;
        String accessToken = null;
        String quotaUser = null;
        String paramCallback = null;
        String $xgafv = null;
        Object response = api.aiplatformProjectsLocationsDatasetsAnnotationSpecsOperationsDelete(projectsId, locationsId, datasetsId, annotationSpecsId, operationsId, uploadProtocol, oauthToken, prettyPrint, key, fields, alt, uploadType, accessToken, quotaUser, paramCallback, $xgafv);
        // TODO: test validations
    }

    /**
     * Gets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void aiplatformProjectsLocationsDatasetsAnnotationSpecsOperationsGetTest() throws ApiException {
        String projectsId = null;
        String locationsId = null;
        String datasetsId = null;
        String annotationSpecsId = null;
        String operationsId = null;
        String uploadProtocol = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String key = null;
        String fields = null;
        String alt = null;
        String uploadType = null;
        String accessToken = null;
        String quotaUser = null;
        String paramCallback = null;
        String $xgafv = null;
        GoogleLongrunningOperation response = api.aiplatformProjectsLocationsDatasetsAnnotationSpecsOperationsGet(projectsId, locationsId, datasetsId, annotationSpecsId, operationsId, uploadProtocol, oauthToken, prettyPrint, key, fields, alt, uploadType, accessToken, quotaUser, paramCallback, $xgafv);
        // TODO: test validations
    }

    /**
     * Lists operations that match the specified filter in the request. If the server doesn&#39;t support this method, it returns &#x60;UNIMPLEMENTED&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void aiplatformProjectsLocationsDatasetsAnnotationSpecsOperationsListTest() throws ApiException {
        String projectsId = null;
        String locationsId = null;
        String datasetsId = null;
        String annotationSpecsId = null;
        Integer pageSize = null;
        String filter = null;
        String pageToken = null;
        String uploadProtocol = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String key = null;
        String fields = null;
        String alt = null;
        String uploadType = null;
        String accessToken = null;
        String quotaUser = null;
        String paramCallback = null;
        String $xgafv = null;
        GoogleLongrunningListOperationsResponse response = api.aiplatformProjectsLocationsDatasetsAnnotationSpecsOperationsList(projectsId, locationsId, datasetsId, annotationSpecsId, pageSize, filter, pageToken, uploadProtocol, oauthToken, prettyPrint, key, fields, alt, uploadType, accessToken, quotaUser, paramCallback, $xgafv);
        // TODO: test validations
    }

    /**
     * Waits until the specified long-running operation is done or reaches at most a specified timeout, returning the latest state. If the operation is already done, the latest state is immediately returned. If the timeout specified is greater than the default HTTP/RPC timeout, the HTTP/RPC timeout is used. If the server does not support this method, it returns &#x60;google.rpc.Code.UNIMPLEMENTED&#x60;. Note that this method is on a best-effort basis. It may return the latest state before the specified timeout (including immediately), meaning even an immediate response is no guarantee that the operation is done.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void aiplatformProjectsLocationsDatasetsAnnotationSpecsOperationsWaitTest() throws ApiException {
        String projectsId = null;
        String locationsId = null;
        String datasetsId = null;
        String annotationSpecsId = null;
        String operationsId = null;
        String timeout = null;
        String uploadProtocol = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String key = null;
        String fields = null;
        String alt = null;
        String uploadType = null;
        String accessToken = null;
        String quotaUser = null;
        String paramCallback = null;
        String $xgafv = null;
        GoogleLongrunningOperation response = api.aiplatformProjectsLocationsDatasetsAnnotationSpecsOperationsWait(projectsId, locationsId, datasetsId, annotationSpecsId, operationsId, timeout, uploadProtocol, oauthToken, prettyPrint, key, fields, alt, uploadType, accessToken, quotaUser, paramCallback, $xgafv);
        // TODO: test validations
    }

    /**
     * Creates a Dataset.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void aiplatformProjectsLocationsDatasetsCreateTest() throws ApiException {
        String projectsId = null;
        String locationsId = null;
        String uploadProtocol = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String key = null;
        String fields = null;
        String alt = null;
        String uploadType = null;
        String accessToken = null;
        String quotaUser = null;
        String paramCallback = null;
        String $xgafv = null;
        GoogleCloudAiplatformV1Dataset googleCloudAiplatformV1Dataset = null;
        GoogleLongrunningOperation response = api.aiplatformProjectsLocationsDatasetsCreate(projectsId, locationsId, uploadProtocol, oauthToken, prettyPrint, key, fields, alt, uploadType, accessToken, quotaUser, paramCallback, $xgafv, googleCloudAiplatformV1Dataset);
        // TODO: test validations
    }

    /**
     * Lists Annotations belongs to a dataitem This RPC is only available in InternalDatasetService. It is only used for exporting conversation data to CCAI Insights.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void aiplatformProjectsLocationsDatasetsDataItemsAnnotationsListTest() throws ApiException {
        String projectsId = null;
        String locationsId = null;
        String datasetsId = null;
        String dataItemsId = null;
        String readMask = null;
        String pageToken = null;
        Integer pageSize = null;
        String filter = null;
        String orderBy = null;
        String uploadProtocol = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String key = null;
        String fields = null;
        String alt = null;
        String uploadType = null;
        String accessToken = null;
        String quotaUser = null;
        String paramCallback = null;
        String $xgafv = null;
        GoogleCloudAiplatformV1ListAnnotationsResponse response = api.aiplatformProjectsLocationsDatasetsDataItemsAnnotationsList(projectsId, locationsId, datasetsId, dataItemsId, readMask, pageToken, pageSize, filter, orderBy, uploadProtocol, oauthToken, prettyPrint, key, fields, alt, uploadType, accessToken, quotaUser, paramCallback, $xgafv);
        // TODO: test validations
    }

    /**
     * Starts asynchronous cancellation on a long-running operation. The server makes a best effort to cancel the operation, but success is not guaranteed. If the server doesn&#39;t support this method, it returns &#x60;google.rpc.Code.UNIMPLEMENTED&#x60;. Clients can use Operations.GetOperation or other methods to check whether the cancellation succeeded or whether the operation completed despite cancellation. On successful cancellation, the operation is not deleted; instead, it becomes an operation with an Operation.error value with a google.rpc.Status.code of 1, corresponding to &#x60;Code.CANCELLED&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void aiplatformProjectsLocationsDatasetsDataItemsAnnotationsOperationsCancelTest() throws ApiException {
        String projectsId = null;
        String locationsId = null;
        String datasetsId = null;
        String dataItemsId = null;
        String annotationsId = null;
        String operationsId = null;
        String uploadProtocol = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String key = null;
        String fields = null;
        String alt = null;
        String uploadType = null;
        String accessToken = null;
        String quotaUser = null;
        String paramCallback = null;
        String $xgafv = null;
        Object response = api.aiplatformProjectsLocationsDatasetsDataItemsAnnotationsOperationsCancel(projectsId, locationsId, datasetsId, dataItemsId, annotationsId, operationsId, uploadProtocol, oauthToken, prettyPrint, key, fields, alt, uploadType, accessToken, quotaUser, paramCallback, $xgafv);
        // TODO: test validations
    }

    /**
     * Deletes a long-running operation. This method indicates that the client is no longer interested in the operation result. It does not cancel the operation. If the server doesn&#39;t support this method, it returns &#x60;google.rpc.Code.UNIMPLEMENTED&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void aiplatformProjectsLocationsDatasetsDataItemsAnnotationsOperationsDeleteTest() throws ApiException {
        String projectsId = null;
        String locationsId = null;
        String datasetsId = null;
        String dataItemsId = null;
        String annotationsId = null;
        String operationsId = null;
        String uploadProtocol = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String key = null;
        String fields = null;
        String alt = null;
        String uploadType = null;
        String accessToken = null;
        String quotaUser = null;
        String paramCallback = null;
        String $xgafv = null;
        Object response = api.aiplatformProjectsLocationsDatasetsDataItemsAnnotationsOperationsDelete(projectsId, locationsId, datasetsId, dataItemsId, annotationsId, operationsId, uploadProtocol, oauthToken, prettyPrint, key, fields, alt, uploadType, accessToken, quotaUser, paramCallback, $xgafv);
        // TODO: test validations
    }

    /**
     * Gets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void aiplatformProjectsLocationsDatasetsDataItemsAnnotationsOperationsGetTest() throws ApiException {
        String projectsId = null;
        String locationsId = null;
        String datasetsId = null;
        String dataItemsId = null;
        String annotationsId = null;
        String operationsId = null;
        String uploadProtocol = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String key = null;
        String fields = null;
        String alt = null;
        String uploadType = null;
        String accessToken = null;
        String quotaUser = null;
        String paramCallback = null;
        String $xgafv = null;
        GoogleLongrunningOperation response = api.aiplatformProjectsLocationsDatasetsDataItemsAnnotationsOperationsGet(projectsId, locationsId, datasetsId, dataItemsId, annotationsId, operationsId, uploadProtocol, oauthToken, prettyPrint, key, fields, alt, uploadType, accessToken, quotaUser, paramCallback, $xgafv);
        // TODO: test validations
    }

    /**
     * Lists operations that match the specified filter in the request. If the server doesn&#39;t support this method, it returns &#x60;UNIMPLEMENTED&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void aiplatformProjectsLocationsDatasetsDataItemsAnnotationsOperationsListTest() throws ApiException {
        String projectsId = null;
        String locationsId = null;
        String datasetsId = null;
        String dataItemsId = null;
        String annotationsId = null;
        String filter = null;
        Integer pageSize = null;
        String pageToken = null;
        String uploadProtocol = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String key = null;
        String fields = null;
        String alt = null;
        String uploadType = null;
        String accessToken = null;
        String quotaUser = null;
        String paramCallback = null;
        String $xgafv = null;
        GoogleLongrunningListOperationsResponse response = api.aiplatformProjectsLocationsDatasetsDataItemsAnnotationsOperationsList(projectsId, locationsId, datasetsId, dataItemsId, annotationsId, filter, pageSize, pageToken, uploadProtocol, oauthToken, prettyPrint, key, fields, alt, uploadType, accessToken, quotaUser, paramCallback, $xgafv);
        // TODO: test validations
    }

    /**
     * Waits until the specified long-running operation is done or reaches at most a specified timeout, returning the latest state. If the operation is already done, the latest state is immediately returned. If the timeout specified is greater than the default HTTP/RPC timeout, the HTTP/RPC timeout is used. If the server does not support this method, it returns &#x60;google.rpc.Code.UNIMPLEMENTED&#x60;. Note that this method is on a best-effort basis. It may return the latest state before the specified timeout (including immediately), meaning even an immediate response is no guarantee that the operation is done.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void aiplatformProjectsLocationsDatasetsDataItemsAnnotationsOperationsWaitTest() throws ApiException {
        String projectsId = null;
        String locationsId = null;
        String datasetsId = null;
        String dataItemsId = null;
        String annotationsId = null;
        String operationsId = null;
        String timeout = null;
        String uploadProtocol = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String key = null;
        String fields = null;
        String alt = null;
        String uploadType = null;
        String accessToken = null;
        String quotaUser = null;
        String paramCallback = null;
        String $xgafv = null;
        GoogleLongrunningOperation response = api.aiplatformProjectsLocationsDatasetsDataItemsAnnotationsOperationsWait(projectsId, locationsId, datasetsId, dataItemsId, annotationsId, operationsId, timeout, uploadProtocol, oauthToken, prettyPrint, key, fields, alt, uploadType, accessToken, quotaUser, paramCallback, $xgafv);
        // TODO: test validations
    }

    /**
     * Lists DataItems in a Dataset.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void aiplatformProjectsLocationsDatasetsDataItemsListTest() throws ApiException {
        String projectsId = null;
        String locationsId = null;
        String datasetsId = null;
        String pageToken = null;
        String filter = null;
        String readMask = null;
        Integer pageSize = null;
        String orderBy = null;
        String uploadProtocol = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String key = null;
        String fields = null;
        String alt = null;
        String uploadType = null;
        String accessToken = null;
        String quotaUser = null;
        String paramCallback = null;
        String $xgafv = null;
        GoogleCloudAiplatformV1ListDataItemsResponse response = api.aiplatformProjectsLocationsDatasetsDataItemsList(projectsId, locationsId, datasetsId, pageToken, filter, readMask, pageSize, orderBy, uploadProtocol, oauthToken, prettyPrint, key, fields, alt, uploadType, accessToken, quotaUser, paramCallback, $xgafv);
        // TODO: test validations
    }

    /**
     * Starts asynchronous cancellation on a long-running operation. The server makes a best effort to cancel the operation, but success is not guaranteed. If the server doesn&#39;t support this method, it returns &#x60;google.rpc.Code.UNIMPLEMENTED&#x60;. Clients can use Operations.GetOperation or other methods to check whether the cancellation succeeded or whether the operation completed despite cancellation. On successful cancellation, the operation is not deleted; instead, it becomes an operation with an Operation.error value with a google.rpc.Status.code of 1, corresponding to &#x60;Code.CANCELLED&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void aiplatformProjectsLocationsDatasetsDataItemsOperationsCancelTest() throws ApiException {
        String projectsId = null;
        String locationsId = null;
        String datasetsId = null;
        String dataItemsId = null;
        String operationsId = null;
        String uploadProtocol = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String key = null;
        String fields = null;
        String alt = null;
        String uploadType = null;
        String accessToken = null;
        String quotaUser = null;
        String paramCallback = null;
        String $xgafv = null;
        Object response = api.aiplatformProjectsLocationsDatasetsDataItemsOperationsCancel(projectsId, locationsId, datasetsId, dataItemsId, operationsId, uploadProtocol, oauthToken, prettyPrint, key, fields, alt, uploadType, accessToken, quotaUser, paramCallback, $xgafv);
        // TODO: test validations
    }

    /**
     * Deletes a long-running operation. This method indicates that the client is no longer interested in the operation result. It does not cancel the operation. If the server doesn&#39;t support this method, it returns &#x60;google.rpc.Code.UNIMPLEMENTED&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void aiplatformProjectsLocationsDatasetsDataItemsOperationsDeleteTest() throws ApiException {
        String projectsId = null;
        String locationsId = null;
        String datasetsId = null;
        String dataItemsId = null;
        String operationsId = null;
        String uploadProtocol = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String key = null;
        String fields = null;
        String alt = null;
        String uploadType = null;
        String accessToken = null;
        String quotaUser = null;
        String paramCallback = null;
        String $xgafv = null;
        Object response = api.aiplatformProjectsLocationsDatasetsDataItemsOperationsDelete(projectsId, locationsId, datasetsId, dataItemsId, operationsId, uploadProtocol, oauthToken, prettyPrint, key, fields, alt, uploadType, accessToken, quotaUser, paramCallback, $xgafv);
        // TODO: test validations
    }

    /**
     * Gets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void aiplatformProjectsLocationsDatasetsDataItemsOperationsGetTest() throws ApiException {
        String projectsId = null;
        String locationsId = null;
        String datasetsId = null;
        String dataItemsId = null;
        String operationsId = null;
        String uploadProtocol = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String key = null;
        String fields = null;
        String alt = null;
        String uploadType = null;
        String accessToken = null;
        String quotaUser = null;
        String paramCallback = null;
        String $xgafv = null;
        GoogleLongrunningOperation response = api.aiplatformProjectsLocationsDatasetsDataItemsOperationsGet(projectsId, locationsId, datasetsId, dataItemsId, operationsId, uploadProtocol, oauthToken, prettyPrint, key, fields, alt, uploadType, accessToken, quotaUser, paramCallback, $xgafv);
        // TODO: test validations
    }

    /**
     * Lists operations that match the specified filter in the request. If the server doesn&#39;t support this method, it returns &#x60;UNIMPLEMENTED&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void aiplatformProjectsLocationsDatasetsDataItemsOperationsListTest() throws ApiException {
        String projectsId = null;
        String locationsId = null;
        String datasetsId = null;
        String dataItemsId = null;
        String filter = null;
        String pageToken = null;
        Integer pageSize = null;
        String uploadProtocol = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String key = null;
        String fields = null;
        String alt = null;
        String uploadType = null;
        String accessToken = null;
        String quotaUser = null;
        String paramCallback = null;
        String $xgafv = null;
        GoogleLongrunningListOperationsResponse response = api.aiplatformProjectsLocationsDatasetsDataItemsOperationsList(projectsId, locationsId, datasetsId, dataItemsId, filter, pageToken, pageSize, uploadProtocol, oauthToken, prettyPrint, key, fields, alt, uploadType, accessToken, quotaUser, paramCallback, $xgafv);
        // TODO: test validations
    }

    /**
     * Waits until the specified long-running operation is done or reaches at most a specified timeout, returning the latest state. If the operation is already done, the latest state is immediately returned. If the timeout specified is greater than the default HTTP/RPC timeout, the HTTP/RPC timeout is used. If the server does not support this method, it returns &#x60;google.rpc.Code.UNIMPLEMENTED&#x60;. Note that this method is on a best-effort basis. It may return the latest state before the specified timeout (including immediately), meaning even an immediate response is no guarantee that the operation is done.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void aiplatformProjectsLocationsDatasetsDataItemsOperationsWaitTest() throws ApiException {
        String projectsId = null;
        String locationsId = null;
        String datasetsId = null;
        String dataItemsId = null;
        String operationsId = null;
        String timeout = null;
        String uploadProtocol = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String key = null;
        String fields = null;
        String alt = null;
        String uploadType = null;
        String accessToken = null;
        String quotaUser = null;
        String paramCallback = null;
        String $xgafv = null;
        GoogleLongrunningOperation response = api.aiplatformProjectsLocationsDatasetsDataItemsOperationsWait(projectsId, locationsId, datasetsId, dataItemsId, operationsId, timeout, uploadProtocol, oauthToken, prettyPrint, key, fields, alt, uploadType, accessToken, quotaUser, paramCallback, $xgafv);
        // TODO: test validations
    }

    /**
     * Create a version from a Dataset.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void aiplatformProjectsLocationsDatasetsDatasetVersionsCreateTest() throws ApiException {
        String projectsId = null;
        String locationsId = null;
        String datasetsId = null;
        String uploadProtocol = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String key = null;
        String fields = null;
        String alt = null;
        String uploadType = null;
        String accessToken = null;
        String quotaUser = null;
        String paramCallback = null;
        String $xgafv = null;
        GoogleCloudAiplatformV1DatasetVersion googleCloudAiplatformV1DatasetVersion = null;
        GoogleLongrunningOperation response = api.aiplatformProjectsLocationsDatasetsDatasetVersionsCreate(projectsId, locationsId, datasetsId, uploadProtocol, oauthToken, prettyPrint, key, fields, alt, uploadType, accessToken, quotaUser, paramCallback, $xgafv, googleCloudAiplatformV1DatasetVersion);
        // TODO: test validations
    }

    /**
     * Deletes a Dataset version.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void aiplatformProjectsLocationsDatasetsDatasetVersionsDeleteTest() throws ApiException {
        String projectsId = null;
        String locationsId = null;
        String datasetsId = null;
        String datasetVersionsId = null;
        String uploadProtocol = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String key = null;
        String fields = null;
        String alt = null;
        String uploadType = null;
        String accessToken = null;
        String quotaUser = null;
        String paramCallback = null;
        String $xgafv = null;
        GoogleLongrunningOperation response = api.aiplatformProjectsLocationsDatasetsDatasetVersionsDelete(projectsId, locationsId, datasetsId, datasetVersionsId, uploadProtocol, oauthToken, prettyPrint, key, fields, alt, uploadType, accessToken, quotaUser, paramCallback, $xgafv);
        // TODO: test validations
    }

    /**
     * Gets a Dataset version.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void aiplatformProjectsLocationsDatasetsDatasetVersionsGetTest() throws ApiException {
        String projectsId = null;
        String locationsId = null;
        String datasetsId = null;
        String datasetVersionsId = null;
        String readMask = null;
        String uploadProtocol = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String key = null;
        String fields = null;
        String alt = null;
        String uploadType = null;
        String accessToken = null;
        String quotaUser = null;
        String paramCallback = null;
        String $xgafv = null;
        GoogleCloudAiplatformV1DatasetVersion response = api.aiplatformProjectsLocationsDatasetsDatasetVersionsGet(projectsId, locationsId, datasetsId, datasetVersionsId, readMask, uploadProtocol, oauthToken, prettyPrint, key, fields, alt, uploadType, accessToken, quotaUser, paramCallback, $xgafv);
        // TODO: test validations
    }

    /**
     * Lists DatasetVersions in a Dataset.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void aiplatformProjectsLocationsDatasetsDatasetVersionsListTest() throws ApiException {
        String projectsId = null;
        String locationsId = null;
        String datasetsId = null;
        String readMask = null;
        String filter = null;
        String pageToken = null;
        String orderBy = null;
        Integer pageSize = null;
        String uploadProtocol = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String key = null;
        String fields = null;
        String alt = null;
        String uploadType = null;
        String accessToken = null;
        String quotaUser = null;
        String paramCallback = null;
        String $xgafv = null;
        GoogleCloudAiplatformV1ListDatasetVersionsResponse response = api.aiplatformProjectsLocationsDatasetsDatasetVersionsList(projectsId, locationsId, datasetsId, readMask, filter, pageToken, orderBy, pageSize, uploadProtocol, oauthToken, prettyPrint, key, fields, alt, uploadType, accessToken, quotaUser, paramCallback, $xgafv);
        // TODO: test validations
    }

    /**
     * Updates a DatasetVersion.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void aiplatformProjectsLocationsDatasetsDatasetVersionsPatchTest() throws ApiException {
        String projectsId = null;
        String locationsId = null;
        String datasetsId = null;
        String datasetVersionsId = null;
        String updateMask = null;
        String uploadProtocol = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String key = null;
        String fields = null;
        String alt = null;
        String uploadType = null;
        String accessToken = null;
        String quotaUser = null;
        String paramCallback = null;
        String $xgafv = null;
        GoogleCloudAiplatformV1DatasetVersion googleCloudAiplatformV1DatasetVersion = null;
        GoogleCloudAiplatformV1DatasetVersion response = api.aiplatformProjectsLocationsDatasetsDatasetVersionsPatch(projectsId, locationsId, datasetsId, datasetVersionsId, updateMask, uploadProtocol, oauthToken, prettyPrint, key, fields, alt, uploadType, accessToken, quotaUser, paramCallback, $xgafv, googleCloudAiplatformV1DatasetVersion);
        // TODO: test validations
    }

    /**
     * Restores a dataset version.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void aiplatformProjectsLocationsDatasetsDatasetVersionsRestoreTest() throws ApiException {
        String projectsId = null;
        String locationsId = null;
        String datasetsId = null;
        String datasetVersionsId = null;
        String uploadProtocol = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String key = null;
        String fields = null;
        String alt = null;
        String uploadType = null;
        String accessToken = null;
        String quotaUser = null;
        String paramCallback = null;
        String $xgafv = null;
        GoogleLongrunningOperation response = api.aiplatformProjectsLocationsDatasetsDatasetVersionsRestore(projectsId, locationsId, datasetsId, datasetVersionsId, uploadProtocol, oauthToken, prettyPrint, key, fields, alt, uploadType, accessToken, quotaUser, paramCallback, $xgafv);
        // TODO: test validations
    }

    /**
     * Deletes a Dataset.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void aiplatformProjectsLocationsDatasetsDeleteTest() throws ApiException {
        String projectsId = null;
        String locationsId = null;
        String datasetsId = null;
        String uploadProtocol = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String key = null;
        String fields = null;
        String alt = null;
        String uploadType = null;
        String accessToken = null;
        String quotaUser = null;
        String paramCallback = null;
        String $xgafv = null;
        GoogleLongrunningOperation response = api.aiplatformProjectsLocationsDatasetsDelete(projectsId, locationsId, datasetsId, uploadProtocol, oauthToken, prettyPrint, key, fields, alt, uploadType, accessToken, quotaUser, paramCallback, $xgafv);
        // TODO: test validations
    }

    /**
     * Exports data from a Dataset.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void aiplatformProjectsLocationsDatasetsExportTest() throws ApiException {
        String projectsId = null;
        String locationsId = null;
        String datasetsId = null;
        String uploadProtocol = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String key = null;
        String fields = null;
        String alt = null;
        String uploadType = null;
        String accessToken = null;
        String quotaUser = null;
        String paramCallback = null;
        String $xgafv = null;
        GoogleCloudAiplatformV1ExportDataRequest googleCloudAiplatformV1ExportDataRequest = null;
        GoogleLongrunningOperation response = api.aiplatformProjectsLocationsDatasetsExport(projectsId, locationsId, datasetsId, uploadProtocol, oauthToken, prettyPrint, key, fields, alt, uploadType, accessToken, quotaUser, paramCallback, $xgafv, googleCloudAiplatformV1ExportDataRequest);
        // TODO: test validations
    }

    /**
     * Gets a Dataset.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void aiplatformProjectsLocationsDatasetsGetTest() throws ApiException {
        String projectsId = null;
        String locationsId = null;
        String datasetsId = null;
        String readMask = null;
        String uploadProtocol = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String key = null;
        String fields = null;
        String alt = null;
        String uploadType = null;
        String accessToken = null;
        String quotaUser = null;
        String paramCallback = null;
        String $xgafv = null;
        GoogleCloudAiplatformV1Dataset response = api.aiplatformProjectsLocationsDatasetsGet(projectsId, locationsId, datasetsId, readMask, uploadProtocol, oauthToken, prettyPrint, key, fields, alt, uploadType, accessToken, quotaUser, paramCallback, $xgafv);
        // TODO: test validations
    }

    /**
     * Imports data into a Dataset.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void aiplatformProjectsLocationsDatasetsImportTest() throws ApiException {
        String projectsId = null;
        String locationsId = null;
        String datasetsId = null;
        String uploadProtocol = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String key = null;
        String fields = null;
        String alt = null;
        String uploadType = null;
        String accessToken = null;
        String quotaUser = null;
        String paramCallback = null;
        String $xgafv = null;
        GoogleCloudAiplatformV1ImportDataRequest googleCloudAiplatformV1ImportDataRequest = null;
        GoogleLongrunningOperation response = api.aiplatformProjectsLocationsDatasetsImport(projectsId, locationsId, datasetsId, uploadProtocol, oauthToken, prettyPrint, key, fields, alt, uploadType, accessToken, quotaUser, paramCallback, $xgafv, googleCloudAiplatformV1ImportDataRequest);
        // TODO: test validations
    }

    /**
     * Lists Datasets in a Location.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void aiplatformProjectsLocationsDatasetsListTest() throws ApiException {
        String projectsId = null;
        String locationsId = null;
        String orderBy = null;
        String readMask = null;
        String pageToken = null;
        Integer pageSize = null;
        String filter = null;
        String uploadProtocol = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String key = null;
        String fields = null;
        String alt = null;
        String uploadType = null;
        String accessToken = null;
        String quotaUser = null;
        String paramCallback = null;
        String $xgafv = null;
        GoogleCloudAiplatformV1ListDatasetsResponse response = api.aiplatformProjectsLocationsDatasetsList(projectsId, locationsId, orderBy, readMask, pageToken, pageSize, filter, uploadProtocol, oauthToken, prettyPrint, key, fields, alt, uploadType, accessToken, quotaUser, paramCallback, $xgafv);
        // TODO: test validations
    }

    /**
     * Starts asynchronous cancellation on a long-running operation. The server makes a best effort to cancel the operation, but success is not guaranteed. If the server doesn&#39;t support this method, it returns &#x60;google.rpc.Code.UNIMPLEMENTED&#x60;. Clients can use Operations.GetOperation or other methods to check whether the cancellation succeeded or whether the operation completed despite cancellation. On successful cancellation, the operation is not deleted; instead, it becomes an operation with an Operation.error value with a google.rpc.Status.code of 1, corresponding to &#x60;Code.CANCELLED&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void aiplatformProjectsLocationsDatasetsOperationsCancelTest() throws ApiException {
        String projectsId = null;
        String locationsId = null;
        String datasetsId = null;
        String operationsId = null;
        String uploadProtocol = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String key = null;
        String fields = null;
        String alt = null;
        String uploadType = null;
        String accessToken = null;
        String quotaUser = null;
        String paramCallback = null;
        String $xgafv = null;
        Object response = api.aiplatformProjectsLocationsDatasetsOperationsCancel(projectsId, locationsId, datasetsId, operationsId, uploadProtocol, oauthToken, prettyPrint, key, fields, alt, uploadType, accessToken, quotaUser, paramCallback, $xgafv);
        // TODO: test validations
    }

    /**
     * Deletes a long-running operation. This method indicates that the client is no longer interested in the operation result. It does not cancel the operation. If the server doesn&#39;t support this method, it returns &#x60;google.rpc.Code.UNIMPLEMENTED&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void aiplatformProjectsLocationsDatasetsOperationsDeleteTest() throws ApiException {
        String projectsId = null;
        String locationsId = null;
        String datasetsId = null;
        String operationsId = null;
        String uploadProtocol = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String key = null;
        String fields = null;
        String alt = null;
        String uploadType = null;
        String accessToken = null;
        String quotaUser = null;
        String paramCallback = null;
        String $xgafv = null;
        Object response = api.aiplatformProjectsLocationsDatasetsOperationsDelete(projectsId, locationsId, datasetsId, operationsId, uploadProtocol, oauthToken, prettyPrint, key, fields, alt, uploadType, accessToken, quotaUser, paramCallback, $xgafv);
        // TODO: test validations
    }

    /**
     * Gets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void aiplatformProjectsLocationsDatasetsOperationsGetTest() throws ApiException {
        String projectsId = null;
        String locationsId = null;
        String datasetsId = null;
        String operationsId = null;
        String uploadProtocol = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String key = null;
        String fields = null;
        String alt = null;
        String uploadType = null;
        String accessToken = null;
        String quotaUser = null;
        String paramCallback = null;
        String $xgafv = null;
        GoogleLongrunningOperation response = api.aiplatformProjectsLocationsDatasetsOperationsGet(projectsId, locationsId, datasetsId, operationsId, uploadProtocol, oauthToken, prettyPrint, key, fields, alt, uploadType, accessToken, quotaUser, paramCallback, $xgafv);
        // TODO: test validations
    }

    /**
     * Lists operations that match the specified filter in the request. If the server doesn&#39;t support this method, it returns &#x60;UNIMPLEMENTED&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void aiplatformProjectsLocationsDatasetsOperationsListTest() throws ApiException {
        String projectsId = null;
        String locationsId = null;
        String datasetsId = null;
        String pageToken = null;
        String filter = null;
        Integer pageSize = null;
        String uploadProtocol = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String key = null;
        String fields = null;
        String alt = null;
        String uploadType = null;
        String accessToken = null;
        String quotaUser = null;
        String paramCallback = null;
        String $xgafv = null;
        GoogleLongrunningListOperationsResponse response = api.aiplatformProjectsLocationsDatasetsOperationsList(projectsId, locationsId, datasetsId, pageToken, filter, pageSize, uploadProtocol, oauthToken, prettyPrint, key, fields, alt, uploadType, accessToken, quotaUser, paramCallback, $xgafv);
        // TODO: test validations
    }

    /**
     * Waits until the specified long-running operation is done or reaches at most a specified timeout, returning the latest state. If the operation is already done, the latest state is immediately returned. If the timeout specified is greater than the default HTTP/RPC timeout, the HTTP/RPC timeout is used. If the server does not support this method, it returns &#x60;google.rpc.Code.UNIMPLEMENTED&#x60;. Note that this method is on a best-effort basis. It may return the latest state before the specified timeout (including immediately), meaning even an immediate response is no guarantee that the operation is done.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void aiplatformProjectsLocationsDatasetsOperationsWaitTest() throws ApiException {
        String projectsId = null;
        String locationsId = null;
        String datasetsId = null;
        String operationsId = null;
        String timeout = null;
        String uploadProtocol = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String key = null;
        String fields = null;
        String alt = null;
        String uploadType = null;
        String accessToken = null;
        String quotaUser = null;
        String paramCallback = null;
        String $xgafv = null;
        GoogleLongrunningOperation response = api.aiplatformProjectsLocationsDatasetsOperationsWait(projectsId, locationsId, datasetsId, operationsId, timeout, uploadProtocol, oauthToken, prettyPrint, key, fields, alt, uploadType, accessToken, quotaUser, paramCallback, $xgafv);
        // TODO: test validations
    }

    /**
     * Updates a Dataset.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void aiplatformProjectsLocationsDatasetsPatchTest() throws ApiException {
        String projectsId = null;
        String locationsId = null;
        String datasetsId = null;
        String updateMask = null;
        String uploadProtocol = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String key = null;
        String fields = null;
        String alt = null;
        String uploadType = null;
        String accessToken = null;
        String quotaUser = null;
        String paramCallback = null;
        String $xgafv = null;
        GoogleCloudAiplatformV1Dataset googleCloudAiplatformV1Dataset = null;
        GoogleCloudAiplatformV1Dataset response = api.aiplatformProjectsLocationsDatasetsPatch(projectsId, locationsId, datasetsId, updateMask, uploadProtocol, oauthToken, prettyPrint, key, fields, alt, uploadType, accessToken, quotaUser, paramCallback, $xgafv, googleCloudAiplatformV1Dataset);
        // TODO: test validations
    }

    /**
     * Deletes a SavedQuery.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void aiplatformProjectsLocationsDatasetsSavedQueriesDeleteTest() throws ApiException {
        String projectsId = null;
        String locationsId = null;
        String datasetsId = null;
        String savedQueriesId = null;
        String uploadProtocol = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String key = null;
        String fields = null;
        String alt = null;
        String uploadType = null;
        String accessToken = null;
        String quotaUser = null;
        String paramCallback = null;
        String $xgafv = null;
        GoogleLongrunningOperation response = api.aiplatformProjectsLocationsDatasetsSavedQueriesDelete(projectsId, locationsId, datasetsId, savedQueriesId, uploadProtocol, oauthToken, prettyPrint, key, fields, alt, uploadType, accessToken, quotaUser, paramCallback, $xgafv);
        // TODO: test validations
    }

    /**
     * Lists SavedQueries in a Dataset.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void aiplatformProjectsLocationsDatasetsSavedQueriesListTest() throws ApiException {
        String projectsId = null;
        String locationsId = null;
        String datasetsId = null;
        String filter = null;
        String readMask = null;
        Integer pageSize = null;
        String orderBy = null;
        String pageToken = null;
        String uploadProtocol = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String key = null;
        String fields = null;
        String alt = null;
        String uploadType = null;
        String accessToken = null;
        String quotaUser = null;
        String paramCallback = null;
        String $xgafv = null;
        GoogleCloudAiplatformV1ListSavedQueriesResponse response = api.aiplatformProjectsLocationsDatasetsSavedQueriesList(projectsId, locationsId, datasetsId, filter, readMask, pageSize, orderBy, pageToken, uploadProtocol, oauthToken, prettyPrint, key, fields, alt, uploadType, accessToken, quotaUser, paramCallback, $xgafv);
        // TODO: test validations
    }

    /**
     * Starts asynchronous cancellation on a long-running operation. The server makes a best effort to cancel the operation, but success is not guaranteed. If the server doesn&#39;t support this method, it returns &#x60;google.rpc.Code.UNIMPLEMENTED&#x60;. Clients can use Operations.GetOperation or other methods to check whether the cancellation succeeded or whether the operation completed despite cancellation. On successful cancellation, the operation is not deleted; instead, it becomes an operation with an Operation.error value with a google.rpc.Status.code of 1, corresponding to &#x60;Code.CANCELLED&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void aiplatformProjectsLocationsDatasetsSavedQueriesOperationsCancelTest() throws ApiException {
        String projectsId = null;
        String locationsId = null;
        String datasetsId = null;
        String savedQueriesId = null;
        String operationsId = null;
        String uploadProtocol = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String key = null;
        String fields = null;
        String alt = null;
        String uploadType = null;
        String accessToken = null;
        String quotaUser = null;
        String paramCallback = null;
        String $xgafv = null;
        Object response = api.aiplatformProjectsLocationsDatasetsSavedQueriesOperationsCancel(projectsId, locationsId, datasetsId, savedQueriesId, operationsId, uploadProtocol, oauthToken, prettyPrint, key, fields, alt, uploadType, accessToken, quotaUser, paramCallback, $xgafv);
        // TODO: test validations
    }

    /**
     * Deletes a long-running operation. This method indicates that the client is no longer interested in the operation result. It does not cancel the operation. If the server doesn&#39;t support this method, it returns &#x60;google.rpc.Code.UNIMPLEMENTED&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void aiplatformProjectsLocationsDatasetsSavedQueriesOperationsDeleteTest() throws ApiException {
        String projectsId = null;
        String locationsId = null;
        String datasetsId = null;
        String savedQueriesId = null;
        String operationsId = null;
        String uploadProtocol = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String key = null;
        String fields = null;
        String alt = null;
        String uploadType = null;
        String accessToken = null;
        String quotaUser = null;
        String paramCallback = null;
        String $xgafv = null;
        Object response = api.aiplatformProjectsLocationsDatasetsSavedQueriesOperationsDelete(projectsId, locationsId, datasetsId, savedQueriesId, operationsId, uploadProtocol, oauthToken, prettyPrint, key, fields, alt, uploadType, accessToken, quotaUser, paramCallback, $xgafv);
        // TODO: test validations
    }

    /**
     * Gets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void aiplatformProjectsLocationsDatasetsSavedQueriesOperationsGetTest() throws ApiException {
        String projectsId = null;
        String locationsId = null;
        String datasetsId = null;
        String savedQueriesId = null;
        String operationsId = null;
        String uploadProtocol = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String key = null;
        String fields = null;
        String alt = null;
        String uploadType = null;
        String accessToken = null;
        String quotaUser = null;
        String paramCallback = null;
        String $xgafv = null;
        GoogleLongrunningOperation response = api.aiplatformProjectsLocationsDatasetsSavedQueriesOperationsGet(projectsId, locationsId, datasetsId, savedQueriesId, operationsId, uploadProtocol, oauthToken, prettyPrint, key, fields, alt, uploadType, accessToken, quotaUser, paramCallback, $xgafv);
        // TODO: test validations
    }

    /**
     * Lists operations that match the specified filter in the request. If the server doesn&#39;t support this method, it returns &#x60;UNIMPLEMENTED&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void aiplatformProjectsLocationsDatasetsSavedQueriesOperationsListTest() throws ApiException {
        String projectsId = null;
        String locationsId = null;
        String datasetsId = null;
        String savedQueriesId = null;
        String filter = null;
        Integer pageSize = null;
        String pageToken = null;
        String uploadProtocol = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String key = null;
        String fields = null;
        String alt = null;
        String uploadType = null;
        String accessToken = null;
        String quotaUser = null;
        String paramCallback = null;
        String $xgafv = null;
        GoogleLongrunningListOperationsResponse response = api.aiplatformProjectsLocationsDatasetsSavedQueriesOperationsList(projectsId, locationsId, datasetsId, savedQueriesId, filter, pageSize, pageToken, uploadProtocol, oauthToken, prettyPrint, key, fields, alt, uploadType, accessToken, quotaUser, paramCallback, $xgafv);
        // TODO: test validations
    }

    /**
     * Waits until the specified long-running operation is done or reaches at most a specified timeout, returning the latest state. If the operation is already done, the latest state is immediately returned. If the timeout specified is greater than the default HTTP/RPC timeout, the HTTP/RPC timeout is used. If the server does not support this method, it returns &#x60;google.rpc.Code.UNIMPLEMENTED&#x60;. Note that this method is on a best-effort basis. It may return the latest state before the specified timeout (including immediately), meaning even an immediate response is no guarantee that the operation is done.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void aiplatformProjectsLocationsDatasetsSavedQueriesOperationsWaitTest() throws ApiException {
        String projectsId = null;
        String locationsId = null;
        String datasetsId = null;
        String savedQueriesId = null;
        String operationsId = null;
        String timeout = null;
        String uploadProtocol = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String key = null;
        String fields = null;
        String alt = null;
        String uploadType = null;
        String accessToken = null;
        String quotaUser = null;
        String paramCallback = null;
        String $xgafv = null;
        GoogleLongrunningOperation response = api.aiplatformProjectsLocationsDatasetsSavedQueriesOperationsWait(projectsId, locationsId, datasetsId, savedQueriesId, operationsId, timeout, uploadProtocol, oauthToken, prettyPrint, key, fields, alt, uploadType, accessToken, quotaUser, paramCallback, $xgafv);
        // TODO: test validations
    }

    /**
     * Searches DataItems in a Dataset.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void aiplatformProjectsLocationsDatasetsSearchDataItemsTest() throws ApiException {
        String projectsId = null;
        String locationsId = null;
        String datasetsId = null;
        String fieldMask = null;
        String savedQuery = null;
        String dataItemFilter = null;
        String dataLabelingJob = null;
        Integer pageSize = null;
        String orderByAnnotationSavedQuery = null;
        Integer annotationsLimit = null;
        String orderByDataItem = null;
        String pageToken = null;
        String orderByAnnotationOrderBy = null;
        String annotationFilters = null;
        String annotationsFilter = null;
        String orderBy = null;
        String uploadProtocol = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String key = null;
        String fields = null;
        String alt = null;
        String uploadType = null;
        String accessToken = null;
        String quotaUser = null;
        String paramCallback = null;
        String $xgafv = null;
        GoogleCloudAiplatformV1SearchDataItemsResponse response = api.aiplatformProjectsLocationsDatasetsSearchDataItems(projectsId, locationsId, datasetsId, fieldMask, savedQuery, dataItemFilter, dataLabelingJob, pageSize, orderByAnnotationSavedQuery, annotationsLimit, orderByDataItem, pageToken, orderByAnnotationOrderBy, annotationFilters, annotationsFilter, orderBy, uploadProtocol, oauthToken, prettyPrint, key, fields, alt, uploadType, accessToken, quotaUser, paramCallback, $xgafv);
        // TODO: test validations
    }

    /**
     * Create a DeploymentResourcePool.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void aiplatformProjectsLocationsDeploymentResourcePoolsCreateTest() throws ApiException {
        String projectsId = null;
        String locationsId = null;
        String uploadProtocol = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String key = null;
        String fields = null;
        String alt = null;
        String uploadType = null;
        String accessToken = null;
        String quotaUser = null;
        String paramCallback = null;
        String $xgafv = null;
        GoogleCloudAiplatformV1CreateDeploymentResourcePoolRequest googleCloudAiplatformV1CreateDeploymentResourcePoolRequest = null;
        GoogleLongrunningOperation response = api.aiplatformProjectsLocationsDeploymentResourcePoolsCreate(projectsId, locationsId, uploadProtocol, oauthToken, prettyPrint, key, fields, alt, uploadType, accessToken, quotaUser, paramCallback, $xgafv, googleCloudAiplatformV1CreateDeploymentResourcePoolRequest);
        // TODO: test validations
    }

    /**
     * Delete a DeploymentResourcePool.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void aiplatformProjectsLocationsDeploymentResourcePoolsDeleteTest() throws ApiException {
        String projectsId = null;
        String locationsId = null;
        String deploymentResourcePoolsId = null;
        String uploadProtocol = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String key = null;
        String fields = null;
        String alt = null;
        String uploadType = null;
        String accessToken = null;
        String quotaUser = null;
        String paramCallback = null;
        String $xgafv = null;
        GoogleLongrunningOperation response = api.aiplatformProjectsLocationsDeploymentResourcePoolsDelete(projectsId, locationsId, deploymentResourcePoolsId, uploadProtocol, oauthToken, prettyPrint, key, fields, alt, uploadType, accessToken, quotaUser, paramCallback, $xgafv);
        // TODO: test validations
    }

    /**
     * Get a DeploymentResourcePool.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void aiplatformProjectsLocationsDeploymentResourcePoolsGetTest() throws ApiException {
        String projectsId = null;
        String locationsId = null;
        String deploymentResourcePoolsId = null;
        String uploadProtocol = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String key = null;
        String fields = null;
        String alt = null;
        String uploadType = null;
        String accessToken = null;
        String quotaUser = null;
        String paramCallback = null;
        String $xgafv = null;
        GoogleCloudAiplatformV1DeploymentResourcePool response = api.aiplatformProjectsLocationsDeploymentResourcePoolsGet(projectsId, locationsId, deploymentResourcePoolsId, uploadProtocol, oauthToken, prettyPrint, key, fields, alt, uploadType, accessToken, quotaUser, paramCallback, $xgafv);
        // TODO: test validations
    }

    /**
     * List DeploymentResourcePools in a location.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void aiplatformProjectsLocationsDeploymentResourcePoolsListTest() throws ApiException {
        String projectsId = null;
        String locationsId = null;
        Integer pageSize = null;
        String pageToken = null;
        String uploadProtocol = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String key = null;
        String fields = null;
        String alt = null;
        String uploadType = null;
        String accessToken = null;
        String quotaUser = null;
        String paramCallback = null;
        String $xgafv = null;
        GoogleCloudAiplatformV1ListDeploymentResourcePoolsResponse response = api.aiplatformProjectsLocationsDeploymentResourcePoolsList(projectsId, locationsId, pageSize, pageToken, uploadProtocol, oauthToken, prettyPrint, key, fields, alt, uploadType, accessToken, quotaUser, paramCallback, $xgafv);
        // TODO: test validations
    }

    /**
     * Starts asynchronous cancellation on a long-running operation. The server makes a best effort to cancel the operation, but success is not guaranteed. If the server doesn&#39;t support this method, it returns &#x60;google.rpc.Code.UNIMPLEMENTED&#x60;. Clients can use Operations.GetOperation or other methods to check whether the cancellation succeeded or whether the operation completed despite cancellation. On successful cancellation, the operation is not deleted; instead, it becomes an operation with an Operation.error value with a google.rpc.Status.code of 1, corresponding to &#x60;Code.CANCELLED&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void aiplatformProjectsLocationsDeploymentResourcePoolsOperationsCancelTest() throws ApiException {
        String projectsId = null;
        String locationsId = null;
        String deploymentResourcePoolsId = null;
        String operationsId = null;
        String uploadProtocol = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String key = null;
        String fields = null;
        String alt = null;
        String uploadType = null;
        String accessToken = null;
        String quotaUser = null;
        String paramCallback = null;
        String $xgafv = null;
        Object response = api.aiplatformProjectsLocationsDeploymentResourcePoolsOperationsCancel(projectsId, locationsId, deploymentResourcePoolsId, operationsId, uploadProtocol, oauthToken, prettyPrint, key, fields, alt, uploadType, accessToken, quotaUser, paramCallback, $xgafv);
        // TODO: test validations
    }

    /**
     * Deletes a long-running operation. This method indicates that the client is no longer interested in the operation result. It does not cancel the operation. If the server doesn&#39;t support this method, it returns &#x60;google.rpc.Code.UNIMPLEMENTED&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void aiplatformProjectsLocationsDeploymentResourcePoolsOperationsDeleteTest() throws ApiException {
        String projectsId = null;
        String locationsId = null;
        String deploymentResourcePoolsId = null;
        String operationsId = null;
        String uploadProtocol = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String key = null;
        String fields = null;
        String alt = null;
        String uploadType = null;
        String accessToken = null;
        String quotaUser = null;
        String paramCallback = null;
        String $xgafv = null;
        Object response = api.aiplatformProjectsLocationsDeploymentResourcePoolsOperationsDelete(projectsId, locationsId, deploymentResourcePoolsId, operationsId, uploadProtocol, oauthToken, prettyPrint, key, fields, alt, uploadType, accessToken, quotaUser, paramCallback, $xgafv);
        // TODO: test validations
    }

    /**
     * Gets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void aiplatformProjectsLocationsDeploymentResourcePoolsOperationsGetTest() throws ApiException {
        String projectsId = null;
        String locationsId = null;
        String deploymentResourcePoolsId = null;
        String operationsId = null;
        String uploadProtocol = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String key = null;
        String fields = null;
        String alt = null;
        String uploadType = null;
        String accessToken = null;
        String quotaUser = null;
        String paramCallback = null;
        String $xgafv = null;
        GoogleLongrunningOperation response = api.aiplatformProjectsLocationsDeploymentResourcePoolsOperationsGet(projectsId, locationsId, deploymentResourcePoolsId, operationsId, uploadProtocol, oauthToken, prettyPrint, key, fields, alt, uploadType, accessToken, quotaUser, paramCallback, $xgafv);
        // TODO: test validations
    }

    /**
     * Lists operations that match the specified filter in the request. If the server doesn&#39;t support this method, it returns &#x60;UNIMPLEMENTED&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void aiplatformProjectsLocationsDeploymentResourcePoolsOperationsListTest() throws ApiException {
        String projectsId = null;
        String locationsId = null;
        String deploymentResourcePoolsId = null;
        String pageToken = null;
        String filter = null;
        Integer pageSize = null;
        String uploadProtocol = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String key = null;
        String fields = null;
        String alt = null;
        String uploadType = null;
        String accessToken = null;
        String quotaUser = null;
        String paramCallback = null;
        String $xgafv = null;
        GoogleLongrunningListOperationsResponse response = api.aiplatformProjectsLocationsDeploymentResourcePoolsOperationsList(projectsId, locationsId, deploymentResourcePoolsId, pageToken, filter, pageSize, uploadProtocol, oauthToken, prettyPrint, key, fields, alt, uploadType, accessToken, quotaUser, paramCallback, $xgafv);
        // TODO: test validations
    }

    /**
     * Waits until the specified long-running operation is done or reaches at most a specified timeout, returning the latest state. If the operation is already done, the latest state is immediately returned. If the timeout specified is greater than the default HTTP/RPC timeout, the HTTP/RPC timeout is used. If the server does not support this method, it returns &#x60;google.rpc.Code.UNIMPLEMENTED&#x60;. Note that this method is on a best-effort basis. It may return the latest state before the specified timeout (including immediately), meaning even an immediate response is no guarantee that the operation is done.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void aiplatformProjectsLocationsDeploymentResourcePoolsOperationsWaitTest() throws ApiException {
        String projectsId = null;
        String locationsId = null;
        String deploymentResourcePoolsId = null;
        String operationsId = null;
        String timeout = null;
        String uploadProtocol = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String key = null;
        String fields = null;
        String alt = null;
        String uploadType = null;
        String accessToken = null;
        String quotaUser = null;
        String paramCallback = null;
        String $xgafv = null;
        GoogleLongrunningOperation response = api.aiplatformProjectsLocationsDeploymentResourcePoolsOperationsWait(projectsId, locationsId, deploymentResourcePoolsId, operationsId, timeout, uploadProtocol, oauthToken, prettyPrint, key, fields, alt, uploadType, accessToken, quotaUser, paramCallback, $xgafv);
        // TODO: test validations
    }

    /**
     * Update a DeploymentResourcePool.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void aiplatformProjectsLocationsDeploymentResourcePoolsPatchTest() throws ApiException {
        String projectsId = null;
        String locationsId = null;
        String deploymentResourcePoolsId = null;
        String updateMask = null;
        String uploadProtocol = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String key = null;
        String fields = null;
        String alt = null;
        String uploadType = null;
        String accessToken = null;
        String quotaUser = null;
        String paramCallback = null;
        String $xgafv = null;
        GoogleCloudAiplatformV1DeploymentResourcePool googleCloudAiplatformV1DeploymentResourcePool = null;
        GoogleLongrunningOperation response = api.aiplatformProjectsLocationsDeploymentResourcePoolsPatch(projectsId, locationsId, deploymentResourcePoolsId, updateMask, uploadProtocol, oauthToken, prettyPrint, key, fields, alt, uploadType, accessToken, quotaUser, paramCallback, $xgafv, googleCloudAiplatformV1DeploymentResourcePool);
        // TODO: test validations
    }

    /**
     * List DeployedModels that have been deployed on this DeploymentResourcePool.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void aiplatformProjectsLocationsDeploymentResourcePoolsQueryDeployedModelsTest() throws ApiException {
        String projectsId = null;
        String locationsId = null;
        String deploymentResourcePoolsId = null;
        String pageToken = null;
        Integer pageSize = null;
        String uploadProtocol = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String key = null;
        String fields = null;
        String alt = null;
        String uploadType = null;
        String accessToken = null;
        String quotaUser = null;
        String paramCallback = null;
        String $xgafv = null;
        GoogleCloudAiplatformV1QueryDeployedModelsResponse response = api.aiplatformProjectsLocationsDeploymentResourcePoolsQueryDeployedModels(projectsId, locationsId, deploymentResourcePoolsId, pageToken, pageSize, uploadProtocol, oauthToken, prettyPrint, key, fields, alt, uploadType, accessToken, quotaUser, paramCallback, $xgafv);
        // TODO: test validations
    }

    /**
     * Return a list of tokens based on the input text.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void aiplatformProjectsLocationsEndpointsComputeTokensTest() throws ApiException {
        String projectsId = null;
        String locationsId = null;
        String endpointsId = null;
        String uploadProtocol = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String key = null;
        String fields = null;
        String alt = null;
        String uploadType = null;
        String accessToken = null;
        String quotaUser = null;
        String paramCallback = null;
        String $xgafv = null;
        GoogleCloudAiplatformV1ComputeTokensRequest googleCloudAiplatformV1ComputeTokensRequest = null;
        GoogleCloudAiplatformV1ComputeTokensResponse response = api.aiplatformProjectsLocationsEndpointsComputeTokens(projectsId, locationsId, endpointsId, uploadProtocol, oauthToken, prettyPrint, key, fields, alt, uploadType, accessToken, quotaUser, paramCallback, $xgafv, googleCloudAiplatformV1ComputeTokensRequest);
        // TODO: test validations
    }

    /**
     * Perform a token counting.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void aiplatformProjectsLocationsEndpointsCountTokensTest() throws ApiException {
        String projectsId = null;
        String locationsId = null;
        String endpointsId = null;
        String uploadProtocol = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String key = null;
        String fields = null;
        String alt = null;
        String uploadType = null;
        String accessToken = null;
        String quotaUser = null;
        String paramCallback = null;
        String $xgafv = null;
        GoogleCloudAiplatformV1CountTokensRequest googleCloudAiplatformV1CountTokensRequest = null;
        GoogleCloudAiplatformV1CountTokensResponse response = api.aiplatformProjectsLocationsEndpointsCountTokens(projectsId, locationsId, endpointsId, uploadProtocol, oauthToken, prettyPrint, key, fields, alt, uploadType, accessToken, quotaUser, paramCallback, $xgafv, googleCloudAiplatformV1CountTokensRequest);
        // TODO: test validations
    }

    /**
     * Creates an Endpoint.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void aiplatformProjectsLocationsEndpointsCreateTest() throws ApiException {
        String projectsId = null;
        String locationsId = null;
        String endpointId = null;
        String uploadProtocol = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String key = null;
        String fields = null;
        String alt = null;
        String uploadType = null;
        String accessToken = null;
        String quotaUser = null;
        String paramCallback = null;
        String $xgafv = null;
        GoogleCloudAiplatformV1Endpoint googleCloudAiplatformV1Endpoint = null;
        GoogleLongrunningOperation response = api.aiplatformProjectsLocationsEndpointsCreate(projectsId, locationsId, endpointId, uploadProtocol, oauthToken, prettyPrint, key, fields, alt, uploadType, accessToken, quotaUser, paramCallback, $xgafv, googleCloudAiplatformV1Endpoint);
        // TODO: test validations
    }

    /**
     * Deletes an Endpoint.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void aiplatformProjectsLocationsEndpointsDeleteTest() throws ApiException {
        String projectsId = null;
        String locationsId = null;
        String endpointsId = null;
        String uploadProtocol = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String key = null;
        String fields = null;
        String alt = null;
        String uploadType = null;
        String accessToken = null;
        String quotaUser = null;
        String paramCallback = null;
        String $xgafv = null;
        GoogleLongrunningOperation response = api.aiplatformProjectsLocationsEndpointsDelete(projectsId, locationsId, endpointsId, uploadProtocol, oauthToken, prettyPrint, key, fields, alt, uploadType, accessToken, quotaUser, paramCallback, $xgafv);
        // TODO: test validations
    }

    /**
     * Deploys a Model into this Endpoint, creating a DeployedModel within it.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void aiplatformProjectsLocationsEndpointsDeployModelTest() throws ApiException {
        String projectsId = null;
        String locationsId = null;
        String endpointsId = null;
        String uploadProtocol = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String key = null;
        String fields = null;
        String alt = null;
        String uploadType = null;
        String accessToken = null;
        String quotaUser = null;
        String paramCallback = null;
        String $xgafv = null;
        GoogleCloudAiplatformV1DeployModelRequest googleCloudAiplatformV1DeployModelRequest = null;
        GoogleLongrunningOperation response = api.aiplatformProjectsLocationsEndpointsDeployModel(projectsId, locationsId, endpointsId, uploadProtocol, oauthToken, prettyPrint, key, fields, alt, uploadType, accessToken, quotaUser, paramCallback, $xgafv, googleCloudAiplatformV1DeployModelRequest);
        // TODO: test validations
    }

    /**
     * Perform an unary online prediction request to a gRPC model server for Vertex first-party products and frameworks.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void aiplatformProjectsLocationsEndpointsDirectPredictTest() throws ApiException {
        String projectsId = null;
        String locationsId = null;
        String endpointsId = null;
        String uploadProtocol = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String key = null;
        String fields = null;
        String alt = null;
        String uploadType = null;
        String accessToken = null;
        String quotaUser = null;
        String paramCallback = null;
        String $xgafv = null;
        GoogleCloudAiplatformV1DirectPredictRequest googleCloudAiplatformV1DirectPredictRequest = null;
        GoogleCloudAiplatformV1DirectPredictResponse response = api.aiplatformProjectsLocationsEndpointsDirectPredict(projectsId, locationsId, endpointsId, uploadProtocol, oauthToken, prettyPrint, key, fields, alt, uploadType, accessToken, quotaUser, paramCallback, $xgafv, googleCloudAiplatformV1DirectPredictRequest);
        // TODO: test validations
    }

    /**
     * Perform an unary online prediction request to a gRPC model server for custom containers.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void aiplatformProjectsLocationsEndpointsDirectRawPredictTest() throws ApiException {
        String projectsId = null;
        String locationsId = null;
        String endpointsId = null;
        String uploadProtocol = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String key = null;
        String fields = null;
        String alt = null;
        String uploadType = null;
        String accessToken = null;
        String quotaUser = null;
        String paramCallback = null;
        String $xgafv = null;
        GoogleCloudAiplatformV1DirectRawPredictRequest googleCloudAiplatformV1DirectRawPredictRequest = null;
        GoogleCloudAiplatformV1DirectRawPredictResponse response = api.aiplatformProjectsLocationsEndpointsDirectRawPredict(projectsId, locationsId, endpointsId, uploadProtocol, oauthToken, prettyPrint, key, fields, alt, uploadType, accessToken, quotaUser, paramCallback, $xgafv, googleCloudAiplatformV1DirectRawPredictRequest);
        // TODO: test validations
    }

    /**
     * Perform an online explanation. If deployed_model_id is specified, the corresponding DeployModel must have explanation_spec populated. If deployed_model_id is not specified, all DeployedModels must have explanation_spec populated.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void aiplatformProjectsLocationsEndpointsExplainTest() throws ApiException {
        String projectsId = null;
        String locationsId = null;
        String endpointsId = null;
        String uploadProtocol = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String key = null;
        String fields = null;
        String alt = null;
        String uploadType = null;
        String accessToken = null;
        String quotaUser = null;
        String paramCallback = null;
        String $xgafv = null;
        GoogleCloudAiplatformV1ExplainRequest googleCloudAiplatformV1ExplainRequest = null;
        GoogleCloudAiplatformV1ExplainResponse response = api.aiplatformProjectsLocationsEndpointsExplain(projectsId, locationsId, endpointsId, uploadProtocol, oauthToken, prettyPrint, key, fields, alt, uploadType, accessToken, quotaUser, paramCallback, $xgafv, googleCloudAiplatformV1ExplainRequest);
        // TODO: test validations
    }

    /**
     * Generate content with multimodal inputs.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void aiplatformProjectsLocationsEndpointsGenerateContentTest() throws ApiException {
        String projectsId = null;
        String locationsId = null;
        String endpointsId = null;
        String uploadProtocol = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String key = null;
        String fields = null;
        String alt = null;
        String uploadType = null;
        String accessToken = null;
        String quotaUser = null;
        String paramCallback = null;
        String $xgafv = null;
        GoogleCloudAiplatformV1GenerateContentRequest googleCloudAiplatformV1GenerateContentRequest = null;
        GoogleCloudAiplatformV1GenerateContentResponse response = api.aiplatformProjectsLocationsEndpointsGenerateContent(projectsId, locationsId, endpointsId, uploadProtocol, oauthToken, prettyPrint, key, fields, alt, uploadType, accessToken, quotaUser, paramCallback, $xgafv, googleCloudAiplatformV1GenerateContentRequest);
        // TODO: test validations
    }

    /**
     * Gets an Endpoint.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void aiplatformProjectsLocationsEndpointsGetTest() throws ApiException {
        String projectsId = null;
        String locationsId = null;
        String endpointsId = null;
        String uploadProtocol = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String key = null;
        String fields = null;
        String alt = null;
        String uploadType = null;
        String accessToken = null;
        String quotaUser = null;
        String paramCallback = null;
        String $xgafv = null;
        GoogleCloudAiplatformV1Endpoint response = api.aiplatformProjectsLocationsEndpointsGet(projectsId, locationsId, endpointsId, uploadProtocol, oauthToken, prettyPrint, key, fields, alt, uploadType, accessToken, quotaUser, paramCallback, $xgafv);
        // TODO: test validations
    }

    /**
     * Lists Endpoints in a Location.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void aiplatformProjectsLocationsEndpointsListTest() throws ApiException {
        String projectsId = null;
        String locationsId = null;
        String orderBy = null;
        String filter = null;
        String pageToken = null;
        String readMask = null;
        Integer pageSize = null;
        String uploadProtocol = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String key = null;
        String fields = null;
        String alt = null;
        String uploadType = null;
        String accessToken = null;
        String quotaUser = null;
        String paramCallback = null;
        String $xgafv = null;
        GoogleCloudAiplatformV1ListEndpointsResponse response = api.aiplatformProjectsLocationsEndpointsList(projectsId, locationsId, orderBy, filter, pageToken, readMask, pageSize, uploadProtocol, oauthToken, prettyPrint, key, fields, alt, uploadType, accessToken, quotaUser, paramCallback, $xgafv);
        // TODO: test validations
    }

    /**
     * Updates an existing deployed model. Updatable fields include &#x60;min_replica_count&#x60;, &#x60;max_replica_count&#x60;, &#x60;autoscaling_metric_specs&#x60;, &#x60;disable_container_logging&#x60; (v1 only), and &#x60;enable_container_logging&#x60; (v1beta1 only).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void aiplatformProjectsLocationsEndpointsMutateDeployedModelTest() throws ApiException {
        String projectsId = null;
        String locationsId = null;
        String endpointsId = null;
        String uploadProtocol = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String key = null;
        String fields = null;
        String alt = null;
        String uploadType = null;
        String accessToken = null;
        String quotaUser = null;
        String paramCallback = null;
        String $xgafv = null;
        GoogleCloudAiplatformV1MutateDeployedModelRequest googleCloudAiplatformV1MutateDeployedModelRequest = null;
        GoogleLongrunningOperation response = api.aiplatformProjectsLocationsEndpointsMutateDeployedModel(projectsId, locationsId, endpointsId, uploadProtocol, oauthToken, prettyPrint, key, fields, alt, uploadType, accessToken, quotaUser, paramCallback, $xgafv, googleCloudAiplatformV1MutateDeployedModelRequest);
        // TODO: test validations
    }

    /**
     * Starts asynchronous cancellation on a long-running operation. The server makes a best effort to cancel the operation, but success is not guaranteed. If the server doesn&#39;t support this method, it returns &#x60;google.rpc.Code.UNIMPLEMENTED&#x60;. Clients can use Operations.GetOperation or other methods to check whether the cancellation succeeded or whether the operation completed despite cancellation. On successful cancellation, the operation is not deleted; instead, it becomes an operation with an Operation.error value with a google.rpc.Status.code of 1, corresponding to &#x60;Code.CANCELLED&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void aiplatformProjectsLocationsEndpointsOperationsCancelTest() throws ApiException {
        String projectsId = null;
        String locationsId = null;
        String endpointsId = null;
        String operationsId = null;
        String uploadProtocol = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String key = null;
        String fields = null;
        String alt = null;
        String uploadType = null;
        String accessToken = null;
        String quotaUser = null;
        String paramCallback = null;
        String $xgafv = null;
        Object response = api.aiplatformProjectsLocationsEndpointsOperationsCancel(projectsId, locationsId, endpointsId, operationsId, uploadProtocol, oauthToken, prettyPrint, key, fields, alt, uploadType, accessToken, quotaUser, paramCallback, $xgafv);
        // TODO: test validations
    }

    /**
     * Deletes a long-running operation. This method indicates that the client is no longer interested in the operation result. It does not cancel the operation. If the server doesn&#39;t support this method, it returns &#x60;google.rpc.Code.UNIMPLEMENTED&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void aiplatformProjectsLocationsEndpointsOperationsDeleteTest() throws ApiException {
        String projectsId = null;
        String locationsId = null;
        String endpointsId = null;
        String operationsId = null;
        String uploadProtocol = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String key = null;
        String fields = null;
        String alt = null;
        String uploadType = null;
        String accessToken = null;
        String quotaUser = null;
        String paramCallback = null;
        String $xgafv = null;
        Object response = api.aiplatformProjectsLocationsEndpointsOperationsDelete(projectsId, locationsId, endpointsId, operationsId, uploadProtocol, oauthToken, prettyPrint, key, fields, alt, uploadType, accessToken, quotaUser, paramCallback, $xgafv);
        // TODO: test validations
    }

    /**
     * Gets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void aiplatformProjectsLocationsEndpointsOperationsGetTest() throws ApiException {
        String projectsId = null;
        String locationsId = null;
        String endpointsId = null;
        String operationsId = null;
        String uploadProtocol = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String key = null;
        String fields = null;
        String alt = null;
        String uploadType = null;
        String accessToken = null;
        String quotaUser = null;
        String paramCallback = null;
        String $xgafv = null;
        GoogleLongrunningOperation response = api.aiplatformProjectsLocationsEndpointsOperationsGet(projectsId, locationsId, endpointsId, operationsId, uploadProtocol, oauthToken, prettyPrint, key, fields, alt, uploadType, accessToken, quotaUser, paramCallback, $xgafv);
        // TODO: test validations
    }

    /**
     * Lists operations that match the specified filter in the request. If the server doesn&#39;t support this method, it returns &#x60;UNIMPLEMENTED&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void aiplatformProjectsLocationsEndpointsOperationsListTest() throws ApiException {
        String projectsId = null;
        String locationsId = null;
        String endpointsId = null;
        String filter = null;
        String pageToken = null;
        Integer pageSize = null;
        String uploadProtocol = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String key = null;
        String fields = null;
        String alt = null;
        String uploadType = null;
        String accessToken = null;
        String quotaUser = null;
        String paramCallback = null;
        String $xgafv = null;
        GoogleLongrunningListOperationsResponse response = api.aiplatformProjectsLocationsEndpointsOperationsList(projectsId, locationsId, endpointsId, filter, pageToken, pageSize, uploadProtocol, oauthToken, prettyPrint, key, fields, alt, uploadType, accessToken, quotaUser, paramCallback, $xgafv);
        // TODO: test validations
    }

    /**
     * Waits until the specified long-running operation is done or reaches at most a specified timeout, returning the latest state. If the operation is already done, the latest state is immediately returned. If the timeout specified is greater than the default HTTP/RPC timeout, the HTTP/RPC timeout is used. If the server does not support this method, it returns &#x60;google.rpc.Code.UNIMPLEMENTED&#x60;. Note that this method is on a best-effort basis. It may return the latest state before the specified timeout (including immediately), meaning even an immediate response is no guarantee that the operation is done.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void aiplatformProjectsLocationsEndpointsOperationsWaitTest() throws ApiException {
        String projectsId = null;
        String locationsId = null;
        String endpointsId = null;
        String operationsId = null;
        String timeout = null;
        String uploadProtocol = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String key = null;
        String fields = null;
        String alt = null;
        String uploadType = null;
        String accessToken = null;
        String quotaUser = null;
        String paramCallback = null;
        String $xgafv = null;
        GoogleLongrunningOperation response = api.aiplatformProjectsLocationsEndpointsOperationsWait(projectsId, locationsId, endpointsId, operationsId, timeout, uploadProtocol, oauthToken, prettyPrint, key, fields, alt, uploadType, accessToken, quotaUser, paramCallback, $xgafv);
        // TODO: test validations
    }

    /**
     * Updates an Endpoint.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void aiplatformProjectsLocationsEndpointsPatchTest() throws ApiException {
        String projectsId = null;
        String locationsId = null;
        String endpointsId = null;
        String updateMask = null;
        String uploadProtocol = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String key = null;
        String fields = null;
        String alt = null;
        String uploadType = null;
        String accessToken = null;
        String quotaUser = null;
        String paramCallback = null;
        String $xgafv = null;
        GoogleCloudAiplatformV1Endpoint googleCloudAiplatformV1Endpoint = null;
        GoogleCloudAiplatformV1Endpoint response = api.aiplatformProjectsLocationsEndpointsPatch(projectsId, locationsId, endpointsId, updateMask, uploadProtocol, oauthToken, prettyPrint, key, fields, alt, uploadType, accessToken, quotaUser, paramCallback, $xgafv, googleCloudAiplatformV1Endpoint);
        // TODO: test validations
    }

    /**
     * Perform an online prediction.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void aiplatformProjectsLocationsEndpointsPredictTest() throws ApiException {
        String projectsId = null;
        String locationsId = null;
        String endpointsId = null;
        String uploadProtocol = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String key = null;
        String fields = null;
        String alt = null;
        String uploadType = null;
        String accessToken = null;
        String quotaUser = null;
        String paramCallback = null;
        String $xgafv = null;
        GoogleCloudAiplatformV1PredictRequest googleCloudAiplatformV1PredictRequest = null;
        GoogleCloudAiplatformV1PredictResponse response = api.aiplatformProjectsLocationsEndpointsPredict(projectsId, locationsId, endpointsId, uploadProtocol, oauthToken, prettyPrint, key, fields, alt, uploadType, accessToken, quotaUser, paramCallback, $xgafv, googleCloudAiplatformV1PredictRequest);
        // TODO: test validations
    }

    /**
     * Perform an online prediction with an arbitrary HTTP payload. The response includes the following HTTP headers: * &#x60;X-Vertex-AI-Endpoint-Id&#x60;: ID of the Endpoint that served this prediction. * &#x60;X-Vertex-AI-Deployed-Model-Id&#x60;: ID of the Endpoint&#39;s DeployedModel that served this prediction.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void aiplatformProjectsLocationsEndpointsRawPredictTest() throws ApiException {
        String projectsId = null;
        String locationsId = null;
        String endpointsId = null;
        String uploadProtocol = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String key = null;
        String fields = null;
        String alt = null;
        String uploadType = null;
        String accessToken = null;
        String quotaUser = null;
        String paramCallback = null;
        String $xgafv = null;
        GoogleCloudAiplatformV1RawPredictRequest googleCloudAiplatformV1RawPredictRequest = null;
        GoogleApiHttpBody response = api.aiplatformProjectsLocationsEndpointsRawPredict(projectsId, locationsId, endpointsId, uploadProtocol, oauthToken, prettyPrint, key, fields, alt, uploadType, accessToken, quotaUser, paramCallback, $xgafv, googleCloudAiplatformV1RawPredictRequest);
        // TODO: test validations
    }

    /**
     * Perform a server-side streaming online prediction request for Vertex LLM streaming.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void aiplatformProjectsLocationsEndpointsServerStreamingPredictTest() throws ApiException {
        String projectsId = null;
        String locationsId = null;
        String endpointsId = null;
        String uploadProtocol = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String key = null;
        String fields = null;
        String alt = null;
        String uploadType = null;
        String accessToken = null;
        String quotaUser = null;
        String paramCallback = null;
        String $xgafv = null;
        GoogleCloudAiplatformV1StreamingPredictRequest googleCloudAiplatformV1StreamingPredictRequest = null;
        GoogleCloudAiplatformV1StreamingPredictResponse response = api.aiplatformProjectsLocationsEndpointsServerStreamingPredict(projectsId, locationsId, endpointsId, uploadProtocol, oauthToken, prettyPrint, key, fields, alt, uploadType, accessToken, quotaUser, paramCallback, $xgafv, googleCloudAiplatformV1StreamingPredictRequest);
        // TODO: test validations
    }

    /**
     * Generate content with multimodal inputs with streaming support.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void aiplatformProjectsLocationsEndpointsStreamGenerateContentTest() throws ApiException {
        String projectsId = null;
        String locationsId = null;
        String endpointsId = null;
        String uploadProtocol = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String key = null;
        String fields = null;
        String alt = null;
        String uploadType = null;
        String accessToken = null;
        String quotaUser = null;
        String paramCallback = null;
        String $xgafv = null;
        GoogleCloudAiplatformV1GenerateContentRequest googleCloudAiplatformV1GenerateContentRequest = null;
        GoogleCloudAiplatformV1GenerateContentResponse response = api.aiplatformProjectsLocationsEndpointsStreamGenerateContent(projectsId, locationsId, endpointsId, uploadProtocol, oauthToken, prettyPrint, key, fields, alt, uploadType, accessToken, quotaUser, paramCallback, $xgafv, googleCloudAiplatformV1GenerateContentRequest);
        // TODO: test validations
    }

    /**
     * Perform a streaming online prediction with an arbitrary HTTP payload.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void aiplatformProjectsLocationsEndpointsStreamRawPredictTest() throws ApiException {
        String projectsId = null;
        String locationsId = null;
        String endpointsId = null;
        String uploadProtocol = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String key = null;
        String fields = null;
        String alt = null;
        String uploadType = null;
        String accessToken = null;
        String quotaUser = null;
        String paramCallback = null;
        String $xgafv = null;
        GoogleCloudAiplatformV1StreamRawPredictRequest googleCloudAiplatformV1StreamRawPredictRequest = null;
        GoogleApiHttpBody response = api.aiplatformProjectsLocationsEndpointsStreamRawPredict(projectsId, locationsId, endpointsId, uploadProtocol, oauthToken, prettyPrint, key, fields, alt, uploadType, accessToken, quotaUser, paramCallback, $xgafv, googleCloudAiplatformV1StreamRawPredictRequest);
        // TODO: test validations
    }

    /**
     * Undeploys a Model from an Endpoint, removing a DeployedModel from it, and freeing all resources it&#39;s using.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void aiplatformProjectsLocationsEndpointsUndeployModelTest() throws ApiException {
        String projectsId = null;
        String locationsId = null;
        String endpointsId = null;
        String uploadProtocol = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String key = null;
        String fields = null;
        String alt = null;
        String uploadType = null;
        String accessToken = null;
        String quotaUser = null;
        String paramCallback = null;
        String $xgafv = null;
        GoogleCloudAiplatformV1UndeployModelRequest googleCloudAiplatformV1UndeployModelRequest = null;
        GoogleLongrunningOperation response = api.aiplatformProjectsLocationsEndpointsUndeployModel(projectsId, locationsId, endpointsId, uploadProtocol, oauthToken, prettyPrint, key, fields, alt, uploadType, accessToken, quotaUser, paramCallback, $xgafv, googleCloudAiplatformV1UndeployModelRequest);
        // TODO: test validations
    }

    /**
     * Evaluates instances based on a given metric.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void aiplatformProjectsLocationsEvaluateInstancesTest() throws ApiException {
        String projectsId = null;
        String locationsId = null;
        String uploadProtocol = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String key = null;
        String fields = null;
        String alt = null;
        String uploadType = null;
        String accessToken = null;
        String quotaUser = null;
        String paramCallback = null;
        String $xgafv = null;
        GoogleCloudAiplatformV1EvaluateInstancesRequest googleCloudAiplatformV1EvaluateInstancesRequest = null;
        GoogleCloudAiplatformV1EvaluateInstancesResponse response = api.aiplatformProjectsLocationsEvaluateInstances(projectsId, locationsId, uploadProtocol, oauthToken, prettyPrint, key, fields, alt, uploadType, accessToken, quotaUser, paramCallback, $xgafv, googleCloudAiplatformV1EvaluateInstancesRequest);
        // TODO: test validations
    }

    /**
     * Creates a new FeatureGroup in a given project and location.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void aiplatformProjectsLocationsFeatureGroupsCreateTest() throws ApiException {
        String projectsId = null;
        String locationsId = null;
        String featureGroupId = null;
        String uploadProtocol = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String key = null;
        String fields = null;
        String alt = null;
        String uploadType = null;
        String accessToken = null;
        String quotaUser = null;
        String paramCallback = null;
        String $xgafv = null;
        GoogleCloudAiplatformV1FeatureGroup googleCloudAiplatformV1FeatureGroup = null;
        GoogleLongrunningOperation response = api.aiplatformProjectsLocationsFeatureGroupsCreate(projectsId, locationsId, featureGroupId, uploadProtocol, oauthToken, prettyPrint, key, fields, alt, uploadType, accessToken, quotaUser, paramCallback, $xgafv, googleCloudAiplatformV1FeatureGroup);
        // TODO: test validations
    }

    /**
     * Deletes a single FeatureGroup.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void aiplatformProjectsLocationsFeatureGroupsDeleteTest() throws ApiException {
        String projectsId = null;
        String locationsId = null;
        String featureGroupsId = null;
        Boolean force = null;
        String uploadProtocol = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String key = null;
        String fields = null;
        String alt = null;
        String uploadType = null;
        String accessToken = null;
        String quotaUser = null;
        String paramCallback = null;
        String $xgafv = null;
        GoogleLongrunningOperation response = api.aiplatformProjectsLocationsFeatureGroupsDelete(projectsId, locationsId, featureGroupsId, force, uploadProtocol, oauthToken, prettyPrint, key, fields, alt, uploadType, accessToken, quotaUser, paramCallback, $xgafv);
        // TODO: test validations
    }

    /**
     * Creates a new Feature in a given FeatureGroup.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void aiplatformProjectsLocationsFeatureGroupsFeaturesCreateTest() throws ApiException {
        String projectsId = null;
        String locationsId = null;
        String featureGroupsId = null;
        String featureId = null;
        String uploadProtocol = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String key = null;
        String fields = null;
        String alt = null;
        String uploadType = null;
        String accessToken = null;
        String quotaUser = null;
        String paramCallback = null;
        String $xgafv = null;
        GoogleCloudAiplatformV1Feature googleCloudAiplatformV1Feature = null;
        GoogleLongrunningOperation response = api.aiplatformProjectsLocationsFeatureGroupsFeaturesCreate(projectsId, locationsId, featureGroupsId, featureId, uploadProtocol, oauthToken, prettyPrint, key, fields, alt, uploadType, accessToken, quotaUser, paramCallback, $xgafv, googleCloudAiplatformV1Feature);
        // TODO: test validations
    }

    /**
     * Deletes a single Feature.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void aiplatformProjectsLocationsFeatureGroupsFeaturesDeleteTest() throws ApiException {
        String projectsId = null;
        String locationsId = null;
        String featureGroupsId = null;
        String featuresId = null;
        String uploadProtocol = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String key = null;
        String fields = null;
        String alt = null;
        String uploadType = null;
        String accessToken = null;
        String quotaUser = null;
        String paramCallback = null;
        String $xgafv = null;
        GoogleLongrunningOperation response = api.aiplatformProjectsLocationsFeatureGroupsFeaturesDelete(projectsId, locationsId, featureGroupsId, featuresId, uploadProtocol, oauthToken, prettyPrint, key, fields, alt, uploadType, accessToken, quotaUser, paramCallback, $xgafv);
        // TODO: test validations
    }

    /**
     * Gets details of a single Feature.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void aiplatformProjectsLocationsFeatureGroupsFeaturesGetTest() throws ApiException {
        String projectsId = null;
        String locationsId = null;
        String featureGroupsId = null;
        String featuresId = null;
        String uploadProtocol = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String key = null;
        String fields = null;
        String alt = null;
        String uploadType = null;
        String accessToken = null;
        String quotaUser = null;
        String paramCallback = null;
        String $xgafv = null;
        GoogleCloudAiplatformV1Feature response = api.aiplatformProjectsLocationsFeatureGroupsFeaturesGet(projectsId, locationsId, featureGroupsId, featuresId, uploadProtocol, oauthToken, prettyPrint, key, fields, alt, uploadType, accessToken, quotaUser, paramCallback, $xgafv);
        // TODO: test validations
    }

    /**
     * Lists Features in a given FeatureGroup.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void aiplatformProjectsLocationsFeatureGroupsFeaturesListTest() throws ApiException {
        String projectsId = null;
        String locationsId = null;
        String featureGroupsId = null;
        String orderBy = null;
        String pageToken = null;
        String readMask = null;
        String filter = null;
        Integer latestStatsCount = null;
        Integer pageSize = null;
        String uploadProtocol = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String key = null;
        String fields = null;
        String alt = null;
        String uploadType = null;
        String accessToken = null;
        String quotaUser = null;
        String paramCallback = null;
        String $xgafv = null;
        GoogleCloudAiplatformV1ListFeaturesResponse response = api.aiplatformProjectsLocationsFeatureGroupsFeaturesList(projectsId, locationsId, featureGroupsId, orderBy, pageToken, readMask, filter, latestStatsCount, pageSize, uploadProtocol, oauthToken, prettyPrint, key, fields, alt, uploadType, accessToken, quotaUser, paramCallback, $xgafv);
        // TODO: test validations
    }

    /**
     * Deletes a long-running operation. This method indicates that the client is no longer interested in the operation result. It does not cancel the operation. If the server doesn&#39;t support this method, it returns &#x60;google.rpc.Code.UNIMPLEMENTED&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void aiplatformProjectsLocationsFeatureGroupsFeaturesOperationsDeleteTest() throws ApiException {
        String projectsId = null;
        String locationsId = null;
        String featureGroupsId = null;
        String featuresId = null;
        String operationsId = null;
        String uploadProtocol = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String key = null;
        String fields = null;
        String alt = null;
        String uploadType = null;
        String accessToken = null;
        String quotaUser = null;
        String paramCallback = null;
        String $xgafv = null;
        Object response = api.aiplatformProjectsLocationsFeatureGroupsFeaturesOperationsDelete(projectsId, locationsId, featureGroupsId, featuresId, operationsId, uploadProtocol, oauthToken, prettyPrint, key, fields, alt, uploadType, accessToken, quotaUser, paramCallback, $xgafv);
        // TODO: test validations
    }

    /**
     * Gets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void aiplatformProjectsLocationsFeatureGroupsFeaturesOperationsGetTest() throws ApiException {
        String projectsId = null;
        String locationsId = null;
        String featureGroupsId = null;
        String featuresId = null;
        String operationsId = null;
        String uploadProtocol = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String key = null;
        String fields = null;
        String alt = null;
        String uploadType = null;
        String accessToken = null;
        String quotaUser = null;
        String paramCallback = null;
        String $xgafv = null;
        GoogleLongrunningOperation response = api.aiplatformProjectsLocationsFeatureGroupsFeaturesOperationsGet(projectsId, locationsId, featureGroupsId, featuresId, operationsId, uploadProtocol, oauthToken, prettyPrint, key, fields, alt, uploadType, accessToken, quotaUser, paramCallback, $xgafv);
        // TODO: test validations
    }

    /**
     * Lists operations that match the specified filter in the request. If the server doesn&#39;t support this method, it returns &#x60;UNIMPLEMENTED&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void aiplatformProjectsLocationsFeatureGroupsFeaturesOperationsListWaitTest() throws ApiException {
        String projectsId = null;
        String locationsId = null;
        String featureGroupsId = null;
        String featuresId = null;
        String operationsId = null;
        String pageToken = null;
        Integer pageSize = null;
        String filter = null;
        String uploadProtocol = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String key = null;
        String fields = null;
        String alt = null;
        String uploadType = null;
        String accessToken = null;
        String quotaUser = null;
        String paramCallback = null;
        String $xgafv = null;
        GoogleLongrunningListOperationsResponse response = api.aiplatformProjectsLocationsFeatureGroupsFeaturesOperationsListWait(projectsId, locationsId, featureGroupsId, featuresId, operationsId, pageToken, pageSize, filter, uploadProtocol, oauthToken, prettyPrint, key, fields, alt, uploadType, accessToken, quotaUser, paramCallback, $xgafv);
        // TODO: test validations
    }

    /**
     * Waits until the specified long-running operation is done or reaches at most a specified timeout, returning the latest state. If the operation is already done, the latest state is immediately returned. If the timeout specified is greater than the default HTTP/RPC timeout, the HTTP/RPC timeout is used. If the server does not support this method, it returns &#x60;google.rpc.Code.UNIMPLEMENTED&#x60;. Note that this method is on a best-effort basis. It may return the latest state before the specified timeout (including immediately), meaning even an immediate response is no guarantee that the operation is done.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void aiplatformProjectsLocationsFeatureGroupsFeaturesOperationsWaitTest() throws ApiException {
        String projectsId = null;
        String locationsId = null;
        String featureGroupsId = null;
        String featuresId = null;
        String operationsId = null;
        String timeout = null;
        String uploadProtocol = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String key = null;
        String fields = null;
        String alt = null;
        String uploadType = null;
        String accessToken = null;
        String quotaUser = null;
        String paramCallback = null;
        String $xgafv = null;
        GoogleLongrunningOperation response = api.aiplatformProjectsLocationsFeatureGroupsFeaturesOperationsWait(projectsId, locationsId, featureGroupsId, featuresId, operationsId, timeout, uploadProtocol, oauthToken, prettyPrint, key, fields, alt, uploadType, accessToken, quotaUser, paramCallback, $xgafv);
        // TODO: test validations
    }

    /**
     * Updates the parameters of a single Feature.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void aiplatformProjectsLocationsFeatureGroupsFeaturesPatchTest() throws ApiException {
        String projectsId = null;
        String locationsId = null;
        String featureGroupsId = null;
        String featuresId = null;
        String updateMask = null;
        String uploadProtocol = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String key = null;
        String fields = null;
        String alt = null;
        String uploadType = null;
        String accessToken = null;
        String quotaUser = null;
        String paramCallback = null;
        String $xgafv = null;
        GoogleCloudAiplatformV1Feature googleCloudAiplatformV1Feature = null;
        GoogleLongrunningOperation response = api.aiplatformProjectsLocationsFeatureGroupsFeaturesPatch(projectsId, locationsId, featureGroupsId, featuresId, updateMask, uploadProtocol, oauthToken, prettyPrint, key, fields, alt, uploadType, accessToken, quotaUser, paramCallback, $xgafv, googleCloudAiplatformV1Feature);
        // TODO: test validations
    }

    /**
     * Gets details of a single FeatureGroup.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void aiplatformProjectsLocationsFeatureGroupsGetTest() throws ApiException {
        String projectsId = null;
        String locationsId = null;
        String featureGroupsId = null;
        String uploadProtocol = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String key = null;
        String fields = null;
        String alt = null;
        String uploadType = null;
        String accessToken = null;
        String quotaUser = null;
        String paramCallback = null;
        String $xgafv = null;
        GoogleCloudAiplatformV1FeatureGroup response = api.aiplatformProjectsLocationsFeatureGroupsGet(projectsId, locationsId, featureGroupsId, uploadProtocol, oauthToken, prettyPrint, key, fields, alt, uploadType, accessToken, quotaUser, paramCallback, $xgafv);
        // TODO: test validations
    }

    /**
     * Lists FeatureGroups in a given project and location.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void aiplatformProjectsLocationsFeatureGroupsListTest() throws ApiException {
        String projectsId = null;
        String locationsId = null;
        String filter = null;
        String orderBy = null;
        Integer pageSize = null;
        String pageToken = null;
        String uploadProtocol = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String key = null;
        String fields = null;
        String alt = null;
        String uploadType = null;
        String accessToken = null;
        String quotaUser = null;
        String paramCallback = null;
        String $xgafv = null;
        GoogleCloudAiplatformV1ListFeatureGroupsResponse response = api.aiplatformProjectsLocationsFeatureGroupsList(projectsId, locationsId, filter, orderBy, pageSize, pageToken, uploadProtocol, oauthToken, prettyPrint, key, fields, alt, uploadType, accessToken, quotaUser, paramCallback, $xgafv);
        // TODO: test validations
    }

    /**
     * Deletes a long-running operation. This method indicates that the client is no longer interested in the operation result. It does not cancel the operation. If the server doesn&#39;t support this method, it returns &#x60;google.rpc.Code.UNIMPLEMENTED&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void aiplatformProjectsLocationsFeatureGroupsOperationsDeleteTest() throws ApiException {
        String projectsId = null;
        String locationsId = null;
        String featureGroupsId = null;
        String operationsId = null;
        String uploadProtocol = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String key = null;
        String fields = null;
        String alt = null;
        String uploadType = null;
        String accessToken = null;
        String quotaUser = null;
        String paramCallback = null;
        String $xgafv = null;
        Object response = api.aiplatformProjectsLocationsFeatureGroupsOperationsDelete(projectsId, locationsId, featureGroupsId, operationsId, uploadProtocol, oauthToken, prettyPrint, key, fields, alt, uploadType, accessToken, quotaUser, paramCallback, $xgafv);
        // TODO: test validations
    }

    /**
     * Gets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void aiplatformProjectsLocationsFeatureGroupsOperationsGetTest() throws ApiException {
        String projectsId = null;
        String locationsId = null;
        String featureGroupsId = null;
        String operationsId = null;
        String uploadProtocol = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String key = null;
        String fields = null;
        String alt = null;
        String uploadType = null;
        String accessToken = null;
        String quotaUser = null;
        String paramCallback = null;
        String $xgafv = null;
        GoogleLongrunningOperation response = api.aiplatformProjectsLocationsFeatureGroupsOperationsGet(projectsId, locationsId, featureGroupsId, operationsId, uploadProtocol, oauthToken, prettyPrint, key, fields, alt, uploadType, accessToken, quotaUser, paramCallback, $xgafv);
        // TODO: test validations
    }

    /**
     * Lists operations that match the specified filter in the request. If the server doesn&#39;t support this method, it returns &#x60;UNIMPLEMENTED&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void aiplatformProjectsLocationsFeatureGroupsOperationsListWaitTest() throws ApiException {
        String projectsId = null;
        String locationsId = null;
        String featureGroupsId = null;
        String operationsId = null;
        String filter = null;
        String pageToken = null;
        Integer pageSize = null;
        String uploadProtocol = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String key = null;
        String fields = null;
        String alt = null;
        String uploadType = null;
        String accessToken = null;
        String quotaUser = null;
        String paramCallback = null;
        String $xgafv = null;
        GoogleLongrunningListOperationsResponse response = api.aiplatformProjectsLocationsFeatureGroupsOperationsListWait(projectsId, locationsId, featureGroupsId, operationsId, filter, pageToken, pageSize, uploadProtocol, oauthToken, prettyPrint, key, fields, alt, uploadType, accessToken, quotaUser, paramCallback, $xgafv);
        // TODO: test validations
    }

    /**
     * Waits until the specified long-running operation is done or reaches at most a specified timeout, returning the latest state. If the operation is already done, the latest state is immediately returned. If the timeout specified is greater than the default HTTP/RPC timeout, the HTTP/RPC timeout is used. If the server does not support this method, it returns &#x60;google.rpc.Code.UNIMPLEMENTED&#x60;. Note that this method is on a best-effort basis. It may return the latest state before the specified timeout (including immediately), meaning even an immediate response is no guarantee that the operation is done.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void aiplatformProjectsLocationsFeatureGroupsOperationsWaitTest() throws ApiException {
        String projectsId = null;
        String locationsId = null;
        String featureGroupsId = null;
        String operationsId = null;
        String timeout = null;
        String uploadProtocol = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String key = null;
        String fields = null;
        String alt = null;
        String uploadType = null;
        String accessToken = null;
        String quotaUser = null;
        String paramCallback = null;
        String $xgafv = null;
        GoogleLongrunningOperation response = api.aiplatformProjectsLocationsFeatureGroupsOperationsWait(projectsId, locationsId, featureGroupsId, operationsId, timeout, uploadProtocol, oauthToken, prettyPrint, key, fields, alt, uploadType, accessToken, quotaUser, paramCallback, $xgafv);
        // TODO: test validations
    }

    /**
     * Updates the parameters of a single FeatureGroup.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void aiplatformProjectsLocationsFeatureGroupsPatchTest() throws ApiException {
        String projectsId = null;
        String locationsId = null;
        String featureGroupsId = null;
        String updateMask = null;
        String uploadProtocol = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String key = null;
        String fields = null;
        String alt = null;
        String uploadType = null;
        String accessToken = null;
        String quotaUser = null;
        String paramCallback = null;
        String $xgafv = null;
        GoogleCloudAiplatformV1FeatureGroup googleCloudAiplatformV1FeatureGroup = null;
        GoogleLongrunningOperation response = api.aiplatformProjectsLocationsFeatureGroupsPatch(projectsId, locationsId, featureGroupsId, updateMask, uploadProtocol, oauthToken, prettyPrint, key, fields, alt, uploadType, accessToken, quotaUser, paramCallback, $xgafv, googleCloudAiplatformV1FeatureGroup);
        // TODO: test validations
    }

    /**
     * Creates a new FeatureOnlineStore in a given project and location.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void aiplatformProjectsLocationsFeatureOnlineStoresCreateTest() throws ApiException {
        String projectsId = null;
        String locationsId = null;
        String featureOnlineStoreId = null;
        String uploadProtocol = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String key = null;
        String fields = null;
        String alt = null;
        String uploadType = null;
        String accessToken = null;
        String quotaUser = null;
        String paramCallback = null;
        String $xgafv = null;
        GoogleCloudAiplatformV1FeatureOnlineStore googleCloudAiplatformV1FeatureOnlineStore = null;
        GoogleLongrunningOperation response = api.aiplatformProjectsLocationsFeatureOnlineStoresCreate(projectsId, locationsId, featureOnlineStoreId, uploadProtocol, oauthToken, prettyPrint, key, fields, alt, uploadType, accessToken, quotaUser, paramCallback, $xgafv, googleCloudAiplatformV1FeatureOnlineStore);
        // TODO: test validations
    }

    /**
     * Deletes a single FeatureOnlineStore. The FeatureOnlineStore must not contain any FeatureViews.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void aiplatformProjectsLocationsFeatureOnlineStoresDeleteTest() throws ApiException {
        String projectsId = null;
        String locationsId = null;
        String featureOnlineStoresId = null;
        Boolean force = null;
        String uploadProtocol = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String key = null;
        String fields = null;
        String alt = null;
        String uploadType = null;
        String accessToken = null;
        String quotaUser = null;
        String paramCallback = null;
        String $xgafv = null;
        GoogleLongrunningOperation response = api.aiplatformProjectsLocationsFeatureOnlineStoresDelete(projectsId, locationsId, featureOnlineStoresId, force, uploadProtocol, oauthToken, prettyPrint, key, fields, alt, uploadType, accessToken, quotaUser, paramCallback, $xgafv);
        // TODO: test validations
    }

    /**
     * Creates a new FeatureView in a given FeatureOnlineStore.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void aiplatformProjectsLocationsFeatureOnlineStoresFeatureViewsCreateTest() throws ApiException {
        String projectsId = null;
        String locationsId = null;
        String featureOnlineStoresId = null;
        Boolean runSyncImmediately = null;
        String featureViewId = null;
        String uploadProtocol = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String key = null;
        String fields = null;
        String alt = null;
        String uploadType = null;
        String accessToken = null;
        String quotaUser = null;
        String paramCallback = null;
        String $xgafv = null;
        GoogleCloudAiplatformV1FeatureView googleCloudAiplatformV1FeatureView = null;
        GoogleLongrunningOperation response = api.aiplatformProjectsLocationsFeatureOnlineStoresFeatureViewsCreate(projectsId, locationsId, featureOnlineStoresId, runSyncImmediately, featureViewId, uploadProtocol, oauthToken, prettyPrint, key, fields, alt, uploadType, accessToken, quotaUser, paramCallback, $xgafv, googleCloudAiplatformV1FeatureView);
        // TODO: test validations
    }

    /**
     * Deletes a single FeatureView.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void aiplatformProjectsLocationsFeatureOnlineStoresFeatureViewsDeleteTest() throws ApiException {
        String projectsId = null;
        String locationsId = null;
        String featureOnlineStoresId = null;
        String featureViewsId = null;
        String uploadProtocol = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String key = null;
        String fields = null;
        String alt = null;
        String uploadType = null;
        String accessToken = null;
        String quotaUser = null;
        String paramCallback = null;
        String $xgafv = null;
        GoogleLongrunningOperation response = api.aiplatformProjectsLocationsFeatureOnlineStoresFeatureViewsDelete(projectsId, locationsId, featureOnlineStoresId, featureViewsId, uploadProtocol, oauthToken, prettyPrint, key, fields, alt, uploadType, accessToken, quotaUser, paramCallback, $xgafv);
        // TODO: test validations
    }

    /**
     * Gets details of a single FeatureViewSync.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void aiplatformProjectsLocationsFeatureOnlineStoresFeatureViewsFeatureViewSyncsGetTest() throws ApiException {
        String projectsId = null;
        String locationsId = null;
        String featureOnlineStoresId = null;
        String featureViewsId = null;
        String featureViewSyncsId = null;
        String uploadProtocol = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String key = null;
        String fields = null;
        String alt = null;
        String uploadType = null;
        String accessToken = null;
        String quotaUser = null;
        String paramCallback = null;
        String $xgafv = null;
        GoogleCloudAiplatformV1FeatureViewSync response = api.aiplatformProjectsLocationsFeatureOnlineStoresFeatureViewsFeatureViewSyncsGet(projectsId, locationsId, featureOnlineStoresId, featureViewsId, featureViewSyncsId, uploadProtocol, oauthToken, prettyPrint, key, fields, alt, uploadType, accessToken, quotaUser, paramCallback, $xgafv);
        // TODO: test validations
    }

    /**
     * Lists FeatureViewSyncs in a given FeatureView.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void aiplatformProjectsLocationsFeatureOnlineStoresFeatureViewsFeatureViewSyncsListTest() throws ApiException {
        String projectsId = null;
        String locationsId = null;
        String featureOnlineStoresId = null;
        String featureViewsId = null;
        Integer pageSize = null;
        String pageToken = null;
        String orderBy = null;
        String filter = null;
        String uploadProtocol = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String key = null;
        String fields = null;
        String alt = null;
        String uploadType = null;
        String accessToken = null;
        String quotaUser = null;
        String paramCallback = null;
        String $xgafv = null;
        GoogleCloudAiplatformV1ListFeatureViewSyncsResponse response = api.aiplatformProjectsLocationsFeatureOnlineStoresFeatureViewsFeatureViewSyncsList(projectsId, locationsId, featureOnlineStoresId, featureViewsId, pageSize, pageToken, orderBy, filter, uploadProtocol, oauthToken, prettyPrint, key, fields, alt, uploadType, accessToken, quotaUser, paramCallback, $xgafv);
        // TODO: test validations
    }

    /**
     * Fetch feature values under a FeatureView.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void aiplatformProjectsLocationsFeatureOnlineStoresFeatureViewsFetchFeatureValuesTest() throws ApiException {
        String projectsId = null;
        String locationsId = null;
        String featureOnlineStoresId = null;
        String featureViewsId = null;
        String uploadProtocol = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String key = null;
        String fields = null;
        String alt = null;
        String uploadType = null;
        String accessToken = null;
        String quotaUser = null;
        String paramCallback = null;
        String $xgafv = null;
        GoogleCloudAiplatformV1FetchFeatureValuesRequest googleCloudAiplatformV1FetchFeatureValuesRequest = null;
        GoogleCloudAiplatformV1FetchFeatureValuesResponse response = api.aiplatformProjectsLocationsFeatureOnlineStoresFeatureViewsFetchFeatureValues(projectsId, locationsId, featureOnlineStoresId, featureViewsId, uploadProtocol, oauthToken, prettyPrint, key, fields, alt, uploadType, accessToken, quotaUser, paramCallback, $xgafv, googleCloudAiplatformV1FetchFeatureValuesRequest);
        // TODO: test validations
    }

    /**
     * Gets details of a single FeatureView.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void aiplatformProjectsLocationsFeatureOnlineStoresFeatureViewsGetTest() throws ApiException {
        String projectsId = null;
        String locationsId = null;
        String featureOnlineStoresId = null;
        String featureViewsId = null;
        String uploadProtocol = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String key = null;
        String fields = null;
        String alt = null;
        String uploadType = null;
        String accessToken = null;
        String quotaUser = null;
        String paramCallback = null;
        String $xgafv = null;
        GoogleCloudAiplatformV1FeatureView response = api.aiplatformProjectsLocationsFeatureOnlineStoresFeatureViewsGet(projectsId, locationsId, featureOnlineStoresId, featureViewsId, uploadProtocol, oauthToken, prettyPrint, key, fields, alt, uploadType, accessToken, quotaUser, paramCallback, $xgafv);
        // TODO: test validations
    }

    /**
     * Gets the access control policy for a resource. Returns an empty policy if the resource exists and does not have a policy set.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void aiplatformProjectsLocationsFeatureOnlineStoresFeatureViewsGetIamPolicyTest() throws ApiException {
        String projectsId = null;
        String locationsId = null;
        String featureOnlineStoresId = null;
        String featureViewsId = null;
        Integer optionsRequestedPolicyVersion = null;
        String uploadProtocol = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String key = null;
        String fields = null;
        String alt = null;
        String uploadType = null;
        String accessToken = null;
        String quotaUser = null;
        String paramCallback = null;
        String $xgafv = null;
        GoogleIamV1Policy response = api.aiplatformProjectsLocationsFeatureOnlineStoresFeatureViewsGetIamPolicy(projectsId, locationsId, featureOnlineStoresId, featureViewsId, optionsRequestedPolicyVersion, uploadProtocol, oauthToken, prettyPrint, key, fields, alt, uploadType, accessToken, quotaUser, paramCallback, $xgafv);
        // TODO: test validations
    }

    /**
     * Lists FeatureViews in a given FeatureOnlineStore.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void aiplatformProjectsLocationsFeatureOnlineStoresFeatureViewsListTest() throws ApiException {
        String projectsId = null;
        String locationsId = null;
        String featureOnlineStoresId = null;
        Integer pageSize = null;
        String orderBy = null;
        String pageToken = null;
        String filter = null;
        String uploadProtocol = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String key = null;
        String fields = null;
        String alt = null;
        String uploadType = null;
        String accessToken = null;
        String quotaUser = null;
        String paramCallback = null;
        String $xgafv = null;
        GoogleCloudAiplatformV1ListFeatureViewsResponse response = api.aiplatformProjectsLocationsFeatureOnlineStoresFeatureViewsList(projectsId, locationsId, featureOnlineStoresId, pageSize, orderBy, pageToken, filter, uploadProtocol, oauthToken, prettyPrint, key, fields, alt, uploadType, accessToken, quotaUser, paramCallback, $xgafv);
        // TODO: test validations
    }

    /**
     * Deletes a long-running operation. This method indicates that the client is no longer interested in the operation result. It does not cancel the operation. If the server doesn&#39;t support this method, it returns &#x60;google.rpc.Code.UNIMPLEMENTED&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void aiplatformProjectsLocationsFeatureOnlineStoresFeatureViewsOperationsDeleteTest() throws ApiException {
        String projectsId = null;
        String locationsId = null;
        String featureOnlineStoresId = null;
        String featureViewsId = null;
        String operationsId = null;
        String uploadProtocol = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String key = null;
        String fields = null;
        String alt = null;
        String uploadType = null;
        String accessToken = null;
        String quotaUser = null;
        String paramCallback = null;
        String $xgafv = null;
        Object response = api.aiplatformProjectsLocationsFeatureOnlineStoresFeatureViewsOperationsDelete(projectsId, locationsId, featureOnlineStoresId, featureViewsId, operationsId, uploadProtocol, oauthToken, prettyPrint, key, fields, alt, uploadType, accessToken, quotaUser, paramCallback, $xgafv);
        // TODO: test validations
    }

    /**
     * Gets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void aiplatformProjectsLocationsFeatureOnlineStoresFeatureViewsOperationsGetTest() throws ApiException {
        String projectsId = null;
        String locationsId = null;
        String featureOnlineStoresId = null;
        String featureViewsId = null;
        String operationsId = null;
        String uploadProtocol = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String key = null;
        String fields = null;
        String alt = null;
        String uploadType = null;
        String accessToken = null;
        String quotaUser = null;
        String paramCallback = null;
        String $xgafv = null;
        GoogleLongrunningOperation response = api.aiplatformProjectsLocationsFeatureOnlineStoresFeatureViewsOperationsGet(projectsId, locationsId, featureOnlineStoresId, featureViewsId, operationsId, uploadProtocol, oauthToken, prettyPrint, key, fields, alt, uploadType, accessToken, quotaUser, paramCallback, $xgafv);
        // TODO: test validations
    }

    /**
     * Lists operations that match the specified filter in the request. If the server doesn&#39;t support this method, it returns &#x60;UNIMPLEMENTED&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void aiplatformProjectsLocationsFeatureOnlineStoresFeatureViewsOperationsListWaitTest() throws ApiException {
        String projectsId = null;
        String locationsId = null;
        String featureOnlineStoresId = null;
        String featureViewsId = null;
        String operationsId = null;
        String pageToken = null;
        String filter = null;
        Integer pageSize = null;
        String uploadProtocol = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String key = null;
        String fields = null;
        String alt = null;
        String uploadType = null;
        String accessToken = null;
        String quotaUser = null;
        String paramCallback = null;
        String $xgafv = null;
        GoogleLongrunningListOperationsResponse response = api.aiplatformProjectsLocationsFeatureOnlineStoresFeatureViewsOperationsListWait(projectsId, locationsId, featureOnlineStoresId, featureViewsId, operationsId, pageToken, filter, pageSize, uploadProtocol, oauthToken, prettyPrint, key, fields, alt, uploadType, accessToken, quotaUser, paramCallback, $xgafv);
        // TODO: test validations
    }

    /**
     * Waits until the specified long-running operation is done or reaches at most a specified timeout, returning the latest state. If the operation is already done, the latest state is immediately returned. If the timeout specified is greater than the default HTTP/RPC timeout, the HTTP/RPC timeout is used. If the server does not support this method, it returns &#x60;google.rpc.Code.UNIMPLEMENTED&#x60;. Note that this method is on a best-effort basis. It may return the latest state before the specified timeout (including immediately), meaning even an immediate response is no guarantee that the operation is done.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void aiplatformProjectsLocationsFeatureOnlineStoresFeatureViewsOperationsWaitTest() throws ApiException {
        String projectsId = null;
        String locationsId = null;
        String featureOnlineStoresId = null;
        String featureViewsId = null;
        String operationsId = null;
        String timeout = null;
        String uploadProtocol = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String key = null;
        String fields = null;
        String alt = null;
        String uploadType = null;
        String accessToken = null;
        String quotaUser = null;
        String paramCallback = null;
        String $xgafv = null;
        GoogleLongrunningOperation response = api.aiplatformProjectsLocationsFeatureOnlineStoresFeatureViewsOperationsWait(projectsId, locationsId, featureOnlineStoresId, featureViewsId, operationsId, timeout, uploadProtocol, oauthToken, prettyPrint, key, fields, alt, uploadType, accessToken, quotaUser, paramCallback, $xgafv);
        // TODO: test validations
    }

    /**
     * Updates the parameters of a single FeatureView.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void aiplatformProjectsLocationsFeatureOnlineStoresFeatureViewsPatchTest() throws ApiException {
        String projectsId = null;
        String locationsId = null;
        String featureOnlineStoresId = null;
        String featureViewsId = null;
        String updateMask = null;
        String uploadProtocol = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String key = null;
        String fields = null;
        String alt = null;
        String uploadType = null;
        String accessToken = null;
        String quotaUser = null;
        String paramCallback = null;
        String $xgafv = null;
        GoogleCloudAiplatformV1FeatureView googleCloudAiplatformV1FeatureView = null;
        GoogleLongrunningOperation response = api.aiplatformProjectsLocationsFeatureOnlineStoresFeatureViewsPatch(projectsId, locationsId, featureOnlineStoresId, featureViewsId, updateMask, uploadProtocol, oauthToken, prettyPrint, key, fields, alt, uploadType, accessToken, quotaUser, paramCallback, $xgafv, googleCloudAiplatformV1FeatureView);
        // TODO: test validations
    }

    /**
     * Search the nearest entities under a FeatureView. Search only works for indexable feature view; if a feature view isn&#39;t indexable, returns Invalid argument response.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void aiplatformProjectsLocationsFeatureOnlineStoresFeatureViewsSearchNearestEntitiesTest() throws ApiException {
        String projectsId = null;
        String locationsId = null;
        String featureOnlineStoresId = null;
        String featureViewsId = null;
        String uploadProtocol = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String key = null;
        String fields = null;
        String alt = null;
        String uploadType = null;
        String accessToken = null;
        String quotaUser = null;
        String paramCallback = null;
        String $xgafv = null;
        GoogleCloudAiplatformV1SearchNearestEntitiesRequest googleCloudAiplatformV1SearchNearestEntitiesRequest = null;
        GoogleCloudAiplatformV1SearchNearestEntitiesResponse response = api.aiplatformProjectsLocationsFeatureOnlineStoresFeatureViewsSearchNearestEntities(projectsId, locationsId, featureOnlineStoresId, featureViewsId, uploadProtocol, oauthToken, prettyPrint, key, fields, alt, uploadType, accessToken, quotaUser, paramCallback, $xgafv, googleCloudAiplatformV1SearchNearestEntitiesRequest);
        // TODO: test validations
    }

    /**
     * Sets the access control policy on the specified resource. Replaces any existing policy. Can return &#x60;NOT_FOUND&#x60;, &#x60;INVALID_ARGUMENT&#x60;, and &#x60;PERMISSION_DENIED&#x60; errors.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void aiplatformProjectsLocationsFeatureOnlineStoresFeatureViewsSetIamPolicyTest() throws ApiException {
        String projectsId = null;
        String locationsId = null;
        String featureOnlineStoresId = null;
        String featureViewsId = null;
        String uploadProtocol = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String key = null;
        String fields = null;
        String alt = null;
        String uploadType = null;
        String accessToken = null;
        String quotaUser = null;
        String paramCallback = null;
        String $xgafv = null;
        GoogleIamV1SetIamPolicyRequest googleIamV1SetIamPolicyRequest = null;
        GoogleIamV1Policy response = api.aiplatformProjectsLocationsFeatureOnlineStoresFeatureViewsSetIamPolicy(projectsId, locationsId, featureOnlineStoresId, featureViewsId, uploadProtocol, oauthToken, prettyPrint, key, fields, alt, uploadType, accessToken, quotaUser, paramCallback, $xgafv, googleIamV1SetIamPolicyRequest);
        // TODO: test validations
    }

    /**
     * Triggers on-demand sync for the FeatureView.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void aiplatformProjectsLocationsFeatureOnlineStoresFeatureViewsSyncTest() throws ApiException {
        String projectsId = null;
        String locationsId = null;
        String featureOnlineStoresId = null;
        String featureViewsId = null;
        String uploadProtocol = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String key = null;
        String fields = null;
        String alt = null;
        String uploadType = null;
        String accessToken = null;
        String quotaUser = null;
        String paramCallback = null;
        String $xgafv = null;
        Object body = null;
        GoogleCloudAiplatformV1SyncFeatureViewResponse response = api.aiplatformProjectsLocationsFeatureOnlineStoresFeatureViewsSync(projectsId, locationsId, featureOnlineStoresId, featureViewsId, uploadProtocol, oauthToken, prettyPrint, key, fields, alt, uploadType, accessToken, quotaUser, paramCallback, $xgafv, body);
        // TODO: test validations
    }

    /**
     * Returns permissions that a caller has on the specified resource. If the resource does not exist, this will return an empty set of permissions, not a &#x60;NOT_FOUND&#x60; error. Note: This operation is designed to be used for building permission-aware UIs and command-line tools, not for authorization checking. This operation may \&quot;fail open\&quot; without warning.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void aiplatformProjectsLocationsFeatureOnlineStoresFeatureViewsTestIamPermissionsTest() throws ApiException {
        String projectsId = null;
        String locationsId = null;
        String featureOnlineStoresId = null;
        String featureViewsId = null;
        String permissions = null;
        String uploadProtocol = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String key = null;
        String fields = null;
        String alt = null;
        String uploadType = null;
        String accessToken = null;
        String quotaUser = null;
        String paramCallback = null;
        String $xgafv = null;
        GoogleIamV1TestIamPermissionsResponse response = api.aiplatformProjectsLocationsFeatureOnlineStoresFeatureViewsTestIamPermissions(projectsId, locationsId, featureOnlineStoresId, featureViewsId, permissions, uploadProtocol, oauthToken, prettyPrint, key, fields, alt, uploadType, accessToken, quotaUser, paramCallback, $xgafv);
        // TODO: test validations
    }

    /**
     * Gets details of a single FeatureOnlineStore.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void aiplatformProjectsLocationsFeatureOnlineStoresGetTest() throws ApiException {
        String projectsId = null;
        String locationsId = null;
        String featureOnlineStoresId = null;
        String uploadProtocol = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String key = null;
        String fields = null;
        String alt = null;
        String uploadType = null;
        String accessToken = null;
        String quotaUser = null;
        String paramCallback = null;
        String $xgafv = null;
        GoogleCloudAiplatformV1FeatureOnlineStore response = api.aiplatformProjectsLocationsFeatureOnlineStoresGet(projectsId, locationsId, featureOnlineStoresId, uploadProtocol, oauthToken, prettyPrint, key, fields, alt, uploadType, accessToken, quotaUser, paramCallback, $xgafv);
        // TODO: test validations
    }

    /**
     * Gets the access control policy for a resource. Returns an empty policy if the resource exists and does not have a policy set.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void aiplatformProjectsLocationsFeatureOnlineStoresGetIamPolicyTest() throws ApiException {
        String projectsId = null;
        String locationsId = null;
        String featureOnlineStoresId = null;
        Integer optionsRequestedPolicyVersion = null;
        String uploadProtocol = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String key = null;
        String fields = null;
        String alt = null;
        String uploadType = null;
        String accessToken = null;
        String quotaUser = null;
        String paramCallback = null;
        String $xgafv = null;
        GoogleIamV1Policy response = api.aiplatformProjectsLocationsFeatureOnlineStoresGetIamPolicy(projectsId, locationsId, featureOnlineStoresId, optionsRequestedPolicyVersion, uploadProtocol, oauthToken, prettyPrint, key, fields, alt, uploadType, accessToken, quotaUser, paramCallback, $xgafv);
        // TODO: test validations
    }

    /**
     * Lists FeatureOnlineStores in a given project and location.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void aiplatformProjectsLocationsFeatureOnlineStoresListTest() throws ApiException {
        String projectsId = null;
        String locationsId = null;
        String orderBy = null;
        Integer pageSize = null;
        String pageToken = null;
        String filter = null;
        String uploadProtocol = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String key = null;
        String fields = null;
        String alt = null;
        String uploadType = null;
        String accessToken = null;
        String quotaUser = null;
        String paramCallback = null;
        String $xgafv = null;
        GoogleCloudAiplatformV1ListFeatureOnlineStoresResponse response = api.aiplatformProjectsLocationsFeatureOnlineStoresList(projectsId, locationsId, orderBy, pageSize, pageToken, filter, uploadProtocol, oauthToken, prettyPrint, key, fields, alt, uploadType, accessToken, quotaUser, paramCallback, $xgafv);
        // TODO: test validations
    }

    /**
     * Deletes a long-running operation. This method indicates that the client is no longer interested in the operation result. It does not cancel the operation. If the server doesn&#39;t support this method, it returns &#x60;google.rpc.Code.UNIMPLEMENTED&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void aiplatformProjectsLocationsFeatureOnlineStoresOperationsDeleteTest() throws ApiException {
        String projectsId = null;
        String locationsId = null;
        String featureOnlineStoresId = null;
        String operationsId = null;
        String uploadProtocol = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String key = null;
        String fields = null;
        String alt = null;
        String uploadType = null;
        String accessToken = null;
        String quotaUser = null;
        String paramCallback = null;
        String $xgafv = null;
        Object response = api.aiplatformProjectsLocationsFeatureOnlineStoresOperationsDelete(projectsId, locationsId, featureOnlineStoresId, operationsId, uploadProtocol, oauthToken, prettyPrint, key, fields, alt, uploadType, accessToken, quotaUser, paramCallback, $xgafv);
        // TODO: test validations
    }

    /**
     * Gets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void aiplatformProjectsLocationsFeatureOnlineStoresOperationsGetTest() throws ApiException {
        String projectsId = null;
        String locationsId = null;
        String featureOnlineStoresId = null;
        String operationsId = null;
        String uploadProtocol = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String key = null;
        String fields = null;
        String alt = null;
        String uploadType = null;
        String accessToken = null;
        String quotaUser = null;
        String paramCallback = null;
        String $xgafv = null;
        GoogleLongrunningOperation response = api.aiplatformProjectsLocationsFeatureOnlineStoresOperationsGet(projectsId, locationsId, featureOnlineStoresId, operationsId, uploadProtocol, oauthToken, prettyPrint, key, fields, alt, uploadType, accessToken, quotaUser, paramCallback, $xgafv);
        // TODO: test validations
    }

    /**
     * Lists operations that match the specified filter in the request. If the server doesn&#39;t support this method, it returns &#x60;UNIMPLEMENTED&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void aiplatformProjectsLocationsFeatureOnlineStoresOperationsListWaitTest() throws ApiException {
        String projectsId = null;
        String locationsId = null;
        String featureOnlineStoresId = null;
        String operationsId = null;
        String filter = null;
        String pageToken = null;
        Integer pageSize = null;
        String uploadProtocol = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String key = null;
        String fields = null;
        String alt = null;
        String uploadType = null;
        String accessToken = null;
        String quotaUser = null;
        String paramCallback = null;
        String $xgafv = null;
        GoogleLongrunningListOperationsResponse response = api.aiplatformProjectsLocationsFeatureOnlineStoresOperationsListWait(projectsId, locationsId, featureOnlineStoresId, operationsId, filter, pageToken, pageSize, uploadProtocol, oauthToken, prettyPrint, key, fields, alt, uploadType, accessToken, quotaUser, paramCallback, $xgafv);
        // TODO: test validations
    }

    /**
     * Waits until the specified long-running operation is done or reaches at most a specified timeout, returning the latest state. If the operation is already done, the latest state is immediately returned. If the timeout specified is greater than the default HTTP/RPC timeout, the HTTP/RPC timeout is used. If the server does not support this method, it returns &#x60;google.rpc.Code.UNIMPLEMENTED&#x60;. Note that this method is on a best-effort basis. It may return the latest state before the specified timeout (including immediately), meaning even an immediate response is no guarantee that the operation is done.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void aiplatformProjectsLocationsFeatureOnlineStoresOperationsWaitTest() throws ApiException {
        String projectsId = null;
        String locationsId = null;
        String featureOnlineStoresId = null;
        String operationsId = null;
        String timeout = null;
        String uploadProtocol = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String key = null;
        String fields = null;
        String alt = null;
        String uploadType = null;
        String accessToken = null;
        String quotaUser = null;
        String paramCallback = null;
        String $xgafv = null;
        GoogleLongrunningOperation response = api.aiplatformProjectsLocationsFeatureOnlineStoresOperationsWait(projectsId, locationsId, featureOnlineStoresId, operationsId, timeout, uploadProtocol, oauthToken, prettyPrint, key, fields, alt, uploadType, accessToken, quotaUser, paramCallback, $xgafv);
        // TODO: test validations
    }

    /**
     * Updates the parameters of a single FeatureOnlineStore.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void aiplatformProjectsLocationsFeatureOnlineStoresPatchTest() throws ApiException {
        String projectsId = null;
        String locationsId = null;
        String featureOnlineStoresId = null;
        String updateMask = null;
        String uploadProtocol = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String key = null;
        String fields = null;
        String alt = null;
        String uploadType = null;
        String accessToken = null;
        String quotaUser = null;
        String paramCallback = null;
        String $xgafv = null;
        GoogleCloudAiplatformV1FeatureOnlineStore googleCloudAiplatformV1FeatureOnlineStore = null;
        GoogleLongrunningOperation response = api.aiplatformProjectsLocationsFeatureOnlineStoresPatch(projectsId, locationsId, featureOnlineStoresId, updateMask, uploadProtocol, oauthToken, prettyPrint, key, fields, alt, uploadType, accessToken, quotaUser, paramCallback, $xgafv, googleCloudAiplatformV1FeatureOnlineStore);
        // TODO: test validations
    }

    /**
     * Sets the access control policy on the specified resource. Replaces any existing policy. Can return &#x60;NOT_FOUND&#x60;, &#x60;INVALID_ARGUMENT&#x60;, and &#x60;PERMISSION_DENIED&#x60; errors.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void aiplatformProjectsLocationsFeatureOnlineStoresSetIamPolicyTest() throws ApiException {
        String projectsId = null;
        String locationsId = null;
        String featureOnlineStoresId = null;
        String uploadProtocol = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String key = null;
        String fields = null;
        String alt = null;
        String uploadType = null;
        String accessToken = null;
        String quotaUser = null;
        String paramCallback = null;
        String $xgafv = null;
        GoogleIamV1SetIamPolicyRequest googleIamV1SetIamPolicyRequest = null;
        GoogleIamV1Policy response = api.aiplatformProjectsLocationsFeatureOnlineStoresSetIamPolicy(projectsId, locationsId, featureOnlineStoresId, uploadProtocol, oauthToken, prettyPrint, key, fields, alt, uploadType, accessToken, quotaUser, paramCallback, $xgafv, googleIamV1SetIamPolicyRequest);
        // TODO: test validations
    }

    /**
     * Returns permissions that a caller has on the specified resource. If the resource does not exist, this will return an empty set of permissions, not a &#x60;NOT_FOUND&#x60; error. Note: This operation is designed to be used for building permission-aware UIs and command-line tools, not for authorization checking. This operation may \&quot;fail open\&quot; without warning.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void aiplatformProjectsLocationsFeatureOnlineStoresTestIamPermissionsTest() throws ApiException {
        String projectsId = null;
        String locationsId = null;
        String featureOnlineStoresId = null;
        String permissions = null;
        String uploadProtocol = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String key = null;
        String fields = null;
        String alt = null;
        String uploadType = null;
        String accessToken = null;
        String quotaUser = null;
        String paramCallback = null;
        String $xgafv = null;
        GoogleIamV1TestIamPermissionsResponse response = api.aiplatformProjectsLocationsFeatureOnlineStoresTestIamPermissions(projectsId, locationsId, featureOnlineStoresId, permissions, uploadProtocol, oauthToken, prettyPrint, key, fields, alt, uploadType, accessToken, quotaUser, paramCallback, $xgafv);
        // TODO: test validations
    }

    /**
     * Batch reads Feature values from a Featurestore. This API enables batch reading Feature values, where each read instance in the batch may read Feature values of entities from one or more EntityTypes. Point-in-time correctness is guaranteed for Feature values of each read instance as of each instance&#39;s read timestamp.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void aiplatformProjectsLocationsFeaturestoresBatchReadFeatureValuesTest() throws ApiException {
        String projectsId = null;
        String locationsId = null;
        String featurestoresId = null;
        String uploadProtocol = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String key = null;
        String fields = null;
        String alt = null;
        String uploadType = null;
        String accessToken = null;
        String quotaUser = null;
        String paramCallback = null;
        String $xgafv = null;
        GoogleCloudAiplatformV1BatchReadFeatureValuesRequest googleCloudAiplatformV1BatchReadFeatureValuesRequest = null;
        GoogleLongrunningOperation response = api.aiplatformProjectsLocationsFeaturestoresBatchReadFeatureValues(projectsId, locationsId, featurestoresId, uploadProtocol, oauthToken, prettyPrint, key, fields, alt, uploadType, accessToken, quotaUser, paramCallback, $xgafv, googleCloudAiplatformV1BatchReadFeatureValuesRequest);
        // TODO: test validations
    }

    /**
     * Creates a new Featurestore in a given project and location.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void aiplatformProjectsLocationsFeaturestoresCreateTest() throws ApiException {
        String projectsId = null;
        String locationsId = null;
        String featurestoreId = null;
        String uploadProtocol = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String key = null;
        String fields = null;
        String alt = null;
        String uploadType = null;
        String accessToken = null;
        String quotaUser = null;
        String paramCallback = null;
        String $xgafv = null;
        GoogleCloudAiplatformV1Featurestore googleCloudAiplatformV1Featurestore = null;
        GoogleLongrunningOperation response = api.aiplatformProjectsLocationsFeaturestoresCreate(projectsId, locationsId, featurestoreId, uploadProtocol, oauthToken, prettyPrint, key, fields, alt, uploadType, accessToken, quotaUser, paramCallback, $xgafv, googleCloudAiplatformV1Featurestore);
        // TODO: test validations
    }

    /**
     * Deletes a single Featurestore. The Featurestore must not contain any EntityTypes or &#x60;force&#x60; must be set to true for the request to succeed.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void aiplatformProjectsLocationsFeaturestoresDeleteTest() throws ApiException {
        String projectsId = null;
        String locationsId = null;
        String featurestoresId = null;
        Boolean force = null;
        String uploadProtocol = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String key = null;
        String fields = null;
        String alt = null;
        String uploadType = null;
        String accessToken = null;
        String quotaUser = null;
        String paramCallback = null;
        String $xgafv = null;
        GoogleLongrunningOperation response = api.aiplatformProjectsLocationsFeaturestoresDelete(projectsId, locationsId, featurestoresId, force, uploadProtocol, oauthToken, prettyPrint, key, fields, alt, uploadType, accessToken, quotaUser, paramCallback, $xgafv);
        // TODO: test validations
    }

    /**
     * Creates a new EntityType in a given Featurestore.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void aiplatformProjectsLocationsFeaturestoresEntityTypesCreateTest() throws ApiException {
        String projectsId = null;
        String locationsId = null;
        String featurestoresId = null;
        String entityTypeId = null;
        String uploadProtocol = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String key = null;
        String fields = null;
        String alt = null;
        String uploadType = null;
        String accessToken = null;
        String quotaUser = null;
        String paramCallback = null;
        String $xgafv = null;
        GoogleCloudAiplatformV1EntityType googleCloudAiplatformV1EntityType = null;
        GoogleLongrunningOperation response = api.aiplatformProjectsLocationsFeaturestoresEntityTypesCreate(projectsId, locationsId, featurestoresId, entityTypeId, uploadProtocol, oauthToken, prettyPrint, key, fields, alt, uploadType, accessToken, quotaUser, paramCallback, $xgafv, googleCloudAiplatformV1EntityType);
        // TODO: test validations
    }

    /**
     * Deletes a single EntityType. The EntityType must not have any Features or &#x60;force&#x60; must be set to true for the request to succeed.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void aiplatformProjectsLocationsFeaturestoresEntityTypesDeleteTest() throws ApiException {
        String projectsId = null;
        String locationsId = null;
        String featurestoresId = null;
        String entityTypesId = null;
        Boolean force = null;
        String uploadProtocol = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String key = null;
        String fields = null;
        String alt = null;
        String uploadType = null;
        String accessToken = null;
        String quotaUser = null;
        String paramCallback = null;
        String $xgafv = null;
        GoogleLongrunningOperation response = api.aiplatformProjectsLocationsFeaturestoresEntityTypesDelete(projectsId, locationsId, featurestoresId, entityTypesId, force, uploadProtocol, oauthToken, prettyPrint, key, fields, alt, uploadType, accessToken, quotaUser, paramCallback, $xgafv);
        // TODO: test validations
    }

    /**
     * Delete Feature values from Featurestore. The progress of the deletion is tracked by the returned operation. The deleted feature values are guaranteed to be invisible to subsequent read operations after the operation is marked as successfully done. If a delete feature values operation fails, the feature values returned from reads and exports may be inconsistent. If consistency is required, the caller must retry the same delete request again and wait till the new operation returned is marked as successfully done.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void aiplatformProjectsLocationsFeaturestoresEntityTypesDeleteFeatureValuesTest() throws ApiException {
        String projectsId = null;
        String locationsId = null;
        String featurestoresId = null;
        String entityTypesId = null;
        String uploadProtocol = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String key = null;
        String fields = null;
        String alt = null;
        String uploadType = null;
        String accessToken = null;
        String quotaUser = null;
        String paramCallback = null;
        String $xgafv = null;
        GoogleCloudAiplatformV1DeleteFeatureValuesRequest googleCloudAiplatformV1DeleteFeatureValuesRequest = null;
        GoogleLongrunningOperation response = api.aiplatformProjectsLocationsFeaturestoresEntityTypesDeleteFeatureValues(projectsId, locationsId, featurestoresId, entityTypesId, uploadProtocol, oauthToken, prettyPrint, key, fields, alt, uploadType, accessToken, quotaUser, paramCallback, $xgafv, googleCloudAiplatformV1DeleteFeatureValuesRequest);
        // TODO: test validations
    }

    /**
     * Exports Feature values from all the entities of a target EntityType.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void aiplatformProjectsLocationsFeaturestoresEntityTypesExportFeatureValuesTest() throws ApiException {
        String projectsId = null;
        String locationsId = null;
        String featurestoresId = null;
        String entityTypesId = null;
        String uploadProtocol = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String key = null;
        String fields = null;
        String alt = null;
        String uploadType = null;
        String accessToken = null;
        String quotaUser = null;
        String paramCallback = null;
        String $xgafv = null;
        GoogleCloudAiplatformV1ExportFeatureValuesRequest googleCloudAiplatformV1ExportFeatureValuesRequest = null;
        GoogleLongrunningOperation response = api.aiplatformProjectsLocationsFeaturestoresEntityTypesExportFeatureValues(projectsId, locationsId, featurestoresId, entityTypesId, uploadProtocol, oauthToken, prettyPrint, key, fields, alt, uploadType, accessToken, quotaUser, paramCallback, $xgafv, googleCloudAiplatformV1ExportFeatureValuesRequest);
        // TODO: test validations
    }

    /**
     * Creates a batch of Features in a given EntityType.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void aiplatformProjectsLocationsFeaturestoresEntityTypesFeaturesBatchCreateTest() throws ApiException {
        String projectsId = null;
        String locationsId = null;
        String featurestoresId = null;
        String entityTypesId = null;
        String uploadProtocol = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String key = null;
        String fields = null;
        String alt = null;
        String uploadType = null;
        String accessToken = null;
        String quotaUser = null;
        String paramCallback = null;
        String $xgafv = null;
        GoogleCloudAiplatformV1BatchCreateFeaturesRequest googleCloudAiplatformV1BatchCreateFeaturesRequest = null;
        GoogleLongrunningOperation response = api.aiplatformProjectsLocationsFeaturestoresEntityTypesFeaturesBatchCreate(projectsId, locationsId, featurestoresId, entityTypesId, uploadProtocol, oauthToken, prettyPrint, key, fields, alt, uploadType, accessToken, quotaUser, paramCallback, $xgafv, googleCloudAiplatformV1BatchCreateFeaturesRequest);
        // TODO: test validations
    }

    /**
     * Creates a new Feature in a given EntityType.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void aiplatformProjectsLocationsFeaturestoresEntityTypesFeaturesCreateTest() throws ApiException {
        String projectsId = null;
        String locationsId = null;
        String featurestoresId = null;
        String entityTypesId = null;
        String featureId = null;
        String uploadProtocol = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String key = null;
        String fields = null;
        String alt = null;
        String uploadType = null;
        String accessToken = null;
        String quotaUser = null;
        String paramCallback = null;
        String $xgafv = null;
        GoogleCloudAiplatformV1Feature googleCloudAiplatformV1Feature = null;
        GoogleLongrunningOperation response = api.aiplatformProjectsLocationsFeaturestoresEntityTypesFeaturesCreate(projectsId, locationsId, featurestoresId, entityTypesId, featureId, uploadProtocol, oauthToken, prettyPrint, key, fields, alt, uploadType, accessToken, quotaUser, paramCallback, $xgafv, googleCloudAiplatformV1Feature);
        // TODO: test validations
    }

    /**
     * Deletes a single Feature.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void aiplatformProjectsLocationsFeaturestoresEntityTypesFeaturesDeleteTest() throws ApiException {
        String projectsId = null;
        String locationsId = null;
        String featurestoresId = null;
        String entityTypesId = null;
        String featuresId = null;
        String uploadProtocol = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String key = null;
        String fields = null;
        String alt = null;
        String uploadType = null;
        String accessToken = null;
        String quotaUser = null;
        String paramCallback = null;
        String $xgafv = null;
        GoogleLongrunningOperation response = api.aiplatformProjectsLocationsFeaturestoresEntityTypesFeaturesDelete(projectsId, locationsId, featurestoresId, entityTypesId, featuresId, uploadProtocol, oauthToken, prettyPrint, key, fields, alt, uploadType, accessToken, quotaUser, paramCallback, $xgafv);
        // TODO: test validations
    }

    /**
     * Gets details of a single Feature.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void aiplatformProjectsLocationsFeaturestoresEntityTypesFeaturesGetTest() throws ApiException {
        String projectsId = null;
        String locationsId = null;
        String featurestoresId = null;
        String entityTypesId = null;
        String featuresId = null;
        String uploadProtocol = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String key = null;
        String fields = null;
        String alt = null;
        String uploadType = null;
        String accessToken = null;
        String quotaUser = null;
        String paramCallback = null;
        String $xgafv = null;
        GoogleCloudAiplatformV1Feature response = api.aiplatformProjectsLocationsFeaturestoresEntityTypesFeaturesGet(projectsId, locationsId, featurestoresId, entityTypesId, featuresId, uploadProtocol, oauthToken, prettyPrint, key, fields, alt, uploadType, accessToken, quotaUser, paramCallback, $xgafv);
        // TODO: test validations
    }

    /**
     * Lists Features in a given EntityType.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void aiplatformProjectsLocationsFeaturestoresEntityTypesFeaturesListTest() throws ApiException {
        String projectsId = null;
        String locationsId = null;
        String featurestoresId = null;
        String entityTypesId = null;
        String orderBy = null;
        Integer latestStatsCount = null;
        String pageToken = null;
        String readMask = null;
        Integer pageSize = null;
        String filter = null;
        String uploadProtocol = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String key = null;
        String fields = null;
        String alt = null;
        String uploadType = null;
        String accessToken = null;
        String quotaUser = null;
        String paramCallback = null;
        String $xgafv = null;
        GoogleCloudAiplatformV1ListFeaturesResponse response = api.aiplatformProjectsLocationsFeaturestoresEntityTypesFeaturesList(projectsId, locationsId, featurestoresId, entityTypesId, orderBy, latestStatsCount, pageToken, readMask, pageSize, filter, uploadProtocol, oauthToken, prettyPrint, key, fields, alt, uploadType, accessToken, quotaUser, paramCallback, $xgafv);
        // TODO: test validations
    }

    /**
     * Starts asynchronous cancellation on a long-running operation. The server makes a best effort to cancel the operation, but success is not guaranteed. If the server doesn&#39;t support this method, it returns &#x60;google.rpc.Code.UNIMPLEMENTED&#x60;. Clients can use Operations.GetOperation or other methods to check whether the cancellation succeeded or whether the operation completed despite cancellation. On successful cancellation, the operation is not deleted; instead, it becomes an operation with an Operation.error value with a google.rpc.Status.code of 1, corresponding to &#x60;Code.CANCELLED&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void aiplatformProjectsLocationsFeaturestoresEntityTypesFeaturesOperationsCancelTest() throws ApiException {
        String projectsId = null;
        String locationsId = null;
        String featurestoresId = null;
        String entityTypesId = null;
        String featuresId = null;
        String operationsId = null;
        String uploadProtocol = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String key = null;
        String fields = null;
        String alt = null;
        String uploadType = null;
        String accessToken = null;
        String quotaUser = null;
        String paramCallback = null;
        String $xgafv = null;
        Object response = api.aiplatformProjectsLocationsFeaturestoresEntityTypesFeaturesOperationsCancel(projectsId, locationsId, featurestoresId, entityTypesId, featuresId, operationsId, uploadProtocol, oauthToken, prettyPrint, key, fields, alt, uploadType, accessToken, quotaUser, paramCallback, $xgafv);
        // TODO: test validations
    }

    /**
     * Deletes a long-running operation. This method indicates that the client is no longer interested in the operation result. It does not cancel the operation. If the server doesn&#39;t support this method, it returns &#x60;google.rpc.Code.UNIMPLEMENTED&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void aiplatformProjectsLocationsFeaturestoresEntityTypesFeaturesOperationsDeleteTest() throws ApiException {
        String projectsId = null;
        String locationsId = null;
        String featurestoresId = null;
        String entityTypesId = null;
        String featuresId = null;
        String operationsId = null;
        String uploadProtocol = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String key = null;
        String fields = null;
        String alt = null;
        String uploadType = null;
        String accessToken = null;
        String quotaUser = null;
        String paramCallback = null;
        String $xgafv = null;
        Object response = api.aiplatformProjectsLocationsFeaturestoresEntityTypesFeaturesOperationsDelete(projectsId, locationsId, featurestoresId, entityTypesId, featuresId, operationsId, uploadProtocol, oauthToken, prettyPrint, key, fields, alt, uploadType, accessToken, quotaUser, paramCallback, $xgafv);
        // TODO: test validations
    }

    /**
     * Gets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void aiplatformProjectsLocationsFeaturestoresEntityTypesFeaturesOperationsGetTest() throws ApiException {
        String projectsId = null;
        String locationsId = null;
        String featurestoresId = null;
        String entityTypesId = null;
        String featuresId = null;
        String operationsId = null;
        String uploadProtocol = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String key = null;
        String fields = null;
        String alt = null;
        String uploadType = null;
        String accessToken = null;
        String quotaUser = null;
        String paramCallback = null;
        String $xgafv = null;
        GoogleLongrunningOperation response = api.aiplatformProjectsLocationsFeaturestoresEntityTypesFeaturesOperationsGet(projectsId, locationsId, featurestoresId, entityTypesId, featuresId, operationsId, uploadProtocol, oauthToken, prettyPrint, key, fields, alt, uploadType, accessToken, quotaUser, paramCallback, $xgafv);
        // TODO: test validations
    }

    /**
     * Lists operations that match the specified filter in the request. If the server doesn&#39;t support this method, it returns &#x60;UNIMPLEMENTED&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void aiplatformProjectsLocationsFeaturestoresEntityTypesFeaturesOperationsListTest() throws ApiException {
        String projectsId = null;
        String locationsId = null;
        String featurestoresId = null;
        String entityTypesId = null;
        String featuresId = null;
        Integer pageSize = null;
        String pageToken = null;
        String filter = null;
        String uploadProtocol = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String key = null;
        String fields = null;
        String alt = null;
        String uploadType = null;
        String accessToken = null;
        String quotaUser = null;
        String paramCallback = null;
        String $xgafv = null;
        GoogleLongrunningListOperationsResponse response = api.aiplatformProjectsLocationsFeaturestoresEntityTypesFeaturesOperationsList(projectsId, locationsId, featurestoresId, entityTypesId, featuresId, pageSize, pageToken, filter, uploadProtocol, oauthToken, prettyPrint, key, fields, alt, uploadType, accessToken, quotaUser, paramCallback, $xgafv);
        // TODO: test validations
    }

    /**
     * Waits until the specified long-running operation is done or reaches at most a specified timeout, returning the latest state. If the operation is already done, the latest state is immediately returned. If the timeout specified is greater than the default HTTP/RPC timeout, the HTTP/RPC timeout is used. If the server does not support this method, it returns &#x60;google.rpc.Code.UNIMPLEMENTED&#x60;. Note that this method is on a best-effort basis. It may return the latest state before the specified timeout (including immediately), meaning even an immediate response is no guarantee that the operation is done.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void aiplatformProjectsLocationsFeaturestoresEntityTypesFeaturesOperationsWaitTest() throws ApiException {
        String projectsId = null;
        String locationsId = null;
        String featurestoresId = null;
        String entityTypesId = null;
        String featuresId = null;
        String operationsId = null;
        String timeout = null;
        String uploadProtocol = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String key = null;
        String fields = null;
        String alt = null;
        String uploadType = null;
        String accessToken = null;
        String quotaUser = null;
        String paramCallback = null;
        String $xgafv = null;
        GoogleLongrunningOperation response = api.aiplatformProjectsLocationsFeaturestoresEntityTypesFeaturesOperationsWait(projectsId, locationsId, featurestoresId, entityTypesId, featuresId, operationsId, timeout, uploadProtocol, oauthToken, prettyPrint, key, fields, alt, uploadType, accessToken, quotaUser, paramCallback, $xgafv);
        // TODO: test validations
    }

    /**
     * Updates the parameters of a single Feature.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void aiplatformProjectsLocationsFeaturestoresEntityTypesFeaturesPatchTest() throws ApiException {
        String projectsId = null;
        String locationsId = null;
        String featurestoresId = null;
        String entityTypesId = null;
        String featuresId = null;
        String updateMask = null;
        String uploadProtocol = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String key = null;
        String fields = null;
        String alt = null;
        String uploadType = null;
        String accessToken = null;
        String quotaUser = null;
        String paramCallback = null;
        String $xgafv = null;
        GoogleCloudAiplatformV1Feature googleCloudAiplatformV1Feature = null;
        GoogleCloudAiplatformV1Feature response = api.aiplatformProjectsLocationsFeaturestoresEntityTypesFeaturesPatch(projectsId, locationsId, featurestoresId, entityTypesId, featuresId, updateMask, uploadProtocol, oauthToken, prettyPrint, key, fields, alt, uploadType, accessToken, quotaUser, paramCallback, $xgafv, googleCloudAiplatformV1Feature);
        // TODO: test validations
    }

    /**
     * Gets details of a single EntityType.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void aiplatformProjectsLocationsFeaturestoresEntityTypesGetTest() throws ApiException {
        String projectsId = null;
        String locationsId = null;
        String featurestoresId = null;
        String entityTypesId = null;
        String uploadProtocol = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String key = null;
        String fields = null;
        String alt = null;
        String uploadType = null;
        String accessToken = null;
        String quotaUser = null;
        String paramCallback = null;
        String $xgafv = null;
        GoogleCloudAiplatformV1EntityType response = api.aiplatformProjectsLocationsFeaturestoresEntityTypesGet(projectsId, locationsId, featurestoresId, entityTypesId, uploadProtocol, oauthToken, prettyPrint, key, fields, alt, uploadType, accessToken, quotaUser, paramCallback, $xgafv);
        // TODO: test validations
    }

    /**
     * Gets the access control policy for a resource. Returns an empty policy if the resource exists and does not have a policy set.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void aiplatformProjectsLocationsFeaturestoresEntityTypesGetIamPolicyTest() throws ApiException {
        String projectsId = null;
        String locationsId = null;
        String featurestoresId = null;
        String entityTypesId = null;
        Integer optionsRequestedPolicyVersion = null;
        String uploadProtocol = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String key = null;
        String fields = null;
        String alt = null;
        String uploadType = null;
        String accessToken = null;
        String quotaUser = null;
        String paramCallback = null;
        String $xgafv = null;
        GoogleIamV1Policy response = api.aiplatformProjectsLocationsFeaturestoresEntityTypesGetIamPolicy(projectsId, locationsId, featurestoresId, entityTypesId, optionsRequestedPolicyVersion, uploadProtocol, oauthToken, prettyPrint, key, fields, alt, uploadType, accessToken, quotaUser, paramCallback, $xgafv);
        // TODO: test validations
    }

    /**
     * Imports Feature values into the Featurestore from a source storage. The progress of the import is tracked by the returned operation. The imported features are guaranteed to be visible to subsequent read operations after the operation is marked as successfully done. If an import operation fails, the Feature values returned from reads and exports may be inconsistent. If consistency is required, the caller must retry the same import request again and wait till the new operation returned is marked as successfully done. There are also scenarios where the caller can cause inconsistency. - Source data for import contains multiple distinct Feature values for the same entity ID and timestamp. - Source is modified during an import. This includes adding, updating, or removing source data and/or metadata. Examples of updating metadata include but are not limited to changing storage location, storage class, or retention policy. - Online serving cluster is under-provisioned.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void aiplatformProjectsLocationsFeaturestoresEntityTypesImportFeatureValuesTest() throws ApiException {
        String projectsId = null;
        String locationsId = null;
        String featurestoresId = null;
        String entityTypesId = null;
        String uploadProtocol = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String key = null;
        String fields = null;
        String alt = null;
        String uploadType = null;
        String accessToken = null;
        String quotaUser = null;
        String paramCallback = null;
        String $xgafv = null;
        GoogleCloudAiplatformV1ImportFeatureValuesRequest googleCloudAiplatformV1ImportFeatureValuesRequest = null;
        GoogleLongrunningOperation response = api.aiplatformProjectsLocationsFeaturestoresEntityTypesImportFeatureValues(projectsId, locationsId, featurestoresId, entityTypesId, uploadProtocol, oauthToken, prettyPrint, key, fields, alt, uploadType, accessToken, quotaUser, paramCallback, $xgafv, googleCloudAiplatformV1ImportFeatureValuesRequest);
        // TODO: test validations
    }

    /**
     * Lists EntityTypes in a given Featurestore.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void aiplatformProjectsLocationsFeaturestoresEntityTypesListTest() throws ApiException {
        String projectsId = null;
        String locationsId = null;
        String featurestoresId = null;
        Integer pageSize = null;
        String filter = null;
        String readMask = null;
        String pageToken = null;
        String orderBy = null;
        String uploadProtocol = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String key = null;
        String fields = null;
        String alt = null;
        String uploadType = null;
        String accessToken = null;
        String quotaUser = null;
        String paramCallback = null;
        String $xgafv = null;
        GoogleCloudAiplatformV1ListEntityTypesResponse response = api.aiplatformProjectsLocationsFeaturestoresEntityTypesList(projectsId, locationsId, featurestoresId, pageSize, filter, readMask, pageToken, orderBy, uploadProtocol, oauthToken, prettyPrint, key, fields, alt, uploadType, accessToken, quotaUser, paramCallback, $xgafv);
        // TODO: test validations
    }

    /**
     * Starts asynchronous cancellation on a long-running operation. The server makes a best effort to cancel the operation, but success is not guaranteed. If the server doesn&#39;t support this method, it returns &#x60;google.rpc.Code.UNIMPLEMENTED&#x60;. Clients can use Operations.GetOperation or other methods to check whether the cancellation succeeded or whether the operation completed despite cancellation. On successful cancellation, the operation is not deleted; instead, it becomes an operation with an Operation.error value with a google.rpc.Status.code of 1, corresponding to &#x60;Code.CANCELLED&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void aiplatformProjectsLocationsFeaturestoresEntityTypesOperationsCancelTest() throws ApiException {
        String projectsId = null;
        String locationsId = null;
        String featurestoresId = null;
        String entityTypesId = null;
        String operationsId = null;
        String uploadProtocol = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String key = null;
        String fields = null;
        String alt = null;
        String uploadType = null;
        String accessToken = null;
        String quotaUser = null;
        String paramCallback = null;
        String $xgafv = null;
        Object response = api.aiplatformProjectsLocationsFeaturestoresEntityTypesOperationsCancel(projectsId, locationsId, featurestoresId, entityTypesId, operationsId, uploadProtocol, oauthToken, prettyPrint, key, fields, alt, uploadType, accessToken, quotaUser, paramCallback, $xgafv);
        // TODO: test validations
    }

    /**
     * Deletes a long-running operation. This method indicates that the client is no longer interested in the operation result. It does not cancel the operation. If the server doesn&#39;t support this method, it returns &#x60;google.rpc.Code.UNIMPLEMENTED&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void aiplatformProjectsLocationsFeaturestoresEntityTypesOperationsDeleteTest() throws ApiException {
        String projectsId = null;
        String locationsId = null;
        String featurestoresId = null;
        String entityTypesId = null;
        String operationsId = null;
        String uploadProtocol = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String key = null;
        String fields = null;
        String alt = null;
        String uploadType = null;
        String accessToken = null;
        String quotaUser = null;
        String paramCallback = null;
        String $xgafv = null;
        Object response = api.aiplatformProjectsLocationsFeaturestoresEntityTypesOperationsDelete(projectsId, locationsId, featurestoresId, entityTypesId, operationsId, uploadProtocol, oauthToken, prettyPrint, key, fields, alt, uploadType, accessToken, quotaUser, paramCallback, $xgafv);
        // TODO: test validations
    }

    /**
     * Gets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void aiplatformProjectsLocationsFeaturestoresEntityTypesOperationsGetTest() throws ApiException {
        String projectsId = null;
        String locationsId = null;
        String featurestoresId = null;
        String entityTypesId = null;
        String operationsId = null;
        String uploadProtocol = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String key = null;
        String fields = null;
        String alt = null;
        String uploadType = null;
        String accessToken = null;
        String quotaUser = null;
        String paramCallback = null;
        String $xgafv = null;
        GoogleLongrunningOperation response = api.aiplatformProjectsLocationsFeaturestoresEntityTypesOperationsGet(projectsId, locationsId, featurestoresId, entityTypesId, operationsId, uploadProtocol, oauthToken, prettyPrint, key, fields, alt, uploadType, accessToken, quotaUser, paramCallback, $xgafv);
        // TODO: test validations
    }

    /**
     * Lists operations that match the specified filter in the request. If the server doesn&#39;t support this method, it returns &#x60;UNIMPLEMENTED&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void aiplatformProjectsLocationsFeaturestoresEntityTypesOperationsListTest() throws ApiException {
        String projectsId = null;
        String locationsId = null;
        String featurestoresId = null;
        String entityTypesId = null;
        String pageToken = null;
        String filter = null;
        Integer pageSize = null;
        String uploadProtocol = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String key = null;
        String fields = null;
        String alt = null;
        String uploadType = null;
        String accessToken = null;
        String quotaUser = null;
        String paramCallback = null;
        String $xgafv = null;
        GoogleLongrunningListOperationsResponse response = api.aiplatformProjectsLocationsFeaturestoresEntityTypesOperationsList(projectsId, locationsId, featurestoresId, entityTypesId, pageToken, filter, pageSize, uploadProtocol, oauthToken, prettyPrint, key, fields, alt, uploadType, accessToken, quotaUser, paramCallback, $xgafv);
        // TODO: test validations
    }

    /**
     * Waits until the specified long-running operation is done or reaches at most a specified timeout, returning the latest state. If the operation is already done, the latest state is immediately returned. If the timeout specified is greater than the default HTTP/RPC timeout, the HTTP/RPC timeout is used. If the server does not support this method, it returns &#x60;google.rpc.Code.UNIMPLEMENTED&#x60;. Note that this method is on a best-effort basis. It may return the latest state before the specified timeout (including immediately), meaning even an immediate response is no guarantee that the operation is done.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void aiplatformProjectsLocationsFeaturestoresEntityTypesOperationsWaitTest() throws ApiException {
        String projectsId = null;
        String locationsId = null;
        String featurestoresId = null;
        String entityTypesId = null;
        String operationsId = null;
        String timeout = null;
        String uploadProtocol = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String key = null;
        String fields = null;
        String alt = null;
        String uploadType = null;
        String accessToken = null;
        String quotaUser = null;
        String paramCallback = null;
        String $xgafv = null;
        GoogleLongrunningOperation response = api.aiplatformProjectsLocationsFeaturestoresEntityTypesOperationsWait(projectsId, locationsId, featurestoresId, entityTypesId, operationsId, timeout, uploadProtocol, oauthToken, prettyPrint, key, fields, alt, uploadType, accessToken, quotaUser, paramCallback, $xgafv);
        // TODO: test validations
    }

    /**
     * Updates the parameters of a single EntityType.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void aiplatformProjectsLocationsFeaturestoresEntityTypesPatchTest() throws ApiException {
        String projectsId = null;
        String locationsId = null;
        String featurestoresId = null;
        String entityTypesId = null;
        String updateMask = null;
        String uploadProtocol = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String key = null;
        String fields = null;
        String alt = null;
        String uploadType = null;
        String accessToken = null;
        String quotaUser = null;
        String paramCallback = null;
        String $xgafv = null;
        GoogleCloudAiplatformV1EntityType googleCloudAiplatformV1EntityType = null;
        GoogleCloudAiplatformV1EntityType response = api.aiplatformProjectsLocationsFeaturestoresEntityTypesPatch(projectsId, locationsId, featurestoresId, entityTypesId, updateMask, uploadProtocol, oauthToken, prettyPrint, key, fields, alt, uploadType, accessToken, quotaUser, paramCallback, $xgafv, googleCloudAiplatformV1EntityType);
        // TODO: test validations
    }

    /**
     * Reads Feature values of a specific entity of an EntityType. For reading feature values of multiple entities of an EntityType, please use StreamingReadFeatureValues.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void aiplatformProjectsLocationsFeaturestoresEntityTypesReadFeatureValuesTest() throws ApiException {
        String projectsId = null;
        String locationsId = null;
        String featurestoresId = null;
        String entityTypesId = null;
        String uploadProtocol = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String key = null;
        String fields = null;
        String alt = null;
        String uploadType = null;
        String accessToken = null;
        String quotaUser = null;
        String paramCallback = null;
        String $xgafv = null;
        GoogleCloudAiplatformV1ReadFeatureValuesRequest googleCloudAiplatformV1ReadFeatureValuesRequest = null;
        GoogleCloudAiplatformV1ReadFeatureValuesResponse response = api.aiplatformProjectsLocationsFeaturestoresEntityTypesReadFeatureValues(projectsId, locationsId, featurestoresId, entityTypesId, uploadProtocol, oauthToken, prettyPrint, key, fields, alt, uploadType, accessToken, quotaUser, paramCallback, $xgafv, googleCloudAiplatformV1ReadFeatureValuesRequest);
        // TODO: test validations
    }

    /**
     * Sets the access control policy on the specified resource. Replaces any existing policy. Can return &#x60;NOT_FOUND&#x60;, &#x60;INVALID_ARGUMENT&#x60;, and &#x60;PERMISSION_DENIED&#x60; errors.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void aiplatformProjectsLocationsFeaturestoresEntityTypesSetIamPolicyTest() throws ApiException {
        String projectsId = null;
        String locationsId = null;
        String featurestoresId = null;
        String entityTypesId = null;
        String uploadProtocol = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String key = null;
        String fields = null;
        String alt = null;
        String uploadType = null;
        String accessToken = null;
        String quotaUser = null;
        String paramCallback = null;
        String $xgafv = null;
        GoogleIamV1SetIamPolicyRequest googleIamV1SetIamPolicyRequest = null;
        GoogleIamV1Policy response = api.aiplatformProjectsLocationsFeaturestoresEntityTypesSetIamPolicy(projectsId, locationsId, featurestoresId, entityTypesId, uploadProtocol, oauthToken, prettyPrint, key, fields, alt, uploadType, accessToken, quotaUser, paramCallback, $xgafv, googleIamV1SetIamPolicyRequest);
        // TODO: test validations
    }

    /**
     * Reads Feature values for multiple entities. Depending on their size, data for different entities may be broken up across multiple responses.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void aiplatformProjectsLocationsFeaturestoresEntityTypesStreamingReadFeatureValuesTest() throws ApiException {
        String projectsId = null;
        String locationsId = null;
        String featurestoresId = null;
        String entityTypesId = null;
        String uploadProtocol = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String key = null;
        String fields = null;
        String alt = null;
        String uploadType = null;
        String accessToken = null;
        String quotaUser = null;
        String paramCallback = null;
        String $xgafv = null;
        GoogleCloudAiplatformV1StreamingReadFeatureValuesRequest googleCloudAiplatformV1StreamingReadFeatureValuesRequest = null;
        GoogleCloudAiplatformV1ReadFeatureValuesResponse response = api.aiplatformProjectsLocationsFeaturestoresEntityTypesStreamingReadFeatureValues(projectsId, locationsId, featurestoresId, entityTypesId, uploadProtocol, oauthToken, prettyPrint, key, fields, alt, uploadType, accessToken, quotaUser, paramCallback, $xgafv, googleCloudAiplatformV1StreamingReadFeatureValuesRequest);
        // TODO: test validations
    }

    /**
     * Returns permissions that a caller has on the specified resource. If the resource does not exist, this will return an empty set of permissions, not a &#x60;NOT_FOUND&#x60; error. Note: This operation is designed to be used for building permission-aware UIs and command-line tools, not for authorization checking. This operation may \&quot;fail open\&quot; without warning.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void aiplatformProjectsLocationsFeaturestoresEntityTypesTestIamPermissionsTest() throws ApiException {
        String projectsId = null;
        String locationsId = null;
        String featurestoresId = null;
        String entityTypesId = null;
        String permissions = null;
        String uploadProtocol = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String key = null;
        String fields = null;
        String alt = null;
        String uploadType = null;
        String accessToken = null;
        String quotaUser = null;
        String paramCallback = null;
        String $xgafv = null;
        GoogleIamV1TestIamPermissionsResponse response = api.aiplatformProjectsLocationsFeaturestoresEntityTypesTestIamPermissions(projectsId, locationsId, featurestoresId, entityTypesId, permissions, uploadProtocol, oauthToken, prettyPrint, key, fields, alt, uploadType, accessToken, quotaUser, paramCallback, $xgafv);
        // TODO: test validations
    }

    /**
     * Writes Feature values of one or more entities of an EntityType. The Feature values are merged into existing entities if any. The Feature values to be written must have timestamp within the online storage retention.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void aiplatformProjectsLocationsFeaturestoresEntityTypesWriteFeatureValuesTest() throws ApiException {
        String projectsId = null;
        String locationsId = null;
        String featurestoresId = null;
        String entityTypesId = null;
        String uploadProtocol = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String key = null;
        String fields = null;
        String alt = null;
        String uploadType = null;
        String accessToken = null;
        String quotaUser = null;
        String paramCallback = null;
        String $xgafv = null;
        GoogleCloudAiplatformV1WriteFeatureValuesRequest googleCloudAiplatformV1WriteFeatureValuesRequest = null;
        Object response = api.aiplatformProjectsLocationsFeaturestoresEntityTypesWriteFeatureValues(projectsId, locationsId, featurestoresId, entityTypesId, uploadProtocol, oauthToken, prettyPrint, key, fields, alt, uploadType, accessToken, quotaUser, paramCallback, $xgafv, googleCloudAiplatformV1WriteFeatureValuesRequest);
        // TODO: test validations
    }

    /**
     * Gets details of a single Featurestore.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void aiplatformProjectsLocationsFeaturestoresGetTest() throws ApiException {
        String projectsId = null;
        String locationsId = null;
        String featurestoresId = null;
        String uploadProtocol = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String key = null;
        String fields = null;
        String alt = null;
        String uploadType = null;
        String accessToken = null;
        String quotaUser = null;
        String paramCallback = null;
        String $xgafv = null;
        GoogleCloudAiplatformV1Featurestore response = api.aiplatformProjectsLocationsFeaturestoresGet(projectsId, locationsId, featurestoresId, uploadProtocol, oauthToken, prettyPrint, key, fields, alt, uploadType, accessToken, quotaUser, paramCallback, $xgafv);
        // TODO: test validations
    }

    /**
     * Gets the access control policy for a resource. Returns an empty policy if the resource exists and does not have a policy set.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void aiplatformProjectsLocationsFeaturestoresGetIamPolicyTest() throws ApiException {
        String projectsId = null;
        String locationsId = null;
        String featurestoresId = null;
        Integer optionsRequestedPolicyVersion = null;
        String uploadProtocol = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String key = null;
        String fields = null;
        String alt = null;
        String uploadType = null;
        String accessToken = null;
        String quotaUser = null;
        String paramCallback = null;
        String $xgafv = null;
        GoogleIamV1Policy response = api.aiplatformProjectsLocationsFeaturestoresGetIamPolicy(projectsId, locationsId, featurestoresId, optionsRequestedPolicyVersion, uploadProtocol, oauthToken, prettyPrint, key, fields, alt, uploadType, accessToken, quotaUser, paramCallback, $xgafv);
        // TODO: test validations
    }

    /**
     * Lists Featurestores in a given project and location.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void aiplatformProjectsLocationsFeaturestoresListTest() throws ApiException {
        String projectsId = null;
        String locationsId = null;
        String readMask = null;
        String pageToken = null;
        String orderBy = null;
        String filter = null;
        Integer pageSize = null;
        String uploadProtocol = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String key = null;
        String fields = null;
        String alt = null;
        String uploadType = null;
        String accessToken = null;
        String quotaUser = null;
        String paramCallback = null;
        String $xgafv = null;
        GoogleCloudAiplatformV1ListFeaturestoresResponse response = api.aiplatformProjectsLocationsFeaturestoresList(projectsId, locationsId, readMask, pageToken, orderBy, filter, pageSize, uploadProtocol, oauthToken, prettyPrint, key, fields, alt, uploadType, accessToken, quotaUser, paramCallback, $xgafv);
        // TODO: test validations
    }

    /**
     * Starts asynchronous cancellation on a long-running operation. The server makes a best effort to cancel the operation, but success is not guaranteed. If the server doesn&#39;t support this method, it returns &#x60;google.rpc.Code.UNIMPLEMENTED&#x60;. Clients can use Operations.GetOperation or other methods to check whether the cancellation succeeded or whether the operation completed despite cancellation. On successful cancellation, the operation is not deleted; instead, it becomes an operation with an Operation.error value with a google.rpc.Status.code of 1, corresponding to &#x60;Code.CANCELLED&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void aiplatformProjectsLocationsFeaturestoresOperationsCancelTest() throws ApiException {
        String projectsId = null;
        String locationsId = null;
        String featurestoresId = null;
        String operationsId = null;
        String uploadProtocol = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String key = null;
        String fields = null;
        String alt = null;
        String uploadType = null;
        String accessToken = null;
        String quotaUser = null;
        String paramCallback = null;
        String $xgafv = null;
        Object response = api.aiplatformProjectsLocationsFeaturestoresOperationsCancel(projectsId, locationsId, featurestoresId, operationsId, uploadProtocol, oauthToken, prettyPrint, key, fields, alt, uploadType, accessToken, quotaUser, paramCallback, $xgafv);
        // TODO: test validations
    }

    /**
     * Deletes a long-running operation. This method indicates that the client is no longer interested in the operation result. It does not cancel the operation. If the server doesn&#39;t support this method, it returns &#x60;google.rpc.Code.UNIMPLEMENTED&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void aiplatformProjectsLocationsFeaturestoresOperationsDeleteTest() throws ApiException {
        String projectsId = null;
        String locationsId = null;
        String featurestoresId = null;
        String operationsId = null;
        String uploadProtocol = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String key = null;
        String fields = null;
        String alt = null;
        String uploadType = null;
        String accessToken = null;
        String quotaUser = null;
        String paramCallback = null;
        String $xgafv = null;
        Object response = api.aiplatformProjectsLocationsFeaturestoresOperationsDelete(projectsId, locationsId, featurestoresId, operationsId, uploadProtocol, oauthToken, prettyPrint, key, fields, alt, uploadType, accessToken, quotaUser, paramCallback, $xgafv);
        // TODO: test validations
    }

    /**
     * Gets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void aiplatformProjectsLocationsFeaturestoresOperationsGetTest() throws ApiException {
        String projectsId = null;
        String locationsId = null;
        String featurestoresId = null;
        String operationsId = null;
        String uploadProtocol = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String key = null;
        String fields = null;
        String alt = null;
        String uploadType = null;
        String accessToken = null;
        String quotaUser = null;
        String paramCallback = null;
        String $xgafv = null;
        GoogleLongrunningOperation response = api.aiplatformProjectsLocationsFeaturestoresOperationsGet(projectsId, locationsId, featurestoresId, operationsId, uploadProtocol, oauthToken, prettyPrint, key, fields, alt, uploadType, accessToken, quotaUser, paramCallback, $xgafv);
        // TODO: test validations
    }

    /**
     * Lists operations that match the specified filter in the request. If the server doesn&#39;t support this method, it returns &#x60;UNIMPLEMENTED&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void aiplatformProjectsLocationsFeaturestoresOperationsListTest() throws ApiException {
        String projectsId = null;
        String locationsId = null;
        String featurestoresId = null;
        String filter = null;
        Integer pageSize = null;
        String pageToken = null;
        String uploadProtocol = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String key = null;
        String fields = null;
        String alt = null;
        String uploadType = null;
        String accessToken = null;
        String quotaUser = null;
        String paramCallback = null;
        String $xgafv = null;
        GoogleLongrunningListOperationsResponse response = api.aiplatformProjectsLocationsFeaturestoresOperationsList(projectsId, locationsId, featurestoresId, filter, pageSize, pageToken, uploadProtocol, oauthToken, prettyPrint, key, fields, alt, uploadType, accessToken, quotaUser, paramCallback, $xgafv);
        // TODO: test validations
    }

    /**
     * Waits until the specified long-running operation is done or reaches at most a specified timeout, returning the latest state. If the operation is already done, the latest state is immediately returned. If the timeout specified is greater than the default HTTP/RPC timeout, the HTTP/RPC timeout is used. If the server does not support this method, it returns &#x60;google.rpc.Code.UNIMPLEMENTED&#x60;. Note that this method is on a best-effort basis. It may return the latest state before the specified timeout (including immediately), meaning even an immediate response is no guarantee that the operation is done.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void aiplatformProjectsLocationsFeaturestoresOperationsWaitTest() throws ApiException {
        String projectsId = null;
        String locationsId = null;
        String featurestoresId = null;
        String operationsId = null;
        String timeout = null;
        String uploadProtocol = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String key = null;
        String fields = null;
        String alt = null;
        String uploadType = null;
        String accessToken = null;
        String quotaUser = null;
        String paramCallback = null;
        String $xgafv = null;
        GoogleLongrunningOperation response = api.aiplatformProjectsLocationsFeaturestoresOperationsWait(projectsId, locationsId, featurestoresId, operationsId, timeout, uploadProtocol, oauthToken, prettyPrint, key, fields, alt, uploadType, accessToken, quotaUser, paramCallback, $xgafv);
        // TODO: test validations
    }

    /**
     * Updates the parameters of a single Featurestore.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void aiplatformProjectsLocationsFeaturestoresPatchTest() throws ApiException {
        String projectsId = null;
        String locationsId = null;
        String featurestoresId = null;
        String updateMask = null;
        String uploadProtocol = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String key = null;
        String fields = null;
        String alt = null;
        String uploadType = null;
        String accessToken = null;
        String quotaUser = null;
        String paramCallback = null;
        String $xgafv = null;
        GoogleCloudAiplatformV1Featurestore googleCloudAiplatformV1Featurestore = null;
        GoogleLongrunningOperation response = api.aiplatformProjectsLocationsFeaturestoresPatch(projectsId, locationsId, featurestoresId, updateMask, uploadProtocol, oauthToken, prettyPrint, key, fields, alt, uploadType, accessToken, quotaUser, paramCallback, $xgafv, googleCloudAiplatformV1Featurestore);
        // TODO: test validations
    }

    /**
     * Searches Features matching a query in a given project.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void aiplatformProjectsLocationsFeaturestoresSearchFeaturesTest() throws ApiException {
        String projectsId = null;
        String locationsId = null;
        Integer pageSize = null;
        String query = null;
        String pageToken = null;
        String uploadProtocol = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String key = null;
        String fields = null;
        String alt = null;
        String uploadType = null;
        String accessToken = null;
        String quotaUser = null;
        String paramCallback = null;
        String $xgafv = null;
        GoogleCloudAiplatformV1SearchFeaturesResponse response = api.aiplatformProjectsLocationsFeaturestoresSearchFeatures(projectsId, locationsId, pageSize, query, pageToken, uploadProtocol, oauthToken, prettyPrint, key, fields, alt, uploadType, accessToken, quotaUser, paramCallback, $xgafv);
        // TODO: test validations
    }

    /**
     * Sets the access control policy on the specified resource. Replaces any existing policy. Can return &#x60;NOT_FOUND&#x60;, &#x60;INVALID_ARGUMENT&#x60;, and &#x60;PERMISSION_DENIED&#x60; errors.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void aiplatformProjectsLocationsFeaturestoresSetIamPolicyTest() throws ApiException {
        String projectsId = null;
        String locationsId = null;
        String featurestoresId = null;
        String uploadProtocol = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String key = null;
        String fields = null;
        String alt = null;
        String uploadType = null;
        String accessToken = null;
        String quotaUser = null;
        String paramCallback = null;
        String $xgafv = null;
        GoogleIamV1SetIamPolicyRequest googleIamV1SetIamPolicyRequest = null;
        GoogleIamV1Policy response = api.aiplatformProjectsLocationsFeaturestoresSetIamPolicy(projectsId, locationsId, featurestoresId, uploadProtocol, oauthToken, prettyPrint, key, fields, alt, uploadType, accessToken, quotaUser, paramCallback, $xgafv, googleIamV1SetIamPolicyRequest);
        // TODO: test validations
    }

    /**
     * Returns permissions that a caller has on the specified resource. If the resource does not exist, this will return an empty set of permissions, not a &#x60;NOT_FOUND&#x60; error. Note: This operation is designed to be used for building permission-aware UIs and command-line tools, not for authorization checking. This operation may \&quot;fail open\&quot; without warning.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void aiplatformProjectsLocationsFeaturestoresTestIamPermissionsTest() throws ApiException {
        String projectsId = null;
        String locationsId = null;
        String featurestoresId = null;
        String permissions = null;
        String uploadProtocol = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String key = null;
        String fields = null;
        String alt = null;
        String uploadType = null;
        String accessToken = null;
        String quotaUser = null;
        String paramCallback = null;
        String $xgafv = null;
        GoogleIamV1TestIamPermissionsResponse response = api.aiplatformProjectsLocationsFeaturestoresTestIamPermissions(projectsId, locationsId, featurestoresId, permissions, uploadProtocol, oauthToken, prettyPrint, key, fields, alt, uploadType, accessToken, quotaUser, paramCallback, $xgafv);
        // TODO: test validations
    }

    /**
     * Gets information about a location.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void aiplatformProjectsLocationsGetTest() throws ApiException {
        String projectsId = null;
        String locationsId = null;
        String uploadProtocol = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String key = null;
        String fields = null;
        String alt = null;
        String uploadType = null;
        String accessToken = null;
        String quotaUser = null;
        String paramCallback = null;
        String $xgafv = null;
        GoogleCloudLocationLocation response = api.aiplatformProjectsLocationsGet(projectsId, locationsId, uploadProtocol, oauthToken, prettyPrint, key, fields, alt, uploadType, accessToken, quotaUser, paramCallback, $xgafv);
        // TODO: test validations
    }

    /**
     * Cancels a HyperparameterTuningJob. Starts asynchronous cancellation on the HyperparameterTuningJob. The server makes a best effort to cancel the job, but success is not guaranteed. Clients can use JobService.GetHyperparameterTuningJob or other methods to check whether the cancellation succeeded or whether the job completed despite cancellation. On successful cancellation, the HyperparameterTuningJob is not deleted; instead it becomes a job with a HyperparameterTuningJob.error value with a google.rpc.Status.code of 1, corresponding to &#x60;Code.CANCELLED&#x60;, and HyperparameterTuningJob.state is set to &#x60;CANCELLED&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void aiplatformProjectsLocationsHyperparameterTuningJobsCancelTest() throws ApiException {
        String projectsId = null;
        String locationsId = null;
        String hyperparameterTuningJobsId = null;
        String uploadProtocol = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String key = null;
        String fields = null;
        String alt = null;
        String uploadType = null;
        String accessToken = null;
        String quotaUser = null;
        String paramCallback = null;
        String $xgafv = null;
        Object body = null;
        Object response = api.aiplatformProjectsLocationsHyperparameterTuningJobsCancel(projectsId, locationsId, hyperparameterTuningJobsId, uploadProtocol, oauthToken, prettyPrint, key, fields, alt, uploadType, accessToken, quotaUser, paramCallback, $xgafv, body);
        // TODO: test validations
    }

    /**
     * Creates a HyperparameterTuningJob
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void aiplatformProjectsLocationsHyperparameterTuningJobsCreateTest() throws ApiException {
        String projectsId = null;
        String locationsId = null;
        String uploadProtocol = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String key = null;
        String fields = null;
        String alt = null;
        String uploadType = null;
        String accessToken = null;
        String quotaUser = null;
        String paramCallback = null;
        String $xgafv = null;
        GoogleCloudAiplatformV1HyperparameterTuningJob googleCloudAiplatformV1HyperparameterTuningJob = null;
        GoogleCloudAiplatformV1HyperparameterTuningJob response = api.aiplatformProjectsLocationsHyperparameterTuningJobsCreate(projectsId, locationsId, uploadProtocol, oauthToken, prettyPrint, key, fields, alt, uploadType, accessToken, quotaUser, paramCallback, $xgafv, googleCloudAiplatformV1HyperparameterTuningJob);
        // TODO: test validations
    }

    /**
     * Deletes a HyperparameterTuningJob.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void aiplatformProjectsLocationsHyperparameterTuningJobsDeleteTest() throws ApiException {
        String projectsId = null;
        String locationsId = null;
        String hyperparameterTuningJobsId = null;
        String uploadProtocol = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String key = null;
        String fields = null;
        String alt = null;
        String uploadType = null;
        String accessToken = null;
        String quotaUser = null;
        String paramCallback = null;
        String $xgafv = null;
        GoogleLongrunningOperation response = api.aiplatformProjectsLocationsHyperparameterTuningJobsDelete(projectsId, locationsId, hyperparameterTuningJobsId, uploadProtocol, oauthToken, prettyPrint, key, fields, alt, uploadType, accessToken, quotaUser, paramCallback, $xgafv);
        // TODO: test validations
    }

    /**
     * Gets a HyperparameterTuningJob
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void aiplatformProjectsLocationsHyperparameterTuningJobsGetTest() throws ApiException {
        String projectsId = null;
        String locationsId = null;
        String hyperparameterTuningJobsId = null;
        String uploadProtocol = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String key = null;
        String fields = null;
        String alt = null;
        String uploadType = null;
        String accessToken = null;
        String quotaUser = null;
        String paramCallback = null;
        String $xgafv = null;
        GoogleCloudAiplatformV1HyperparameterTuningJob response = api.aiplatformProjectsLocationsHyperparameterTuningJobsGet(projectsId, locationsId, hyperparameterTuningJobsId, uploadProtocol, oauthToken, prettyPrint, key, fields, alt, uploadType, accessToken, quotaUser, paramCallback, $xgafv);
        // TODO: test validations
    }

    /**
     * Lists HyperparameterTuningJobs in a Location.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void aiplatformProjectsLocationsHyperparameterTuningJobsListTest() throws ApiException {
        String projectsId = null;
        String locationsId = null;
        String pageToken = null;
        Integer pageSize = null;
        String readMask = null;
        String filter = null;
        String uploadProtocol = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String key = null;
        String fields = null;
        String alt = null;
        String uploadType = null;
        String accessToken = null;
        String quotaUser = null;
        String paramCallback = null;
        String $xgafv = null;
        GoogleCloudAiplatformV1ListHyperparameterTuningJobsResponse response = api.aiplatformProjectsLocationsHyperparameterTuningJobsList(projectsId, locationsId, pageToken, pageSize, readMask, filter, uploadProtocol, oauthToken, prettyPrint, key, fields, alt, uploadType, accessToken, quotaUser, paramCallback, $xgafv);
        // TODO: test validations
    }

    /**
     * Starts asynchronous cancellation on a long-running operation. The server makes a best effort to cancel the operation, but success is not guaranteed. If the server doesn&#39;t support this method, it returns &#x60;google.rpc.Code.UNIMPLEMENTED&#x60;. Clients can use Operations.GetOperation or other methods to check whether the cancellation succeeded or whether the operation completed despite cancellation. On successful cancellation, the operation is not deleted; instead, it becomes an operation with an Operation.error value with a google.rpc.Status.code of 1, corresponding to &#x60;Code.CANCELLED&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void aiplatformProjectsLocationsHyperparameterTuningJobsOperationsCancelTest() throws ApiException {
        String projectsId = null;
        String locationsId = null;
        String hyperparameterTuningJobsId = null;
        String operationsId = null;
        String uploadProtocol = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String key = null;
        String fields = null;
        String alt = null;
        String uploadType = null;
        String accessToken = null;
        String quotaUser = null;
        String paramCallback = null;
        String $xgafv = null;
        Object response = api.aiplatformProjectsLocationsHyperparameterTuningJobsOperationsCancel(projectsId, locationsId, hyperparameterTuningJobsId, operationsId, uploadProtocol, oauthToken, prettyPrint, key, fields, alt, uploadType, accessToken, quotaUser, paramCallback, $xgafv);
        // TODO: test validations
    }

    /**
     * Deletes a long-running operation. This method indicates that the client is no longer interested in the operation result. It does not cancel the operation. If the server doesn&#39;t support this method, it returns &#x60;google.rpc.Code.UNIMPLEMENTED&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void aiplatformProjectsLocationsHyperparameterTuningJobsOperationsDeleteTest() throws ApiException {
        String projectsId = null;
        String locationsId = null;
        String hyperparameterTuningJobsId = null;
        String operationsId = null;
        String uploadProtocol = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String key = null;
        String fields = null;
        String alt = null;
        String uploadType = null;
        String accessToken = null;
        String quotaUser = null;
        String paramCallback = null;
        String $xgafv = null;
        Object response = api.aiplatformProjectsLocationsHyperparameterTuningJobsOperationsDelete(projectsId, locationsId, hyperparameterTuningJobsId, operationsId, uploadProtocol, oauthToken, prettyPrint, key, fields, alt, uploadType, accessToken, quotaUser, paramCallback, $xgafv);
        // TODO: test validations
    }

    /**
     * Gets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void aiplatformProjectsLocationsHyperparameterTuningJobsOperationsGetTest() throws ApiException {
        String projectsId = null;
        String locationsId = null;
        String hyperparameterTuningJobsId = null;
        String operationsId = null;
        String uploadProtocol = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String key = null;
        String fields = null;
        String alt = null;
        String uploadType = null;
        String accessToken = null;
        String quotaUser = null;
        String paramCallback = null;
        String $xgafv = null;
        GoogleLongrunningOperation response = api.aiplatformProjectsLocationsHyperparameterTuningJobsOperationsGet(projectsId, locationsId, hyperparameterTuningJobsId, operationsId, uploadProtocol, oauthToken, prettyPrint, key, fields, alt, uploadType, accessToken, quotaUser, paramCallback, $xgafv);
        // TODO: test validations
    }

    /**
     * Lists operations that match the specified filter in the request. If the server doesn&#39;t support this method, it returns &#x60;UNIMPLEMENTED&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void aiplatformProjectsLocationsHyperparameterTuningJobsOperationsListTest() throws ApiException {
        String projectsId = null;
        String locationsId = null;
        String hyperparameterTuningJobsId = null;
        String filter = null;
        Integer pageSize = null;
        String pageToken = null;
        String uploadProtocol = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String key = null;
        String fields = null;
        String alt = null;
        String uploadType = null;
        String accessToken = null;
        String quotaUser = null;
        String paramCallback = null;
        String $xgafv = null;
        GoogleLongrunningListOperationsResponse response = api.aiplatformProjectsLocationsHyperparameterTuningJobsOperationsList(projectsId, locationsId, hyperparameterTuningJobsId, filter, pageSize, pageToken, uploadProtocol, oauthToken, prettyPrint, key, fields, alt, uploadType, accessToken, quotaUser, paramCallback, $xgafv);
        // TODO: test validations
    }

    /**
     * Waits until the specified long-running operation is done or reaches at most a specified timeout, returning the latest state. If the operation is already done, the latest state is immediately returned. If the timeout specified is greater than the default HTTP/RPC timeout, the HTTP/RPC timeout is used. If the server does not support this method, it returns &#x60;google.rpc.Code.UNIMPLEMENTED&#x60;. Note that this method is on a best-effort basis. It may return the latest state before the specified timeout (including immediately), meaning even an immediate response is no guarantee that the operation is done.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void aiplatformProjectsLocationsHyperparameterTuningJobsOperationsWaitTest() throws ApiException {
        String projectsId = null;
        String locationsId = null;
        String hyperparameterTuningJobsId = null;
        String operationsId = null;
        String timeout = null;
        String uploadProtocol = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String key = null;
        String fields = null;
        String alt = null;
        String uploadType = null;
        String accessToken = null;
        String quotaUser = null;
        String paramCallback = null;
        String $xgafv = null;
        GoogleLongrunningOperation response = api.aiplatformProjectsLocationsHyperparameterTuningJobsOperationsWait(projectsId, locationsId, hyperparameterTuningJobsId, operationsId, timeout, uploadProtocol, oauthToken, prettyPrint, key, fields, alt, uploadType, accessToken, quotaUser, paramCallback, $xgafv);
        // TODO: test validations
    }

    /**
     * Creates an IndexEndpoint.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void aiplatformProjectsLocationsIndexEndpointsCreateTest() throws ApiException {
        String projectsId = null;
        String locationsId = null;
        String uploadProtocol = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String key = null;
        String fields = null;
        String alt = null;
        String uploadType = null;
        String accessToken = null;
        String quotaUser = null;
        String paramCallback = null;
        String $xgafv = null;
        GoogleCloudAiplatformV1IndexEndpoint googleCloudAiplatformV1IndexEndpoint = null;
        GoogleLongrunningOperation response = api.aiplatformProjectsLocationsIndexEndpointsCreate(projectsId, locationsId, uploadProtocol, oauthToken, prettyPrint, key, fields, alt, uploadType, accessToken, quotaUser, paramCallback, $xgafv, googleCloudAiplatformV1IndexEndpoint);
        // TODO: test validations
    }

    /**
     * Deletes an IndexEndpoint.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void aiplatformProjectsLocationsIndexEndpointsDeleteTest() throws ApiException {
        String projectsId = null;
        String locationsId = null;
        String indexEndpointsId = null;
        String uploadProtocol = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String key = null;
        String fields = null;
        String alt = null;
        String uploadType = null;
        String accessToken = null;
        String quotaUser = null;
        String paramCallback = null;
        String $xgafv = null;
        GoogleLongrunningOperation response = api.aiplatformProjectsLocationsIndexEndpointsDelete(projectsId, locationsId, indexEndpointsId, uploadProtocol, oauthToken, prettyPrint, key, fields, alt, uploadType, accessToken, quotaUser, paramCallback, $xgafv);
        // TODO: test validations
    }

    /**
     * Deploys an Index into this IndexEndpoint, creating a DeployedIndex within it. Only non-empty Indexes can be deployed.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void aiplatformProjectsLocationsIndexEndpointsDeployIndexTest() throws ApiException {
        String projectsId = null;
        String locationsId = null;
        String indexEndpointsId = null;
        String uploadProtocol = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String key = null;
        String fields = null;
        String alt = null;
        String uploadType = null;
        String accessToken = null;
        String quotaUser = null;
        String paramCallback = null;
        String $xgafv = null;
        GoogleCloudAiplatformV1DeployIndexRequest googleCloudAiplatformV1DeployIndexRequest = null;
        GoogleLongrunningOperation response = api.aiplatformProjectsLocationsIndexEndpointsDeployIndex(projectsId, locationsId, indexEndpointsId, uploadProtocol, oauthToken, prettyPrint, key, fields, alt, uploadType, accessToken, quotaUser, paramCallback, $xgafv, googleCloudAiplatformV1DeployIndexRequest);
        // TODO: test validations
    }

    /**
     * Finds the nearest neighbors of each vector within the request.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void aiplatformProjectsLocationsIndexEndpointsFindNeighborsTest() throws ApiException {
        String projectsId = null;
        String locationsId = null;
        String indexEndpointsId = null;
        String uploadProtocol = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String key = null;
        String fields = null;
        String alt = null;
        String uploadType = null;
        String accessToken = null;
        String quotaUser = null;
        String paramCallback = null;
        String $xgafv = null;
        GoogleCloudAiplatformV1FindNeighborsRequest googleCloudAiplatformV1FindNeighborsRequest = null;
        GoogleCloudAiplatformV1FindNeighborsResponse response = api.aiplatformProjectsLocationsIndexEndpointsFindNeighbors(projectsId, locationsId, indexEndpointsId, uploadProtocol, oauthToken, prettyPrint, key, fields, alt, uploadType, accessToken, quotaUser, paramCallback, $xgafv, googleCloudAiplatformV1FindNeighborsRequest);
        // TODO: test validations
    }

    /**
     * Gets an IndexEndpoint.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void aiplatformProjectsLocationsIndexEndpointsGetTest() throws ApiException {
        String projectsId = null;
        String locationsId = null;
        String indexEndpointsId = null;
        String uploadProtocol = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String key = null;
        String fields = null;
        String alt = null;
        String uploadType = null;
        String accessToken = null;
        String quotaUser = null;
        String paramCallback = null;
        String $xgafv = null;
        GoogleCloudAiplatformV1IndexEndpoint response = api.aiplatformProjectsLocationsIndexEndpointsGet(projectsId, locationsId, indexEndpointsId, uploadProtocol, oauthToken, prettyPrint, key, fields, alt, uploadType, accessToken, quotaUser, paramCallback, $xgafv);
        // TODO: test validations
    }

    /**
     * Lists IndexEndpoints in a Location.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void aiplatformProjectsLocationsIndexEndpointsListTest() throws ApiException {
        String projectsId = null;
        String locationsId = null;
        String pageToken = null;
        String filter = null;
        Integer pageSize = null;
        String readMask = null;
        String uploadProtocol = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String key = null;
        String fields = null;
        String alt = null;
        String uploadType = null;
        String accessToken = null;
        String quotaUser = null;
        String paramCallback = null;
        String $xgafv = null;
        GoogleCloudAiplatformV1ListIndexEndpointsResponse response = api.aiplatformProjectsLocationsIndexEndpointsList(projectsId, locationsId, pageToken, filter, pageSize, readMask, uploadProtocol, oauthToken, prettyPrint, key, fields, alt, uploadType, accessToken, quotaUser, paramCallback, $xgafv);
        // TODO: test validations
    }

    /**
     * Update an existing DeployedIndex under an IndexEndpoint.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void aiplatformProjectsLocationsIndexEndpointsMutateDeployedIndexTest() throws ApiException {
        String projectsId = null;
        String locationsId = null;
        String indexEndpointsId = null;
        String uploadProtocol = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String key = null;
        String fields = null;
        String alt = null;
        String uploadType = null;
        String accessToken = null;
        String quotaUser = null;
        String paramCallback = null;
        String $xgafv = null;
        GoogleCloudAiplatformV1DeployedIndex googleCloudAiplatformV1DeployedIndex = null;
        GoogleLongrunningOperation response = api.aiplatformProjectsLocationsIndexEndpointsMutateDeployedIndex(projectsId, locationsId, indexEndpointsId, uploadProtocol, oauthToken, prettyPrint, key, fields, alt, uploadType, accessToken, quotaUser, paramCallback, $xgafv, googleCloudAiplatformV1DeployedIndex);
        // TODO: test validations
    }

    /**
     * Starts asynchronous cancellation on a long-running operation. The server makes a best effort to cancel the operation, but success is not guaranteed. If the server doesn&#39;t support this method, it returns &#x60;google.rpc.Code.UNIMPLEMENTED&#x60;. Clients can use Operations.GetOperation or other methods to check whether the cancellation succeeded or whether the operation completed despite cancellation. On successful cancellation, the operation is not deleted; instead, it becomes an operation with an Operation.error value with a google.rpc.Status.code of 1, corresponding to &#x60;Code.CANCELLED&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void aiplatformProjectsLocationsIndexEndpointsOperationsCancelTest() throws ApiException {
        String projectsId = null;
        String locationsId = null;
        String indexEndpointsId = null;
        String operationsId = null;
        String uploadProtocol = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String key = null;
        String fields = null;
        String alt = null;
        String uploadType = null;
        String accessToken = null;
        String quotaUser = null;
        String paramCallback = null;
        String $xgafv = null;
        Object response = api.aiplatformProjectsLocationsIndexEndpointsOperationsCancel(projectsId, locationsId, indexEndpointsId, operationsId, uploadProtocol, oauthToken, prettyPrint, key, fields, alt, uploadType, accessToken, quotaUser, paramCallback, $xgafv);
        // TODO: test validations
    }

    /**
     * Deletes a long-running operation. This method indicates that the client is no longer interested in the operation result. It does not cancel the operation. If the server doesn&#39;t support this method, it returns &#x60;google.rpc.Code.UNIMPLEMENTED&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void aiplatformProjectsLocationsIndexEndpointsOperationsDeleteTest() throws ApiException {
        String projectsId = null;
        String locationsId = null;
        String indexEndpointsId = null;
        String operationsId = null;
        String uploadProtocol = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String key = null;
        String fields = null;
        String alt = null;
        String uploadType = null;
        String accessToken = null;
        String quotaUser = null;
        String paramCallback = null;
        String $xgafv = null;
        Object response = api.aiplatformProjectsLocationsIndexEndpointsOperationsDelete(projectsId, locationsId, indexEndpointsId, operationsId, uploadProtocol, oauthToken, prettyPrint, key, fields, alt, uploadType, accessToken, quotaUser, paramCallback, $xgafv);
        // TODO: test validations
    }

    /**
     * Gets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void aiplatformProjectsLocationsIndexEndpointsOperationsGetTest() throws ApiException {
        String projectsId = null;
        String locationsId = null;
        String indexEndpointsId = null;
        String operationsId = null;
        String uploadProtocol = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String key = null;
        String fields = null;
        String alt = null;
        String uploadType = null;
        String accessToken = null;
        String quotaUser = null;
        String paramCallback = null;
        String $xgafv = null;
        GoogleLongrunningOperation response = api.aiplatformProjectsLocationsIndexEndpointsOperationsGet(projectsId, locationsId, indexEndpointsId, operationsId, uploadProtocol, oauthToken, prettyPrint, key, fields, alt, uploadType, accessToken, quotaUser, paramCallback, $xgafv);
        // TODO: test validations
    }

    /**
     * Lists operations that match the specified filter in the request. If the server doesn&#39;t support this method, it returns &#x60;UNIMPLEMENTED&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void aiplatformProjectsLocationsIndexEndpointsOperationsListTest() throws ApiException {
        String projectsId = null;
        String locationsId = null;
        String indexEndpointsId = null;
        String filter = null;
        String pageToken = null;
        Integer pageSize = null;
        String uploadProtocol = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String key = null;
        String fields = null;
        String alt = null;
        String uploadType = null;
        String accessToken = null;
        String quotaUser = null;
        String paramCallback = null;
        String $xgafv = null;
        GoogleLongrunningListOperationsResponse response = api.aiplatformProjectsLocationsIndexEndpointsOperationsList(projectsId, locationsId, indexEndpointsId, filter, pageToken, pageSize, uploadProtocol, oauthToken, prettyPrint, key, fields, alt, uploadType, accessToken, quotaUser, paramCallback, $xgafv);
        // TODO: test validations
    }

    /**
     * Waits until the specified long-running operation is done or reaches at most a specified timeout, returning the latest state. If the operation is already done, the latest state is immediately returned. If the timeout specified is greater than the default HTTP/RPC timeout, the HTTP/RPC timeout is used. If the server does not support this method, it returns &#x60;google.rpc.Code.UNIMPLEMENTED&#x60;. Note that this method is on a best-effort basis. It may return the latest state before the specified timeout (including immediately), meaning even an immediate response is no guarantee that the operation is done.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void aiplatformProjectsLocationsIndexEndpointsOperationsWaitTest() throws ApiException {
        String projectsId = null;
        String locationsId = null;
        String indexEndpointsId = null;
        String operationsId = null;
        String timeout = null;
        String uploadProtocol = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String key = null;
        String fields = null;
        String alt = null;
        String uploadType = null;
        String accessToken = null;
        String quotaUser = null;
        String paramCallback = null;
        String $xgafv = null;
        GoogleLongrunningOperation response = api.aiplatformProjectsLocationsIndexEndpointsOperationsWait(projectsId, locationsId, indexEndpointsId, operationsId, timeout, uploadProtocol, oauthToken, prettyPrint, key, fields, alt, uploadType, accessToken, quotaUser, paramCallback, $xgafv);
        // TODO: test validations
    }

    /**
     * Updates an IndexEndpoint.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void aiplatformProjectsLocationsIndexEndpointsPatchTest() throws ApiException {
        String projectsId = null;
        String locationsId = null;
        String indexEndpointsId = null;
        String updateMask = null;
        String uploadProtocol = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String key = null;
        String fields = null;
        String alt = null;
        String uploadType = null;
        String accessToken = null;
        String quotaUser = null;
        String paramCallback = null;
        String $xgafv = null;
        GoogleCloudAiplatformV1IndexEndpoint googleCloudAiplatformV1IndexEndpoint = null;
        GoogleCloudAiplatformV1IndexEndpoint response = api.aiplatformProjectsLocationsIndexEndpointsPatch(projectsId, locationsId, indexEndpointsId, updateMask, uploadProtocol, oauthToken, prettyPrint, key, fields, alt, uploadType, accessToken, quotaUser, paramCallback, $xgafv, googleCloudAiplatformV1IndexEndpoint);
        // TODO: test validations
    }

    /**
     * Reads the datapoints/vectors of the given IDs. A maximum of 1000 datapoints can be retrieved in a batch.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void aiplatformProjectsLocationsIndexEndpointsReadIndexDatapointsTest() throws ApiException {
        String projectsId = null;
        String locationsId = null;
        String indexEndpointsId = null;
        String uploadProtocol = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String key = null;
        String fields = null;
        String alt = null;
        String uploadType = null;
        String accessToken = null;
        String quotaUser = null;
        String paramCallback = null;
        String $xgafv = null;
        GoogleCloudAiplatformV1ReadIndexDatapointsRequest googleCloudAiplatformV1ReadIndexDatapointsRequest = null;
        GoogleCloudAiplatformV1ReadIndexDatapointsResponse response = api.aiplatformProjectsLocationsIndexEndpointsReadIndexDatapoints(projectsId, locationsId, indexEndpointsId, uploadProtocol, oauthToken, prettyPrint, key, fields, alt, uploadType, accessToken, quotaUser, paramCallback, $xgafv, googleCloudAiplatformV1ReadIndexDatapointsRequest);
        // TODO: test validations
    }

    /**
     * Undeploys an Index from an IndexEndpoint, removing a DeployedIndex from it, and freeing all resources it&#39;s using.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void aiplatformProjectsLocationsIndexEndpointsUndeployIndexTest() throws ApiException {
        String projectsId = null;
        String locationsId = null;
        String indexEndpointsId = null;
        String uploadProtocol = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String key = null;
        String fields = null;
        String alt = null;
        String uploadType = null;
        String accessToken = null;
        String quotaUser = null;
        String paramCallback = null;
        String $xgafv = null;
        GoogleCloudAiplatformV1UndeployIndexRequest googleCloudAiplatformV1UndeployIndexRequest = null;
        GoogleLongrunningOperation response = api.aiplatformProjectsLocationsIndexEndpointsUndeployIndex(projectsId, locationsId, indexEndpointsId, uploadProtocol, oauthToken, prettyPrint, key, fields, alt, uploadType, accessToken, quotaUser, paramCallback, $xgafv, googleCloudAiplatformV1UndeployIndexRequest);
        // TODO: test validations
    }

    /**
     * Creates an Index.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void aiplatformProjectsLocationsIndexesCreateTest() throws ApiException {
        String projectsId = null;
        String locationsId = null;
        String uploadProtocol = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String key = null;
        String fields = null;
        String alt = null;
        String uploadType = null;
        String accessToken = null;
        String quotaUser = null;
        String paramCallback = null;
        String $xgafv = null;
        GoogleCloudAiplatformV1Index googleCloudAiplatformV1Index = null;
        GoogleLongrunningOperation response = api.aiplatformProjectsLocationsIndexesCreate(projectsId, locationsId, uploadProtocol, oauthToken, prettyPrint, key, fields, alt, uploadType, accessToken, quotaUser, paramCallback, $xgafv, googleCloudAiplatformV1Index);
        // TODO: test validations
    }

    /**
     * Deletes an Index. An Index can only be deleted when all its DeployedIndexes had been undeployed.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void aiplatformProjectsLocationsIndexesDeleteTest() throws ApiException {
        String projectsId = null;
        String locationsId = null;
        String indexesId = null;
        String uploadProtocol = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String key = null;
        String fields = null;
        String alt = null;
        String uploadType = null;
        String accessToken = null;
        String quotaUser = null;
        String paramCallback = null;
        String $xgafv = null;
        GoogleLongrunningOperation response = api.aiplatformProjectsLocationsIndexesDelete(projectsId, locationsId, indexesId, uploadProtocol, oauthToken, prettyPrint, key, fields, alt, uploadType, accessToken, quotaUser, paramCallback, $xgafv);
        // TODO: test validations
    }

    /**
     * Gets an Index.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void aiplatformProjectsLocationsIndexesGetTest() throws ApiException {
        String projectsId = null;
        String locationsId = null;
        String indexesId = null;
        String uploadProtocol = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String key = null;
        String fields = null;
        String alt = null;
        String uploadType = null;
        String accessToken = null;
        String quotaUser = null;
        String paramCallback = null;
        String $xgafv = null;
        GoogleCloudAiplatformV1Index response = api.aiplatformProjectsLocationsIndexesGet(projectsId, locationsId, indexesId, uploadProtocol, oauthToken, prettyPrint, key, fields, alt, uploadType, accessToken, quotaUser, paramCallback, $xgafv);
        // TODO: test validations
    }

    /**
     * Lists Indexes in a Location.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void aiplatformProjectsLocationsIndexesListTest() throws ApiException {
        String projectsId = null;
        String locationsId = null;
        String pageToken = null;
        String readMask = null;
        String filter = null;
        Integer pageSize = null;
        String uploadProtocol = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String key = null;
        String fields = null;
        String alt = null;
        String uploadType = null;
        String accessToken = null;
        String quotaUser = null;
        String paramCallback = null;
        String $xgafv = null;
        GoogleCloudAiplatformV1ListIndexesResponse response = api.aiplatformProjectsLocationsIndexesList(projectsId, locationsId, pageToken, readMask, filter, pageSize, uploadProtocol, oauthToken, prettyPrint, key, fields, alt, uploadType, accessToken, quotaUser, paramCallback, $xgafv);
        // TODO: test validations
    }

    /**
     * Starts asynchronous cancellation on a long-running operation. The server makes a best effort to cancel the operation, but success is not guaranteed. If the server doesn&#39;t support this method, it returns &#x60;google.rpc.Code.UNIMPLEMENTED&#x60;. Clients can use Operations.GetOperation or other methods to check whether the cancellation succeeded or whether the operation completed despite cancellation. On successful cancellation, the operation is not deleted; instead, it becomes an operation with an Operation.error value with a google.rpc.Status.code of 1, corresponding to &#x60;Code.CANCELLED&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void aiplatformProjectsLocationsIndexesOperationsCancelTest() throws ApiException {
        String projectsId = null;
        String locationsId = null;
        String indexesId = null;
        String operationsId = null;
        String uploadProtocol = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String key = null;
        String fields = null;
        String alt = null;
        String uploadType = null;
        String accessToken = null;
        String quotaUser = null;
        String paramCallback = null;
        String $xgafv = null;
        Object response = api.aiplatformProjectsLocationsIndexesOperationsCancel(projectsId, locationsId, indexesId, operationsId, uploadProtocol, oauthToken, prettyPrint, key, fields, alt, uploadType, accessToken, quotaUser, paramCallback, $xgafv);
        // TODO: test validations
    }

    /**
     * Deletes a long-running operation. This method indicates that the client is no longer interested in the operation result. It does not cancel the operation. If the server doesn&#39;t support this method, it returns &#x60;google.rpc.Code.UNIMPLEMENTED&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void aiplatformProjectsLocationsIndexesOperationsDeleteTest() throws ApiException {
        String projectsId = null;
        String locationsId = null;
        String indexesId = null;
        String operationsId = null;
        String uploadProtocol = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String key = null;
        String fields = null;
        String alt = null;
        String uploadType = null;
        String accessToken = null;
        String quotaUser = null;
        String paramCallback = null;
        String $xgafv = null;
        Object response = api.aiplatformProjectsLocationsIndexesOperationsDelete(projectsId, locationsId, indexesId, operationsId, uploadProtocol, oauthToken, prettyPrint, key, fields, alt, uploadType, accessToken, quotaUser, paramCallback, $xgafv);
        // TODO: test validations
    }

    /**
     * Gets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void aiplatformProjectsLocationsIndexesOperationsGetTest() throws ApiException {
        String projectsId = null;
        String locationsId = null;
        String indexesId = null;
        String operationsId = null;
        String uploadProtocol = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String key = null;
        String fields = null;
        String alt = null;
        String uploadType = null;
        String accessToken = null;
        String quotaUser = null;
        String paramCallback = null;
        String $xgafv = null;
        GoogleLongrunningOperation response = api.aiplatformProjectsLocationsIndexesOperationsGet(projectsId, locationsId, indexesId, operationsId, uploadProtocol, oauthToken, prettyPrint, key, fields, alt, uploadType, accessToken, quotaUser, paramCallback, $xgafv);
        // TODO: test validations
    }

    /**
     * Lists operations that match the specified filter in the request. If the server doesn&#39;t support this method, it returns &#x60;UNIMPLEMENTED&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void aiplatformProjectsLocationsIndexesOperationsListTest() throws ApiException {
        String projectsId = null;
        String locationsId = null;
        String indexesId = null;
        String pageToken = null;
        Integer pageSize = null;
        String filter = null;
        String uploadProtocol = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String key = null;
        String fields = null;
        String alt = null;
        String uploadType = null;
        String accessToken = null;
        String quotaUser = null;
        String paramCallback = null;
        String $xgafv = null;
        GoogleLongrunningListOperationsResponse response = api.aiplatformProjectsLocationsIndexesOperationsList(projectsId, locationsId, indexesId, pageToken, pageSize, filter, uploadProtocol, oauthToken, prettyPrint, key, fields, alt, uploadType, accessToken, quotaUser, paramCallback, $xgafv);
        // TODO: test validations
    }

    /**
     * Waits until the specified long-running operation is done or reaches at most a specified timeout, returning the latest state. If the operation is already done, the latest state is immediately returned. If the timeout specified is greater than the default HTTP/RPC timeout, the HTTP/RPC timeout is used. If the server does not support this method, it returns &#x60;google.rpc.Code.UNIMPLEMENTED&#x60;. Note that this method is on a best-effort basis. It may return the latest state before the specified timeout (including immediately), meaning even an immediate response is no guarantee that the operation is done.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void aiplatformProjectsLocationsIndexesOperationsWaitTest() throws ApiException {
        String projectsId = null;
        String locationsId = null;
        String indexesId = null;
        String operationsId = null;
        String timeout = null;
        String uploadProtocol = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String key = null;
        String fields = null;
        String alt = null;
        String uploadType = null;
        String accessToken = null;
        String quotaUser = null;
        String paramCallback = null;
        String $xgafv = null;
        GoogleLongrunningOperation response = api.aiplatformProjectsLocationsIndexesOperationsWait(projectsId, locationsId, indexesId, operationsId, timeout, uploadProtocol, oauthToken, prettyPrint, key, fields, alt, uploadType, accessToken, quotaUser, paramCallback, $xgafv);
        // TODO: test validations
    }

    /**
     * Updates an Index.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void aiplatformProjectsLocationsIndexesPatchTest() throws ApiException {
        String projectsId = null;
        String locationsId = null;
        String indexesId = null;
        String updateMask = null;
        String uploadProtocol = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String key = null;
        String fields = null;
        String alt = null;
        String uploadType = null;
        String accessToken = null;
        String quotaUser = null;
        String paramCallback = null;
        String $xgafv = null;
        GoogleCloudAiplatformV1Index googleCloudAiplatformV1Index = null;
        GoogleLongrunningOperation response = api.aiplatformProjectsLocationsIndexesPatch(projectsId, locationsId, indexesId, updateMask, uploadProtocol, oauthToken, prettyPrint, key, fields, alt, uploadType, accessToken, quotaUser, paramCallback, $xgafv, googleCloudAiplatformV1Index);
        // TODO: test validations
    }

    /**
     * Remove Datapoints from an Index.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void aiplatformProjectsLocationsIndexesRemoveDatapointsTest() throws ApiException {
        String projectsId = null;
        String locationsId = null;
        String indexesId = null;
        String uploadProtocol = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String key = null;
        String fields = null;
        String alt = null;
        String uploadType = null;
        String accessToken = null;
        String quotaUser = null;
        String paramCallback = null;
        String $xgafv = null;
        GoogleCloudAiplatformV1RemoveDatapointsRequest googleCloudAiplatformV1RemoveDatapointsRequest = null;
        Object response = api.aiplatformProjectsLocationsIndexesRemoveDatapoints(projectsId, locationsId, indexesId, uploadProtocol, oauthToken, prettyPrint, key, fields, alt, uploadType, accessToken, quotaUser, paramCallback, $xgafv, googleCloudAiplatformV1RemoveDatapointsRequest);
        // TODO: test validations
    }

    /**
     * Add/update Datapoints into an Index.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void aiplatformProjectsLocationsIndexesUpsertDatapointsTest() throws ApiException {
        String projectsId = null;
        String locationsId = null;
        String indexesId = null;
        String uploadProtocol = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String key = null;
        String fields = null;
        String alt = null;
        String uploadType = null;
        String accessToken = null;
        String quotaUser = null;
        String paramCallback = null;
        String $xgafv = null;
        GoogleCloudAiplatformV1UpsertDatapointsRequest googleCloudAiplatformV1UpsertDatapointsRequest = null;
        Object response = api.aiplatformProjectsLocationsIndexesUpsertDatapoints(projectsId, locationsId, indexesId, uploadProtocol, oauthToken, prettyPrint, key, fields, alt, uploadType, accessToken, quotaUser, paramCallback, $xgafv, googleCloudAiplatformV1UpsertDatapointsRequest);
        // TODO: test validations
    }

    /**
     * Lists information about the supported locations for this service.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void aiplatformProjectsLocationsListTest() throws ApiException {
        String projectsId = null;
        String pageToken = null;
        String filter = null;
        Integer pageSize = null;
        String uploadProtocol = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String key = null;
        String fields = null;
        String alt = null;
        String uploadType = null;
        String accessToken = null;
        String quotaUser = null;
        String paramCallback = null;
        String $xgafv = null;
        GoogleCloudLocationListLocationsResponse response = api.aiplatformProjectsLocationsList(projectsId, pageToken, filter, pageSize, uploadProtocol, oauthToken, prettyPrint, key, fields, alt, uploadType, accessToken, quotaUser, paramCallback, $xgafv);
        // TODO: test validations
    }

    /**
     * Creates an Artifact associated with a MetadataStore.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void aiplatformProjectsLocationsMetadataStoresArtifactsCreateTest() throws ApiException {
        String projectsId = null;
        String locationsId = null;
        String metadataStoresId = null;
        String artifactId = null;
        String uploadProtocol = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String key = null;
        String fields = null;
        String alt = null;
        String uploadType = null;
        String accessToken = null;
        String quotaUser = null;
        String paramCallback = null;
        String $xgafv = null;
        GoogleCloudAiplatformV1Artifact googleCloudAiplatformV1Artifact = null;
        GoogleCloudAiplatformV1Artifact response = api.aiplatformProjectsLocationsMetadataStoresArtifactsCreate(projectsId, locationsId, metadataStoresId, artifactId, uploadProtocol, oauthToken, prettyPrint, key, fields, alt, uploadType, accessToken, quotaUser, paramCallback, $xgafv, googleCloudAiplatformV1Artifact);
        // TODO: test validations
    }

    /**
     * Deletes an Artifact.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void aiplatformProjectsLocationsMetadataStoresArtifactsDeleteTest() throws ApiException {
        String projectsId = null;
        String locationsId = null;
        String metadataStoresId = null;
        String artifactsId = null;
        String etag = null;
        String uploadProtocol = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String key = null;
        String fields = null;
        String alt = null;
        String uploadType = null;
        String accessToken = null;
        String quotaUser = null;
        String paramCallback = null;
        String $xgafv = null;
        GoogleLongrunningOperation response = api.aiplatformProjectsLocationsMetadataStoresArtifactsDelete(projectsId, locationsId, metadataStoresId, artifactsId, etag, uploadProtocol, oauthToken, prettyPrint, key, fields, alt, uploadType, accessToken, quotaUser, paramCallback, $xgafv);
        // TODO: test validations
    }

    /**
     * Retrieves a specific Artifact.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void aiplatformProjectsLocationsMetadataStoresArtifactsGetTest() throws ApiException {
        String projectsId = null;
        String locationsId = null;
        String metadataStoresId = null;
        String artifactsId = null;
        String uploadProtocol = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String key = null;
        String fields = null;
        String alt = null;
        String uploadType = null;
        String accessToken = null;
        String quotaUser = null;
        String paramCallback = null;
        String $xgafv = null;
        GoogleCloudAiplatformV1Artifact response = api.aiplatformProjectsLocationsMetadataStoresArtifactsGet(projectsId, locationsId, metadataStoresId, artifactsId, uploadProtocol, oauthToken, prettyPrint, key, fields, alt, uploadType, accessToken, quotaUser, paramCallback, $xgafv);
        // TODO: test validations
    }

    /**
     * Lists Artifacts in the MetadataStore.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void aiplatformProjectsLocationsMetadataStoresArtifactsListTest() throws ApiException {
        String projectsId = null;
        String locationsId = null;
        String metadataStoresId = null;
        String filter = null;
        String pageToken = null;
        String orderBy = null;
        Integer pageSize = null;
        String uploadProtocol = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String key = null;
        String fields = null;
        String alt = null;
        String uploadType = null;
        String accessToken = null;
        String quotaUser = null;
        String paramCallback = null;
        String $xgafv = null;
        GoogleCloudAiplatformV1ListArtifactsResponse response = api.aiplatformProjectsLocationsMetadataStoresArtifactsList(projectsId, locationsId, metadataStoresId, filter, pageToken, orderBy, pageSize, uploadProtocol, oauthToken, prettyPrint, key, fields, alt, uploadType, accessToken, quotaUser, paramCallback, $xgafv);
        // TODO: test validations
    }

    /**
     * Starts asynchronous cancellation on a long-running operation. The server makes a best effort to cancel the operation, but success is not guaranteed. If the server doesn&#39;t support this method, it returns &#x60;google.rpc.Code.UNIMPLEMENTED&#x60;. Clients can use Operations.GetOperation or other methods to check whether the cancellation succeeded or whether the operation completed despite cancellation. On successful cancellation, the operation is not deleted; instead, it becomes an operation with an Operation.error value with a google.rpc.Status.code of 1, corresponding to &#x60;Code.CANCELLED&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void aiplatformProjectsLocationsMetadataStoresArtifactsOperationsCancelTest() throws ApiException {
        String projectsId = null;
        String locationsId = null;
        String metadataStoresId = null;
        String artifactsId = null;
        String operationsId = null;
        String uploadProtocol = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String key = null;
        String fields = null;
        String alt = null;
        String uploadType = null;
        String accessToken = null;
        String quotaUser = null;
        String paramCallback = null;
        String $xgafv = null;
        Object response = api.aiplatformProjectsLocationsMetadataStoresArtifactsOperationsCancel(projectsId, locationsId, metadataStoresId, artifactsId, operationsId, uploadProtocol, oauthToken, prettyPrint, key, fields, alt, uploadType, accessToken, quotaUser, paramCallback, $xgafv);
        // TODO: test validations
    }

    /**
     * Deletes a long-running operation. This method indicates that the client is no longer interested in the operation result. It does not cancel the operation. If the server doesn&#39;t support this method, it returns &#x60;google.rpc.Code.UNIMPLEMENTED&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void aiplatformProjectsLocationsMetadataStoresArtifactsOperationsDeleteTest() throws ApiException {
        String projectsId = null;
        String locationsId = null;
        String metadataStoresId = null;
        String artifactsId = null;
        String operationsId = null;
        String uploadProtocol = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String key = null;
        String fields = null;
        String alt = null;
        String uploadType = null;
        String accessToken = null;
        String quotaUser = null;
        String paramCallback = null;
        String $xgafv = null;
        Object response = api.aiplatformProjectsLocationsMetadataStoresArtifactsOperationsDelete(projectsId, locationsId, metadataStoresId, artifactsId, operationsId, uploadProtocol, oauthToken, prettyPrint, key, fields, alt, uploadType, accessToken, quotaUser, paramCallback, $xgafv);
        // TODO: test validations
    }

    /**
     * Gets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void aiplatformProjectsLocationsMetadataStoresArtifactsOperationsGetTest() throws ApiException {
        String projectsId = null;
        String locationsId = null;
        String metadataStoresId = null;
        String artifactsId = null;
        String operationsId = null;
        String uploadProtocol = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String key = null;
        String fields = null;
        String alt = null;
        String uploadType = null;
        String accessToken = null;
        String quotaUser = null;
        String paramCallback = null;
        String $xgafv = null;
        GoogleLongrunningOperation response = api.aiplatformProjectsLocationsMetadataStoresArtifactsOperationsGet(projectsId, locationsId, metadataStoresId, artifactsId, operationsId, uploadProtocol, oauthToken, prettyPrint, key, fields, alt, uploadType, accessToken, quotaUser, paramCallback, $xgafv);
        // TODO: test validations
    }

    /**
     * Lists operations that match the specified filter in the request. If the server doesn&#39;t support this method, it returns &#x60;UNIMPLEMENTED&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void aiplatformProjectsLocationsMetadataStoresArtifactsOperationsListTest() throws ApiException {
        String projectsId = null;
        String locationsId = null;
        String metadataStoresId = null;
        String artifactsId = null;
        String filter = null;
        Integer pageSize = null;
        String pageToken = null;
        String uploadProtocol = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String key = null;
        String fields = null;
        String alt = null;
        String uploadType = null;
        String accessToken = null;
        String quotaUser = null;
        String paramCallback = null;
        String $xgafv = null;
        GoogleLongrunningListOperationsResponse response = api.aiplatformProjectsLocationsMetadataStoresArtifactsOperationsList(projectsId, locationsId, metadataStoresId, artifactsId, filter, pageSize, pageToken, uploadProtocol, oauthToken, prettyPrint, key, fields, alt, uploadType, accessToken, quotaUser, paramCallback, $xgafv);
        // TODO: test validations
    }

    /**
     * Waits until the specified long-running operation is done or reaches at most a specified timeout, returning the latest state. If the operation is already done, the latest state is immediately returned. If the timeout specified is greater than the default HTTP/RPC timeout, the HTTP/RPC timeout is used. If the server does not support this method, it returns &#x60;google.rpc.Code.UNIMPLEMENTED&#x60;. Note that this method is on a best-effort basis. It may return the latest state before the specified timeout (including immediately), meaning even an immediate response is no guarantee that the operation is done.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void aiplatformProjectsLocationsMetadataStoresArtifactsOperationsWaitTest() throws ApiException {
        String projectsId = null;
        String locationsId = null;
        String metadataStoresId = null;
        String artifactsId = null;
        String operationsId = null;
        String timeout = null;
        String uploadProtocol = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String key = null;
        String fields = null;
        String alt = null;
        String uploadType = null;
        String accessToken = null;
        String quotaUser = null;
        String paramCallback = null;
        String $xgafv = null;
        GoogleLongrunningOperation response = api.aiplatformProjectsLocationsMetadataStoresArtifactsOperationsWait(projectsId, locationsId, metadataStoresId, artifactsId, operationsId, timeout, uploadProtocol, oauthToken, prettyPrint, key, fields, alt, uploadType, accessToken, quotaUser, paramCallback, $xgafv);
        // TODO: test validations
    }

    /**
     * Updates a stored Artifact.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void aiplatformProjectsLocationsMetadataStoresArtifactsPatchTest() throws ApiException {
        String projectsId = null;
        String locationsId = null;
        String metadataStoresId = null;
        String artifactsId = null;
        Boolean allowMissing = null;
        String updateMask = null;
        String uploadProtocol = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String key = null;
        String fields = null;
        String alt = null;
        String uploadType = null;
        String accessToken = null;
        String quotaUser = null;
        String paramCallback = null;
        String $xgafv = null;
        GoogleCloudAiplatformV1Artifact googleCloudAiplatformV1Artifact = null;
        GoogleCloudAiplatformV1Artifact response = api.aiplatformProjectsLocationsMetadataStoresArtifactsPatch(projectsId, locationsId, metadataStoresId, artifactsId, allowMissing, updateMask, uploadProtocol, oauthToken, prettyPrint, key, fields, alt, uploadType, accessToken, quotaUser, paramCallback, $xgafv, googleCloudAiplatformV1Artifact);
        // TODO: test validations
    }

    /**
     * Purges Artifacts.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void aiplatformProjectsLocationsMetadataStoresArtifactsPurgeTest() throws ApiException {
        String projectsId = null;
        String locationsId = null;
        String metadataStoresId = null;
        String uploadProtocol = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String key = null;
        String fields = null;
        String alt = null;
        String uploadType = null;
        String accessToken = null;
        String quotaUser = null;
        String paramCallback = null;
        String $xgafv = null;
        GoogleCloudAiplatformV1PurgeArtifactsRequest googleCloudAiplatformV1PurgeArtifactsRequest = null;
        GoogleLongrunningOperation response = api.aiplatformProjectsLocationsMetadataStoresArtifactsPurge(projectsId, locationsId, metadataStoresId, uploadProtocol, oauthToken, prettyPrint, key, fields, alt, uploadType, accessToken, quotaUser, paramCallback, $xgafv, googleCloudAiplatformV1PurgeArtifactsRequest);
        // TODO: test validations
    }

    /**
     * Retrieves lineage of an Artifact represented through Artifacts and Executions connected by Event edges and returned as a LineageSubgraph.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void aiplatformProjectsLocationsMetadataStoresArtifactsQueryArtifactLineageSubgraphTest() throws ApiException {
        String projectsId = null;
        String locationsId = null;
        String metadataStoresId = null;
        String artifactsId = null;
        Integer maxHops = null;
        String filter = null;
        String uploadProtocol = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String key = null;
        String fields = null;
        String alt = null;
        String uploadType = null;
        String accessToken = null;
        String quotaUser = null;
        String paramCallback = null;
        String $xgafv = null;
        GoogleCloudAiplatformV1LineageSubgraph response = api.aiplatformProjectsLocationsMetadataStoresArtifactsQueryArtifactLineageSubgraph(projectsId, locationsId, metadataStoresId, artifactsId, maxHops, filter, uploadProtocol, oauthToken, prettyPrint, key, fields, alt, uploadType, accessToken, quotaUser, paramCallback, $xgafv);
        // TODO: test validations
    }

    /**
     * Adds a set of Artifacts and Executions to a Context. If any of the Artifacts or Executions have already been added to a Context, they are simply skipped.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void aiplatformProjectsLocationsMetadataStoresContextsAddContextArtifactsAndExecutionsTest() throws ApiException {
        String projectsId = null;
        String locationsId = null;
        String metadataStoresId = null;
        String contextsId = null;
        String uploadProtocol = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String key = null;
        String fields = null;
        String alt = null;
        String uploadType = null;
        String accessToken = null;
        String quotaUser = null;
        String paramCallback = null;
        String $xgafv = null;
        GoogleCloudAiplatformV1AddContextArtifactsAndExecutionsRequest googleCloudAiplatformV1AddContextArtifactsAndExecutionsRequest = null;
        Object response = api.aiplatformProjectsLocationsMetadataStoresContextsAddContextArtifactsAndExecutions(projectsId, locationsId, metadataStoresId, contextsId, uploadProtocol, oauthToken, prettyPrint, key, fields, alt, uploadType, accessToken, quotaUser, paramCallback, $xgafv, googleCloudAiplatformV1AddContextArtifactsAndExecutionsRequest);
        // TODO: test validations
    }

    /**
     * Adds a set of Contexts as children to a parent Context. If any of the child Contexts have already been added to the parent Context, they are simply skipped. If this call would create a cycle or cause any Context to have more than 10 parents, the request will fail with an INVALID_ARGUMENT error.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void aiplatformProjectsLocationsMetadataStoresContextsAddContextChildrenTest() throws ApiException {
        String projectsId = null;
        String locationsId = null;
        String metadataStoresId = null;
        String contextsId = null;
        String uploadProtocol = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String key = null;
        String fields = null;
        String alt = null;
        String uploadType = null;
        String accessToken = null;
        String quotaUser = null;
        String paramCallback = null;
        String $xgafv = null;
        GoogleCloudAiplatformV1AddContextChildrenRequest googleCloudAiplatformV1AddContextChildrenRequest = null;
        Object response = api.aiplatformProjectsLocationsMetadataStoresContextsAddContextChildren(projectsId, locationsId, metadataStoresId, contextsId, uploadProtocol, oauthToken, prettyPrint, key, fields, alt, uploadType, accessToken, quotaUser, paramCallback, $xgafv, googleCloudAiplatformV1AddContextChildrenRequest);
        // TODO: test validations
    }

    /**
     * Creates a Context associated with a MetadataStore.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void aiplatformProjectsLocationsMetadataStoresContextsCreateTest() throws ApiException {
        String projectsId = null;
        String locationsId = null;
        String metadataStoresId = null;
        String contextId = null;
        String uploadProtocol = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String key = null;
        String fields = null;
        String alt = null;
        String uploadType = null;
        String accessToken = null;
        String quotaUser = null;
        String paramCallback = null;
        String $xgafv = null;
        GoogleCloudAiplatformV1Context googleCloudAiplatformV1Context = null;
        GoogleCloudAiplatformV1Context response = api.aiplatformProjectsLocationsMetadataStoresContextsCreate(projectsId, locationsId, metadataStoresId, contextId, uploadProtocol, oauthToken, prettyPrint, key, fields, alt, uploadType, accessToken, quotaUser, paramCallback, $xgafv, googleCloudAiplatformV1Context);
        // TODO: test validations
    }

    /**
     * Deletes a stored Context.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void aiplatformProjectsLocationsMetadataStoresContextsDeleteTest() throws ApiException {
        String projectsId = null;
        String locationsId = null;
        String metadataStoresId = null;
        String contextsId = null;
        String etag = null;
        Boolean force = null;
        String uploadProtocol = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String key = null;
        String fields = null;
        String alt = null;
        String uploadType = null;
        String accessToken = null;
        String quotaUser = null;
        String paramCallback = null;
        String $xgafv = null;
        GoogleLongrunningOperation response = api.aiplatformProjectsLocationsMetadataStoresContextsDelete(projectsId, locationsId, metadataStoresId, contextsId, etag, force, uploadProtocol, oauthToken, prettyPrint, key, fields, alt, uploadType, accessToken, quotaUser, paramCallback, $xgafv);
        // TODO: test validations
    }

    /**
     * Retrieves a specific Context.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void aiplatformProjectsLocationsMetadataStoresContextsGetTest() throws ApiException {
        String projectsId = null;
        String locationsId = null;
        String metadataStoresId = null;
        String contextsId = null;
        String uploadProtocol = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String key = null;
        String fields = null;
        String alt = null;
        String uploadType = null;
        String accessToken = null;
        String quotaUser = null;
        String paramCallback = null;
        String $xgafv = null;
        GoogleCloudAiplatformV1Context response = api.aiplatformProjectsLocationsMetadataStoresContextsGet(projectsId, locationsId, metadataStoresId, contextsId, uploadProtocol, oauthToken, prettyPrint, key, fields, alt, uploadType, accessToken, quotaUser, paramCallback, $xgafv);
        // TODO: test validations
    }

    /**
     * Lists Contexts on the MetadataStore.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void aiplatformProjectsLocationsMetadataStoresContextsListTest() throws ApiException {
        String projectsId = null;
        String locationsId = null;
        String metadataStoresId = null;
        String filter = null;
        String orderBy = null;
        Integer pageSize = null;
        String pageToken = null;
        String uploadProtocol = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String key = null;
        String fields = null;
        String alt = null;
        String uploadType = null;
        String accessToken = null;
        String quotaUser = null;
        String paramCallback = null;
        String $xgafv = null;
        GoogleCloudAiplatformV1ListContextsResponse response = api.aiplatformProjectsLocationsMetadataStoresContextsList(projectsId, locationsId, metadataStoresId, filter, orderBy, pageSize, pageToken, uploadProtocol, oauthToken, prettyPrint, key, fields, alt, uploadType, accessToken, quotaUser, paramCallback, $xgafv);
        // TODO: test validations
    }

    /**
     * Starts asynchronous cancellation on a long-running operation. The server makes a best effort to cancel the operation, but success is not guaranteed. If the server doesn&#39;t support this method, it returns &#x60;google.rpc.Code.UNIMPLEMENTED&#x60;. Clients can use Operations.GetOperation or other methods to check whether the cancellation succeeded or whether the operation completed despite cancellation. On successful cancellation, the operation is not deleted; instead, it becomes an operation with an Operation.error value with a google.rpc.Status.code of 1, corresponding to &#x60;Code.CANCELLED&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void aiplatformProjectsLocationsMetadataStoresContextsOperationsCancelTest() throws ApiException {
        String projectsId = null;
        String locationsId = null;
        String metadataStoresId = null;
        String contextsId = null;
        String operationsId = null;
        String uploadProtocol = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String key = null;
        String fields = null;
        String alt = null;
        String uploadType = null;
        String accessToken = null;
        String quotaUser = null;
        String paramCallback = null;
        String $xgafv = null;
        Object response = api.aiplatformProjectsLocationsMetadataStoresContextsOperationsCancel(projectsId, locationsId, metadataStoresId, contextsId, operationsId, uploadProtocol, oauthToken, prettyPrint, key, fields, alt, uploadType, accessToken, quotaUser, paramCallback, $xgafv);
        // TODO: test validations
    }

    /**
     * Deletes a long-running operation. This method indicates that the client is no longer interested in the operation result. It does not cancel the operation. If the server doesn&#39;t support this method, it returns &#x60;google.rpc.Code.UNIMPLEMENTED&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void aiplatformProjectsLocationsMetadataStoresContextsOperationsDeleteTest() throws ApiException {
        String projectsId = null;
        String locationsId = null;
        String metadataStoresId = null;
        String contextsId = null;
        String operationsId = null;
        String uploadProtocol = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String key = null;
        String fields = null;
        String alt = null;
        String uploadType = null;
        String accessToken = null;
        String quotaUser = null;
        String paramCallback = null;
        String $xgafv = null;
        Object response = api.aiplatformProjectsLocationsMetadataStoresContextsOperationsDelete(projectsId, locationsId, metadataStoresId, contextsId, operationsId, uploadProtocol, oauthToken, prettyPrint, key, fields, alt, uploadType, accessToken, quotaUser, paramCallback, $xgafv);
        // TODO: test validations
    }

    /**
     * Gets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void aiplatformProjectsLocationsMetadataStoresContextsOperationsGetTest() throws ApiException {
        String projectsId = null;
        String locationsId = null;
        String metadataStoresId = null;
        String contextsId = null;
        String operationsId = null;
        String uploadProtocol = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String key = null;
        String fields = null;
        String alt = null;
        String uploadType = null;
        String accessToken = null;
        String quotaUser = null;
        String paramCallback = null;
        String $xgafv = null;
        GoogleLongrunningOperation response = api.aiplatformProjectsLocationsMetadataStoresContextsOperationsGet(projectsId, locationsId, metadataStoresId, contextsId, operationsId, uploadProtocol, oauthToken, prettyPrint, key, fields, alt, uploadType, accessToken, quotaUser, paramCallback, $xgafv);
        // TODO: test validations
    }

    /**
     * Lists operations that match the specified filter in the request. If the server doesn&#39;t support this method, it returns &#x60;UNIMPLEMENTED&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void aiplatformProjectsLocationsMetadataStoresContextsOperationsListTest() throws ApiException {
        String projectsId = null;
        String locationsId = null;
        String metadataStoresId = null;
        String contextsId = null;
        String filter = null;
        String pageToken = null;
        Integer pageSize = null;
        String uploadProtocol = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String key = null;
        String fields = null;
        String alt = null;
        String uploadType = null;
        String accessToken = null;
        String quotaUser = null;
        String paramCallback = null;
        String $xgafv = null;
        GoogleLongrunningListOperationsResponse response = api.aiplatformProjectsLocationsMetadataStoresContextsOperationsList(projectsId, locationsId, metadataStoresId, contextsId, filter, pageToken, pageSize, uploadProtocol, oauthToken, prettyPrint, key, fields, alt, uploadType, accessToken, quotaUser, paramCallback, $xgafv);
        // TODO: test validations
    }

    /**
     * Waits until the specified long-running operation is done or reaches at most a specified timeout, returning the latest state. If the operation is already done, the latest state is immediately returned. If the timeout specified is greater than the default HTTP/RPC timeout, the HTTP/RPC timeout is used. If the server does not support this method, it returns &#x60;google.rpc.Code.UNIMPLEMENTED&#x60;. Note that this method is on a best-effort basis. It may return the latest state before the specified timeout (including immediately), meaning even an immediate response is no guarantee that the operation is done.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void aiplatformProjectsLocationsMetadataStoresContextsOperationsWaitTest() throws ApiException {
        String projectsId = null;
        String locationsId = null;
        String metadataStoresId = null;
        String contextsId = null;
        String operationsId = null;
        String timeout = null;
        String uploadProtocol = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String key = null;
        String fields = null;
        String alt = null;
        String uploadType = null;
        String accessToken = null;
        String quotaUser = null;
        String paramCallback = null;
        String $xgafv = null;
        GoogleLongrunningOperation response = api.aiplatformProjectsLocationsMetadataStoresContextsOperationsWait(projectsId, locationsId, metadataStoresId, contextsId, operationsId, timeout, uploadProtocol, oauthToken, prettyPrint, key, fields, alt, uploadType, accessToken, quotaUser, paramCallback, $xgafv);
        // TODO: test validations
    }

    /**
     * Updates a stored Context.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void aiplatformProjectsLocationsMetadataStoresContextsPatchTest() throws ApiException {
        String projectsId = null;
        String locationsId = null;
        String metadataStoresId = null;
        String contextsId = null;
        Boolean allowMissing = null;
        String updateMask = null;
        String uploadProtocol = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String key = null;
        String fields = null;
        String alt = null;
        String uploadType = null;
        String accessToken = null;
        String quotaUser = null;
        String paramCallback = null;
        String $xgafv = null;
        GoogleCloudAiplatformV1Context googleCloudAiplatformV1Context = null;
        GoogleCloudAiplatformV1Context response = api.aiplatformProjectsLocationsMetadataStoresContextsPatch(projectsId, locationsId, metadataStoresId, contextsId, allowMissing, updateMask, uploadProtocol, oauthToken, prettyPrint, key, fields, alt, uploadType, accessToken, quotaUser, paramCallback, $xgafv, googleCloudAiplatformV1Context);
        // TODO: test validations
    }

    /**
     * Purges Contexts.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void aiplatformProjectsLocationsMetadataStoresContextsPurgeTest() throws ApiException {
        String projectsId = null;
        String locationsId = null;
        String metadataStoresId = null;
        String uploadProtocol = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String key = null;
        String fields = null;
        String alt = null;
        String uploadType = null;
        String accessToken = null;
        String quotaUser = null;
        String paramCallback = null;
        String $xgafv = null;
        GoogleCloudAiplatformV1PurgeContextsRequest googleCloudAiplatformV1PurgeContextsRequest = null;
        GoogleLongrunningOperation response = api.aiplatformProjectsLocationsMetadataStoresContextsPurge(projectsId, locationsId, metadataStoresId, uploadProtocol, oauthToken, prettyPrint, key, fields, alt, uploadType, accessToken, quotaUser, paramCallback, $xgafv, googleCloudAiplatformV1PurgeContextsRequest);
        // TODO: test validations
    }

    /**
     * Retrieves Artifacts and Executions within the specified Context, connected by Event edges and returned as a LineageSubgraph.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void aiplatformProjectsLocationsMetadataStoresContextsQueryContextLineageSubgraphTest() throws ApiException {
        String projectsId = null;
        String locationsId = null;
        String metadataStoresId = null;
        String contextsId = null;
        String uploadProtocol = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String key = null;
        String fields = null;
        String alt = null;
        String uploadType = null;
        String accessToken = null;
        String quotaUser = null;
        String paramCallback = null;
        String $xgafv = null;
        GoogleCloudAiplatformV1LineageSubgraph response = api.aiplatformProjectsLocationsMetadataStoresContextsQueryContextLineageSubgraph(projectsId, locationsId, metadataStoresId, contextsId, uploadProtocol, oauthToken, prettyPrint, key, fields, alt, uploadType, accessToken, quotaUser, paramCallback, $xgafv);
        // TODO: test validations
    }

    /**
     * Remove a set of children contexts from a parent Context. If any of the child Contexts were NOT added to the parent Context, they are simply skipped.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void aiplatformProjectsLocationsMetadataStoresContextsRemoveContextChildrenTest() throws ApiException {
        String projectsId = null;
        String locationsId = null;
        String metadataStoresId = null;
        String contextsId = null;
        String uploadProtocol = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String key = null;
        String fields = null;
        String alt = null;
        String uploadType = null;
        String accessToken = null;
        String quotaUser = null;
        String paramCallback = null;
        String $xgafv = null;
        GoogleCloudAiplatformV1RemoveContextChildrenRequest googleCloudAiplatformV1RemoveContextChildrenRequest = null;
        Object response = api.aiplatformProjectsLocationsMetadataStoresContextsRemoveContextChildren(projectsId, locationsId, metadataStoresId, contextsId, uploadProtocol, oauthToken, prettyPrint, key, fields, alt, uploadType, accessToken, quotaUser, paramCallback, $xgafv, googleCloudAiplatformV1RemoveContextChildrenRequest);
        // TODO: test validations
    }

    /**
     * Initializes a MetadataStore, including allocation of resources.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void aiplatformProjectsLocationsMetadataStoresCreateTest() throws ApiException {
        String projectsId = null;
        String locationsId = null;
        String metadataStoreId = null;
        String uploadProtocol = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String key = null;
        String fields = null;
        String alt = null;
        String uploadType = null;
        String accessToken = null;
        String quotaUser = null;
        String paramCallback = null;
        String $xgafv = null;
        GoogleCloudAiplatformV1MetadataStore googleCloudAiplatformV1MetadataStore = null;
        GoogleLongrunningOperation response = api.aiplatformProjectsLocationsMetadataStoresCreate(projectsId, locationsId, metadataStoreId, uploadProtocol, oauthToken, prettyPrint, key, fields, alt, uploadType, accessToken, quotaUser, paramCallback, $xgafv, googleCloudAiplatformV1MetadataStore);
        // TODO: test validations
    }

    /**
     * Deletes a single MetadataStore and all its child resources (Artifacts, Executions, and Contexts).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void aiplatformProjectsLocationsMetadataStoresDeleteTest() throws ApiException {
        String projectsId = null;
        String locationsId = null;
        String metadataStoresId = null;
        Boolean force = null;
        String uploadProtocol = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String key = null;
        String fields = null;
        String alt = null;
        String uploadType = null;
        String accessToken = null;
        String quotaUser = null;
        String paramCallback = null;
        String $xgafv = null;
        GoogleLongrunningOperation response = api.aiplatformProjectsLocationsMetadataStoresDelete(projectsId, locationsId, metadataStoresId, force, uploadProtocol, oauthToken, prettyPrint, key, fields, alt, uploadType, accessToken, quotaUser, paramCallback, $xgafv);
        // TODO: test validations
    }

    /**
     * Adds Events to the specified Execution. An Event indicates whether an Artifact was used as an input or output for an Execution. If an Event already exists between the Execution and the Artifact, the Event is skipped.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void aiplatformProjectsLocationsMetadataStoresExecutionsAddExecutionEventsTest() throws ApiException {
        String projectsId = null;
        String locationsId = null;
        String metadataStoresId = null;
        String executionsId = null;
        String uploadProtocol = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String key = null;
        String fields = null;
        String alt = null;
        String uploadType = null;
        String accessToken = null;
        String quotaUser = null;
        String paramCallback = null;
        String $xgafv = null;
        GoogleCloudAiplatformV1AddExecutionEventsRequest googleCloudAiplatformV1AddExecutionEventsRequest = null;
        Object response = api.aiplatformProjectsLocationsMetadataStoresExecutionsAddExecutionEvents(projectsId, locationsId, metadataStoresId, executionsId, uploadProtocol, oauthToken, prettyPrint, key, fields, alt, uploadType, accessToken, quotaUser, paramCallback, $xgafv, googleCloudAiplatformV1AddExecutionEventsRequest);
        // TODO: test validations
    }

    /**
     * Creates an Execution associated with a MetadataStore.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void aiplatformProjectsLocationsMetadataStoresExecutionsCreateTest() throws ApiException {
        String projectsId = null;
        String locationsId = null;
        String metadataStoresId = null;
        String executionId = null;
        String uploadProtocol = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String key = null;
        String fields = null;
        String alt = null;
        String uploadType = null;
        String accessToken = null;
        String quotaUser = null;
        String paramCallback = null;
        String $xgafv = null;
        GoogleCloudAiplatformV1Execution googleCloudAiplatformV1Execution = null;
        GoogleCloudAiplatformV1Execution response = api.aiplatformProjectsLocationsMetadataStoresExecutionsCreate(projectsId, locationsId, metadataStoresId, executionId, uploadProtocol, oauthToken, prettyPrint, key, fields, alt, uploadType, accessToken, quotaUser, paramCallback, $xgafv, googleCloudAiplatformV1Execution);
        // TODO: test validations
    }

    /**
     * Deletes an Execution.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void aiplatformProjectsLocationsMetadataStoresExecutionsDeleteTest() throws ApiException {
        String projectsId = null;
        String locationsId = null;
        String metadataStoresId = null;
        String executionsId = null;
        String etag = null;
        String uploadProtocol = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String key = null;
        String fields = null;
        String alt = null;
        String uploadType = null;
        String accessToken = null;
        String quotaUser = null;
        String paramCallback = null;
        String $xgafv = null;
        GoogleLongrunningOperation response = api.aiplatformProjectsLocationsMetadataStoresExecutionsDelete(projectsId, locationsId, metadataStoresId, executionsId, etag, uploadProtocol, oauthToken, prettyPrint, key, fields, alt, uploadType, accessToken, quotaUser, paramCallback, $xgafv);
        // TODO: test validations
    }

    /**
     * Retrieves a specific Execution.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void aiplatformProjectsLocationsMetadataStoresExecutionsGetTest() throws ApiException {
        String projectsId = null;
        String locationsId = null;
        String metadataStoresId = null;
        String executionsId = null;
        String uploadProtocol = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String key = null;
        String fields = null;
        String alt = null;
        String uploadType = null;
        String accessToken = null;
        String quotaUser = null;
        String paramCallback = null;
        String $xgafv = null;
        GoogleCloudAiplatformV1Execution response = api.aiplatformProjectsLocationsMetadataStoresExecutionsGet(projectsId, locationsId, metadataStoresId, executionsId, uploadProtocol, oauthToken, prettyPrint, key, fields, alt, uploadType, accessToken, quotaUser, paramCallback, $xgafv);
        // TODO: test validations
    }

    /**
     * Lists Executions in the MetadataStore.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void aiplatformProjectsLocationsMetadataStoresExecutionsListTest() throws ApiException {
        String projectsId = null;
        String locationsId = null;
        String metadataStoresId = null;
        Integer pageSize = null;
        String pageToken = null;
        String orderBy = null;
        String filter = null;
        String uploadProtocol = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String key = null;
        String fields = null;
        String alt = null;
        String uploadType = null;
        String accessToken = null;
        String quotaUser = null;
        String paramCallback = null;
        String $xgafv = null;
        GoogleCloudAiplatformV1ListExecutionsResponse response = api.aiplatformProjectsLocationsMetadataStoresExecutionsList(projectsId, locationsId, metadataStoresId, pageSize, pageToken, orderBy, filter, uploadProtocol, oauthToken, prettyPrint, key, fields, alt, uploadType, accessToken, quotaUser, paramCallback, $xgafv);
        // TODO: test validations
    }

    /**
     * Starts asynchronous cancellation on a long-running operation. The server makes a best effort to cancel the operation, but success is not guaranteed. If the server doesn&#39;t support this method, it returns &#x60;google.rpc.Code.UNIMPLEMENTED&#x60;. Clients can use Operations.GetOperation or other methods to check whether the cancellation succeeded or whether the operation completed despite cancellation. On successful cancellation, the operation is not deleted; instead, it becomes an operation with an Operation.error value with a google.rpc.Status.code of 1, corresponding to &#x60;Code.CANCELLED&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void aiplatformProjectsLocationsMetadataStoresExecutionsOperationsCancelTest() throws ApiException {
        String projectsId = null;
        String locationsId = null;
        String metadataStoresId = null;
        String executionsId = null;
        String operationsId = null;
        String uploadProtocol = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String key = null;
        String fields = null;
        String alt = null;
        String uploadType = null;
        String accessToken = null;
        String quotaUser = null;
        String paramCallback = null;
        String $xgafv = null;
        Object response = api.aiplatformProjectsLocationsMetadataStoresExecutionsOperationsCancel(projectsId, locationsId, metadataStoresId, executionsId, operationsId, uploadProtocol, oauthToken, prettyPrint, key, fields, alt, uploadType, accessToken, quotaUser, paramCallback, $xgafv);
        // TODO: test validations
    }

    /**
     * Deletes a long-running operation. This method indicates that the client is no longer interested in the operation result. It does not cancel the operation. If the server doesn&#39;t support this method, it returns &#x60;google.rpc.Code.UNIMPLEMENTED&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void aiplatformProjectsLocationsMetadataStoresExecutionsOperationsDeleteTest() throws ApiException {
        String projectsId = null;
        String locationsId = null;
        String metadataStoresId = null;
        String executionsId = null;
        String operationsId = null;
        String uploadProtocol = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String key = null;
        String fields = null;
        String alt = null;
        String uploadType = null;
        String accessToken = null;
        String quotaUser = null;
        String paramCallback = null;
        String $xgafv = null;
        Object response = api.aiplatformProjectsLocationsMetadataStoresExecutionsOperationsDelete(projectsId, locationsId, metadataStoresId, executionsId, operationsId, uploadProtocol, oauthToken, prettyPrint, key, fields, alt, uploadType, accessToken, quotaUser, paramCallback, $xgafv);
        // TODO: test validations
    }

    /**
     * Gets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void aiplatformProjectsLocationsMetadataStoresExecutionsOperationsGetTest() throws ApiException {
        String projectsId = null;
        String locationsId = null;
        String metadataStoresId = null;
        String executionsId = null;
        String operationsId = null;
        String uploadProtocol = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String key = null;
        String fields = null;
        String alt = null;
        String uploadType = null;
        String accessToken = null;
        String quotaUser = null;
        String paramCallback = null;
        String $xgafv = null;
        GoogleLongrunningOperation response = api.aiplatformProjectsLocationsMetadataStoresExecutionsOperationsGet(projectsId, locationsId, metadataStoresId, executionsId, operationsId, uploadProtocol, oauthToken, prettyPrint, key, fields, alt, uploadType, accessToken, quotaUser, paramCallback, $xgafv);
        // TODO: test validations
    }

    /**
     * Lists operations that match the specified filter in the request. If the server doesn&#39;t support this method, it returns &#x60;UNIMPLEMENTED&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void aiplatformProjectsLocationsMetadataStoresExecutionsOperationsListTest() throws ApiException {
        String projectsId = null;
        String locationsId = null;
        String metadataStoresId = null;
        String executionsId = null;
        String filter = null;
        String pageToken = null;
        Integer pageSize = null;
        String uploadProtocol = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String key = null;
        String fields = null;
        String alt = null;
        String uploadType = null;
        String accessToken = null;
        String quotaUser = null;
        String paramCallback = null;
        String $xgafv = null;
        GoogleLongrunningListOperationsResponse response = api.aiplatformProjectsLocationsMetadataStoresExecutionsOperationsList(projectsId, locationsId, metadataStoresId, executionsId, filter, pageToken, pageSize, uploadProtocol, oauthToken, prettyPrint, key, fields, alt, uploadType, accessToken, quotaUser, paramCallback, $xgafv);
        // TODO: test validations
    }

    /**
     * Waits until the specified long-running operation is done or reaches at most a specified timeout, returning the latest state. If the operation is already done, the latest state is immediately returned. If the timeout specified is greater than the default HTTP/RPC timeout, the HTTP/RPC timeout is used. If the server does not support this method, it returns &#x60;google.rpc.Code.UNIMPLEMENTED&#x60;. Note that this method is on a best-effort basis. It may return the latest state before the specified timeout (including immediately), meaning even an immediate response is no guarantee that the operation is done.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void aiplatformProjectsLocationsMetadataStoresExecutionsOperationsWaitTest() throws ApiException {
        String projectsId = null;
        String locationsId = null;
        String metadataStoresId = null;
        String executionsId = null;
        String operationsId = null;
        String timeout = null;
        String uploadProtocol = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String key = null;
        String fields = null;
        String alt = null;
        String uploadType = null;
        String accessToken = null;
        String quotaUser = null;
        String paramCallback = null;
        String $xgafv = null;
        GoogleLongrunningOperation response = api.aiplatformProjectsLocationsMetadataStoresExecutionsOperationsWait(projectsId, locationsId, metadataStoresId, executionsId, operationsId, timeout, uploadProtocol, oauthToken, prettyPrint, key, fields, alt, uploadType, accessToken, quotaUser, paramCallback, $xgafv);
        // TODO: test validations
    }

    /**
     * Updates a stored Execution.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void aiplatformProjectsLocationsMetadataStoresExecutionsPatchTest() throws ApiException {
        String projectsId = null;
        String locationsId = null;
        String metadataStoresId = null;
        String executionsId = null;
        String updateMask = null;
        Boolean allowMissing = null;
        String uploadProtocol = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String key = null;
        String fields = null;
        String alt = null;
        String uploadType = null;
        String accessToken = null;
        String quotaUser = null;
        String paramCallback = null;
        String $xgafv = null;
        GoogleCloudAiplatformV1Execution googleCloudAiplatformV1Execution = null;
        GoogleCloudAiplatformV1Execution response = api.aiplatformProjectsLocationsMetadataStoresExecutionsPatch(projectsId, locationsId, metadataStoresId, executionsId, updateMask, allowMissing, uploadProtocol, oauthToken, prettyPrint, key, fields, alt, uploadType, accessToken, quotaUser, paramCallback, $xgafv, googleCloudAiplatformV1Execution);
        // TODO: test validations
    }

    /**
     * Purges Executions.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void aiplatformProjectsLocationsMetadataStoresExecutionsPurgeTest() throws ApiException {
        String projectsId = null;
        String locationsId = null;
        String metadataStoresId = null;
        String uploadProtocol = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String key = null;
        String fields = null;
        String alt = null;
        String uploadType = null;
        String accessToken = null;
        String quotaUser = null;
        String paramCallback = null;
        String $xgafv = null;
        GoogleCloudAiplatformV1PurgeExecutionsRequest googleCloudAiplatformV1PurgeExecutionsRequest = null;
        GoogleLongrunningOperation response = api.aiplatformProjectsLocationsMetadataStoresExecutionsPurge(projectsId, locationsId, metadataStoresId, uploadProtocol, oauthToken, prettyPrint, key, fields, alt, uploadType, accessToken, quotaUser, paramCallback, $xgafv, googleCloudAiplatformV1PurgeExecutionsRequest);
        // TODO: test validations
    }

    /**
     * Obtains the set of input and output Artifacts for this Execution, in the form of LineageSubgraph that also contains the Execution and connecting Events.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void aiplatformProjectsLocationsMetadataStoresExecutionsQueryExecutionInputsAndOutputsTest() throws ApiException {
        String projectsId = null;
        String locationsId = null;
        String metadataStoresId = null;
        String executionsId = null;
        String uploadProtocol = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String key = null;
        String fields = null;
        String alt = null;
        String uploadType = null;
        String accessToken = null;
        String quotaUser = null;
        String paramCallback = null;
        String $xgafv = null;
        GoogleCloudAiplatformV1LineageSubgraph response = api.aiplatformProjectsLocationsMetadataStoresExecutionsQueryExecutionInputsAndOutputs(projectsId, locationsId, metadataStoresId, executionsId, uploadProtocol, oauthToken, prettyPrint, key, fields, alt, uploadType, accessToken, quotaUser, paramCallback, $xgafv);
        // TODO: test validations
    }

    /**
     * Retrieves a specific MetadataStore.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void aiplatformProjectsLocationsMetadataStoresGetTest() throws ApiException {
        String projectsId = null;
        String locationsId = null;
        String metadataStoresId = null;
        String uploadProtocol = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String key = null;
        String fields = null;
        String alt = null;
        String uploadType = null;
        String accessToken = null;
        String quotaUser = null;
        String paramCallback = null;
        String $xgafv = null;
        GoogleCloudAiplatformV1MetadataStore response = api.aiplatformProjectsLocationsMetadataStoresGet(projectsId, locationsId, metadataStoresId, uploadProtocol, oauthToken, prettyPrint, key, fields, alt, uploadType, accessToken, quotaUser, paramCallback, $xgafv);
        // TODO: test validations
    }

    /**
     * Lists MetadataStores for a Location.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void aiplatformProjectsLocationsMetadataStoresListTest() throws ApiException {
        String projectsId = null;
        String locationsId = null;
        Integer pageSize = null;
        String pageToken = null;
        String uploadProtocol = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String key = null;
        String fields = null;
        String alt = null;
        String uploadType = null;
        String accessToken = null;
        String quotaUser = null;
        String paramCallback = null;
        String $xgafv = null;
        GoogleCloudAiplatformV1ListMetadataStoresResponse response = api.aiplatformProjectsLocationsMetadataStoresList(projectsId, locationsId, pageSize, pageToken, uploadProtocol, oauthToken, prettyPrint, key, fields, alt, uploadType, accessToken, quotaUser, paramCallback, $xgafv);
        // TODO: test validations
    }

    /**
     * Creates a MetadataSchema.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void aiplatformProjectsLocationsMetadataStoresMetadataSchemasCreateTest() throws ApiException {
        String projectsId = null;
        String locationsId = null;
        String metadataStoresId = null;
        String metadataSchemaId = null;
        String uploadProtocol = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String key = null;
        String fields = null;
        String alt = null;
        String uploadType = null;
        String accessToken = null;
        String quotaUser = null;
        String paramCallback = null;
        String $xgafv = null;
        GoogleCloudAiplatformV1MetadataSchema googleCloudAiplatformV1MetadataSchema = null;
        GoogleCloudAiplatformV1MetadataSchema response = api.aiplatformProjectsLocationsMetadataStoresMetadataSchemasCreate(projectsId, locationsId, metadataStoresId, metadataSchemaId, uploadProtocol, oauthToken, prettyPrint, key, fields, alt, uploadType, accessToken, quotaUser, paramCallback, $xgafv, googleCloudAiplatformV1MetadataSchema);
        // TODO: test validations
    }

    /**
     * Retrieves a specific MetadataSchema.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void aiplatformProjectsLocationsMetadataStoresMetadataSchemasGetTest() throws ApiException {
        String projectsId = null;
        String locationsId = null;
        String metadataStoresId = null;
        String metadataSchemasId = null;
        String uploadProtocol = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String key = null;
        String fields = null;
        String alt = null;
        String uploadType = null;
        String accessToken = null;
        String quotaUser = null;
        String paramCallback = null;
        String $xgafv = null;
        GoogleCloudAiplatformV1MetadataSchema response = api.aiplatformProjectsLocationsMetadataStoresMetadataSchemasGet(projectsId, locationsId, metadataStoresId, metadataSchemasId, uploadProtocol, oauthToken, prettyPrint, key, fields, alt, uploadType, accessToken, quotaUser, paramCallback, $xgafv);
        // TODO: test validations
    }

    /**
     * Lists MetadataSchemas.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void aiplatformProjectsLocationsMetadataStoresMetadataSchemasListTest() throws ApiException {
        String projectsId = null;
        String locationsId = null;
        String metadataStoresId = null;
        String pageToken = null;
        Integer pageSize = null;
        String filter = null;
        String uploadProtocol = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String key = null;
        String fields = null;
        String alt = null;
        String uploadType = null;
        String accessToken = null;
        String quotaUser = null;
        String paramCallback = null;
        String $xgafv = null;
        GoogleCloudAiplatformV1ListMetadataSchemasResponse response = api.aiplatformProjectsLocationsMetadataStoresMetadataSchemasList(projectsId, locationsId, metadataStoresId, pageToken, pageSize, filter, uploadProtocol, oauthToken, prettyPrint, key, fields, alt, uploadType, accessToken, quotaUser, paramCallback, $xgafv);
        // TODO: test validations
    }

    /**
     * Starts asynchronous cancellation on a long-running operation. The server makes a best effort to cancel the operation, but success is not guaranteed. If the server doesn&#39;t support this method, it returns &#x60;google.rpc.Code.UNIMPLEMENTED&#x60;. Clients can use Operations.GetOperation or other methods to check whether the cancellation succeeded or whether the operation completed despite cancellation. On successful cancellation, the operation is not deleted; instead, it becomes an operation with an Operation.error value with a google.rpc.Status.code of 1, corresponding to &#x60;Code.CANCELLED&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void aiplatformProjectsLocationsMetadataStoresOperationsCancelTest() throws ApiException {
        String projectsId = null;
        String locationsId = null;
        String metadataStoresId = null;
        String operationsId = null;
        String uploadProtocol = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String key = null;
        String fields = null;
        String alt = null;
        String uploadType = null;
        String accessToken = null;
        String quotaUser = null;
        String paramCallback = null;
        String $xgafv = null;
        Object response = api.aiplatformProjectsLocationsMetadataStoresOperationsCancel(projectsId, locationsId, metadataStoresId, operationsId, uploadProtocol, oauthToken, prettyPrint, key, fields, alt, uploadType, accessToken, quotaUser, paramCallback, $xgafv);
        // TODO: test validations
    }

    /**
     * Deletes a long-running operation. This method indicates that the client is no longer interested in the operation result. It does not cancel the operation. If the server doesn&#39;t support this method, it returns &#x60;google.rpc.Code.UNIMPLEMENTED&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void aiplatformProjectsLocationsMetadataStoresOperationsDeleteTest() throws ApiException {
        String projectsId = null;
        String locationsId = null;
        String metadataStoresId = null;
        String operationsId = null;
        String uploadProtocol = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String key = null;
        String fields = null;
        String alt = null;
        String uploadType = null;
        String accessToken = null;
        String quotaUser = null;
        String paramCallback = null;
        String $xgafv = null;
        Object response = api.aiplatformProjectsLocationsMetadataStoresOperationsDelete(projectsId, locationsId, metadataStoresId, operationsId, uploadProtocol, oauthToken, prettyPrint, key, fields, alt, uploadType, accessToken, quotaUser, paramCallback, $xgafv);
        // TODO: test validations
    }

    /**
     * Gets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void aiplatformProjectsLocationsMetadataStoresOperationsGetTest() throws ApiException {
        String projectsId = null;
        String locationsId = null;
        String metadataStoresId = null;
        String operationsId = null;
        String uploadProtocol = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String key = null;
        String fields = null;
        String alt = null;
        String uploadType = null;
        String accessToken = null;
        String quotaUser = null;
        String paramCallback = null;
        String $xgafv = null;
        GoogleLongrunningOperation response = api.aiplatformProjectsLocationsMetadataStoresOperationsGet(projectsId, locationsId, metadataStoresId, operationsId, uploadProtocol, oauthToken, prettyPrint, key, fields, alt, uploadType, accessToken, quotaUser, paramCallback, $xgafv);
        // TODO: test validations
    }

    /**
     * Lists operations that match the specified filter in the request. If the server doesn&#39;t support this method, it returns &#x60;UNIMPLEMENTED&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void aiplatformProjectsLocationsMetadataStoresOperationsListTest() throws ApiException {
        String projectsId = null;
        String locationsId = null;
        String metadataStoresId = null;
        String pageToken = null;
        Integer pageSize = null;
        String filter = null;
        String uploadProtocol = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String key = null;
        String fields = null;
        String alt = null;
        String uploadType = null;
        String accessToken = null;
        String quotaUser = null;
        String paramCallback = null;
        String $xgafv = null;
        GoogleLongrunningListOperationsResponse response = api.aiplatformProjectsLocationsMetadataStoresOperationsList(projectsId, locationsId, metadataStoresId, pageToken, pageSize, filter, uploadProtocol, oauthToken, prettyPrint, key, fields, alt, uploadType, accessToken, quotaUser, paramCallback, $xgafv);
        // TODO: test validations
    }

    /**
     * Waits until the specified long-running operation is done or reaches at most a specified timeout, returning the latest state. If the operation is already done, the latest state is immediately returned. If the timeout specified is greater than the default HTTP/RPC timeout, the HTTP/RPC timeout is used. If the server does not support this method, it returns &#x60;google.rpc.Code.UNIMPLEMENTED&#x60;. Note that this method is on a best-effort basis. It may return the latest state before the specified timeout (including immediately), meaning even an immediate response is no guarantee that the operation is done.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void aiplatformProjectsLocationsMetadataStoresOperationsWaitTest() throws ApiException {
        String projectsId = null;
        String locationsId = null;
        String metadataStoresId = null;
        String operationsId = null;
        String timeout = null;
        String uploadProtocol = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String key = null;
        String fields = null;
        String alt = null;
        String uploadType = null;
        String accessToken = null;
        String quotaUser = null;
        String paramCallback = null;
        String $xgafv = null;
        GoogleLongrunningOperation response = api.aiplatformProjectsLocationsMetadataStoresOperationsWait(projectsId, locationsId, metadataStoresId, operationsId, timeout, uploadProtocol, oauthToken, prettyPrint, key, fields, alt, uploadType, accessToken, quotaUser, paramCallback, $xgafv);
        // TODO: test validations
    }

    /**
     * Batch migrates resources from ml.googleapis.com, automl.googleapis.com, and datalabeling.googleapis.com to Vertex AI.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void aiplatformProjectsLocationsMigratableResourcesBatchMigrateTest() throws ApiException {
        String projectsId = null;
        String locationsId = null;
        String uploadProtocol = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String key = null;
        String fields = null;
        String alt = null;
        String uploadType = null;
        String accessToken = null;
        String quotaUser = null;
        String paramCallback = null;
        String $xgafv = null;
        GoogleCloudAiplatformV1BatchMigrateResourcesRequest googleCloudAiplatformV1BatchMigrateResourcesRequest = null;
        GoogleLongrunningOperation response = api.aiplatformProjectsLocationsMigratableResourcesBatchMigrate(projectsId, locationsId, uploadProtocol, oauthToken, prettyPrint, key, fields, alt, uploadType, accessToken, quotaUser, paramCallback, $xgafv, googleCloudAiplatformV1BatchMigrateResourcesRequest);
        // TODO: test validations
    }

    /**
     * Starts asynchronous cancellation on a long-running operation. The server makes a best effort to cancel the operation, but success is not guaranteed. If the server doesn&#39;t support this method, it returns &#x60;google.rpc.Code.UNIMPLEMENTED&#x60;. Clients can use Operations.GetOperation or other methods to check whether the cancellation succeeded or whether the operation completed despite cancellation. On successful cancellation, the operation is not deleted; instead, it becomes an operation with an Operation.error value with a google.rpc.Status.code of 1, corresponding to &#x60;Code.CANCELLED&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void aiplatformProjectsLocationsMigratableResourcesOperationsCancelTest() throws ApiException {
        String projectsId = null;
        String locationsId = null;
        String migratableResourcesId = null;
        String operationsId = null;
        String uploadProtocol = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String key = null;
        String fields = null;
        String alt = null;
        String uploadType = null;
        String accessToken = null;
        String quotaUser = null;
        String paramCallback = null;
        String $xgafv = null;
        Object response = api.aiplatformProjectsLocationsMigratableResourcesOperationsCancel(projectsId, locationsId, migratableResourcesId, operationsId, uploadProtocol, oauthToken, prettyPrint, key, fields, alt, uploadType, accessToken, quotaUser, paramCallback, $xgafv);
        // TODO: test validations
    }

    /**
     * Deletes a long-running operation. This method indicates that the client is no longer interested in the operation result. It does not cancel the operation. If the server doesn&#39;t support this method, it returns &#x60;google.rpc.Code.UNIMPLEMENTED&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void aiplatformProjectsLocationsMigratableResourcesOperationsDeleteTest() throws ApiException {
        String projectsId = null;
        String locationsId = null;
        String migratableResourcesId = null;
        String operationsId = null;
        String uploadProtocol = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String key = null;
        String fields = null;
        String alt = null;
        String uploadType = null;
        String accessToken = null;
        String quotaUser = null;
        String paramCallback = null;
        String $xgafv = null;
        Object response = api.aiplatformProjectsLocationsMigratableResourcesOperationsDelete(projectsId, locationsId, migratableResourcesId, operationsId, uploadProtocol, oauthToken, prettyPrint, key, fields, alt, uploadType, accessToken, quotaUser, paramCallback, $xgafv);
        // TODO: test validations
    }

    /**
     * Gets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void aiplatformProjectsLocationsMigratableResourcesOperationsGetTest() throws ApiException {
        String projectsId = null;
        String locationsId = null;
        String migratableResourcesId = null;
        String operationsId = null;
        String uploadProtocol = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String key = null;
        String fields = null;
        String alt = null;
        String uploadType = null;
        String accessToken = null;
        String quotaUser = null;
        String paramCallback = null;
        String $xgafv = null;
        GoogleLongrunningOperation response = api.aiplatformProjectsLocationsMigratableResourcesOperationsGet(projectsId, locationsId, migratableResourcesId, operationsId, uploadProtocol, oauthToken, prettyPrint, key, fields, alt, uploadType, accessToken, quotaUser, paramCallback, $xgafv);
        // TODO: test validations
    }

    /**
     * Lists operations that match the specified filter in the request. If the server doesn&#39;t support this method, it returns &#x60;UNIMPLEMENTED&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void aiplatformProjectsLocationsMigratableResourcesOperationsListTest() throws ApiException {
        String projectsId = null;
        String locationsId = null;
        String migratableResourcesId = null;
        Integer pageSize = null;
        String pageToken = null;
        String filter = null;
        String uploadProtocol = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String key = null;
        String fields = null;
        String alt = null;
        String uploadType = null;
        String accessToken = null;
        String quotaUser = null;
        String paramCallback = null;
        String $xgafv = null;
        GoogleLongrunningListOperationsResponse response = api.aiplatformProjectsLocationsMigratableResourcesOperationsList(projectsId, locationsId, migratableResourcesId, pageSize, pageToken, filter, uploadProtocol, oauthToken, prettyPrint, key, fields, alt, uploadType, accessToken, quotaUser, paramCallback, $xgafv);
        // TODO: test validations
    }

    /**
     * Waits until the specified long-running operation is done or reaches at most a specified timeout, returning the latest state. If the operation is already done, the latest state is immediately returned. If the timeout specified is greater than the default HTTP/RPC timeout, the HTTP/RPC timeout is used. If the server does not support this method, it returns &#x60;google.rpc.Code.UNIMPLEMENTED&#x60;. Note that this method is on a best-effort basis. It may return the latest state before the specified timeout (including immediately), meaning even an immediate response is no guarantee that the operation is done.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void aiplatformProjectsLocationsMigratableResourcesOperationsWaitTest() throws ApiException {
        String projectsId = null;
        String locationsId = null;
        String migratableResourcesId = null;
        String operationsId = null;
        String timeout = null;
        String uploadProtocol = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String key = null;
        String fields = null;
        String alt = null;
        String uploadType = null;
        String accessToken = null;
        String quotaUser = null;
        String paramCallback = null;
        String $xgafv = null;
        GoogleLongrunningOperation response = api.aiplatformProjectsLocationsMigratableResourcesOperationsWait(projectsId, locationsId, migratableResourcesId, operationsId, timeout, uploadProtocol, oauthToken, prettyPrint, key, fields, alt, uploadType, accessToken, quotaUser, paramCallback, $xgafv);
        // TODO: test validations
    }

    /**
     * Searches all of the resources in automl.googleapis.com, datalabeling.googleapis.com and ml.googleapis.com that can be migrated to Vertex AI&#39;s given location.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void aiplatformProjectsLocationsMigratableResourcesSearchTest() throws ApiException {
        String projectsId = null;
        String locationsId = null;
        String uploadProtocol = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String key = null;
        String fields = null;
        String alt = null;
        String uploadType = null;
        String accessToken = null;
        String quotaUser = null;
        String paramCallback = null;
        String $xgafv = null;
        GoogleCloudAiplatformV1SearchMigratableResourcesRequest googleCloudAiplatformV1SearchMigratableResourcesRequest = null;
        GoogleCloudAiplatformV1SearchMigratableResourcesResponse response = api.aiplatformProjectsLocationsMigratableResourcesSearch(projectsId, locationsId, uploadProtocol, oauthToken, prettyPrint, key, fields, alt, uploadType, accessToken, quotaUser, paramCallback, $xgafv, googleCloudAiplatformV1SearchMigratableResourcesRequest);
        // TODO: test validations
    }

    /**
     * Creates a ModelDeploymentMonitoringJob. It will run periodically on a configured interval.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void aiplatformProjectsLocationsModelDeploymentMonitoringJobsCreateTest() throws ApiException {
        String projectsId = null;
        String locationsId = null;
        String uploadProtocol = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String key = null;
        String fields = null;
        String alt = null;
        String uploadType = null;
        String accessToken = null;
        String quotaUser = null;
        String paramCallback = null;
        String $xgafv = null;
        GoogleCloudAiplatformV1ModelDeploymentMonitoringJob googleCloudAiplatformV1ModelDeploymentMonitoringJob = null;
        GoogleCloudAiplatformV1ModelDeploymentMonitoringJob response = api.aiplatformProjectsLocationsModelDeploymentMonitoringJobsCreate(projectsId, locationsId, uploadProtocol, oauthToken, prettyPrint, key, fields, alt, uploadType, accessToken, quotaUser, paramCallback, $xgafv, googleCloudAiplatformV1ModelDeploymentMonitoringJob);
        // TODO: test validations
    }

    /**
     * Deletes a ModelDeploymentMonitoringJob.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void aiplatformProjectsLocationsModelDeploymentMonitoringJobsDeleteTest() throws ApiException {
        String projectsId = null;
        String locationsId = null;
        String modelDeploymentMonitoringJobsId = null;
        String uploadProtocol = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String key = null;
        String fields = null;
        String alt = null;
        String uploadType = null;
        String accessToken = null;
        String quotaUser = null;
        String paramCallback = null;
        String $xgafv = null;
        GoogleLongrunningOperation response = api.aiplatformProjectsLocationsModelDeploymentMonitoringJobsDelete(projectsId, locationsId, modelDeploymentMonitoringJobsId, uploadProtocol, oauthToken, prettyPrint, key, fields, alt, uploadType, accessToken, quotaUser, paramCallback, $xgafv);
        // TODO: test validations
    }

    /**
     * Gets a ModelDeploymentMonitoringJob.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void aiplatformProjectsLocationsModelDeploymentMonitoringJobsGetTest() throws ApiException {
        String projectsId = null;
        String locationsId = null;
        String modelDeploymentMonitoringJobsId = null;
        String uploadProtocol = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String key = null;
        String fields = null;
        String alt = null;
        String uploadType = null;
        String accessToken = null;
        String quotaUser = null;
        String paramCallback = null;
        String $xgafv = null;
        GoogleCloudAiplatformV1ModelDeploymentMonitoringJob response = api.aiplatformProjectsLocationsModelDeploymentMonitoringJobsGet(projectsId, locationsId, modelDeploymentMonitoringJobsId, uploadProtocol, oauthToken, prettyPrint, key, fields, alt, uploadType, accessToken, quotaUser, paramCallback, $xgafv);
        // TODO: test validations
    }

    /**
     * Lists ModelDeploymentMonitoringJobs in a Location.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void aiplatformProjectsLocationsModelDeploymentMonitoringJobsListTest() throws ApiException {
        String projectsId = null;
        String locationsId = null;
        String pageToken = null;
        Integer pageSize = null;
        String filter = null;
        String readMask = null;
        String uploadProtocol = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String key = null;
        String fields = null;
        String alt = null;
        String uploadType = null;
        String accessToken = null;
        String quotaUser = null;
        String paramCallback = null;
        String $xgafv = null;
        GoogleCloudAiplatformV1ListModelDeploymentMonitoringJobsResponse response = api.aiplatformProjectsLocationsModelDeploymentMonitoringJobsList(projectsId, locationsId, pageToken, pageSize, filter, readMask, uploadProtocol, oauthToken, prettyPrint, key, fields, alt, uploadType, accessToken, quotaUser, paramCallback, $xgafv);
        // TODO: test validations
    }

    /**
     * Starts asynchronous cancellation on a long-running operation. The server makes a best effort to cancel the operation, but success is not guaranteed. If the server doesn&#39;t support this method, it returns &#x60;google.rpc.Code.UNIMPLEMENTED&#x60;. Clients can use Operations.GetOperation or other methods to check whether the cancellation succeeded or whether the operation completed despite cancellation. On successful cancellation, the operation is not deleted; instead, it becomes an operation with an Operation.error value with a google.rpc.Status.code of 1, corresponding to &#x60;Code.CANCELLED&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void aiplatformProjectsLocationsModelDeploymentMonitoringJobsOperationsCancelTest() throws ApiException {
        String projectsId = null;
        String locationsId = null;
        String modelDeploymentMonitoringJobsId = null;
        String operationsId = null;
        String uploadProtocol = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String key = null;
        String fields = null;
        String alt = null;
        String uploadType = null;
        String accessToken = null;
        String quotaUser = null;
        String paramCallback = null;
        String $xgafv = null;
        Object response = api.aiplatformProjectsLocationsModelDeploymentMonitoringJobsOperationsCancel(projectsId, locationsId, modelDeploymentMonitoringJobsId, operationsId, uploadProtocol, oauthToken, prettyPrint, key, fields, alt, uploadType, accessToken, quotaUser, paramCallback, $xgafv);
        // TODO: test validations
    }

    /**
     * Deletes a long-running operation. This method indicates that the client is no longer interested in the operation result. It does not cancel the operation. If the server doesn&#39;t support this method, it returns &#x60;google.rpc.Code.UNIMPLEMENTED&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void aiplatformProjectsLocationsModelDeploymentMonitoringJobsOperationsDeleteTest() throws ApiException {
        String projectsId = null;
        String locationsId = null;
        String modelDeploymentMonitoringJobsId = null;
        String operationsId = null;
        String uploadProtocol = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String key = null;
        String fields = null;
        String alt = null;
        String uploadType = null;
        String accessToken = null;
        String quotaUser = null;
        String paramCallback = null;
        String $xgafv = null;
        Object response = api.aiplatformProjectsLocationsModelDeploymentMonitoringJobsOperationsDelete(projectsId, locationsId, modelDeploymentMonitoringJobsId, operationsId, uploadProtocol, oauthToken, prettyPrint, key, fields, alt, uploadType, accessToken, quotaUser, paramCallback, $xgafv);
        // TODO: test validations
    }

    /**
     * Gets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void aiplatformProjectsLocationsModelDeploymentMonitoringJobsOperationsGetTest() throws ApiException {
        String projectsId = null;
        String locationsId = null;
        String modelDeploymentMonitoringJobsId = null;
        String operationsId = null;
        String uploadProtocol = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String key = null;
        String fields = null;
        String alt = null;
        String uploadType = null;
        String accessToken = null;
        String quotaUser = null;
        String paramCallback = null;
        String $xgafv = null;
        GoogleLongrunningOperation response = api.aiplatformProjectsLocationsModelDeploymentMonitoringJobsOperationsGet(projectsId, locationsId, modelDeploymentMonitoringJobsId, operationsId, uploadProtocol, oauthToken, prettyPrint, key, fields, alt, uploadType, accessToken, quotaUser, paramCallback, $xgafv);
        // TODO: test validations
    }

    /**
     * Lists operations that match the specified filter in the request. If the server doesn&#39;t support this method, it returns &#x60;UNIMPLEMENTED&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void aiplatformProjectsLocationsModelDeploymentMonitoringJobsOperationsListTest() throws ApiException {
        String projectsId = null;
        String locationsId = null;
        String modelDeploymentMonitoringJobsId = null;
        String filter = null;
        Integer pageSize = null;
        String pageToken = null;
        String uploadProtocol = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String key = null;
        String fields = null;
        String alt = null;
        String uploadType = null;
        String accessToken = null;
        String quotaUser = null;
        String paramCallback = null;
        String $xgafv = null;
        GoogleLongrunningListOperationsResponse response = api.aiplatformProjectsLocationsModelDeploymentMonitoringJobsOperationsList(projectsId, locationsId, modelDeploymentMonitoringJobsId, filter, pageSize, pageToken, uploadProtocol, oauthToken, prettyPrint, key, fields, alt, uploadType, accessToken, quotaUser, paramCallback, $xgafv);
        // TODO: test validations
    }

    /**
     * Waits until the specified long-running operation is done or reaches at most a specified timeout, returning the latest state. If the operation is already done, the latest state is immediately returned. If the timeout specified is greater than the default HTTP/RPC timeout, the HTTP/RPC timeout is used. If the server does not support this method, it returns &#x60;google.rpc.Code.UNIMPLEMENTED&#x60;. Note that this method is on a best-effort basis. It may return the latest state before the specified timeout (including immediately), meaning even an immediate response is no guarantee that the operation is done.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void aiplatformProjectsLocationsModelDeploymentMonitoringJobsOperationsWaitTest() throws ApiException {
        String projectsId = null;
        String locationsId = null;
        String modelDeploymentMonitoringJobsId = null;
        String operationsId = null;
        String timeout = null;
        String uploadProtocol = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String key = null;
        String fields = null;
        String alt = null;
        String uploadType = null;
        String accessToken = null;
        String quotaUser = null;
        String paramCallback = null;
        String $xgafv = null;
        GoogleLongrunningOperation response = api.aiplatformProjectsLocationsModelDeploymentMonitoringJobsOperationsWait(projectsId, locationsId, modelDeploymentMonitoringJobsId, operationsId, timeout, uploadProtocol, oauthToken, prettyPrint, key, fields, alt, uploadType, accessToken, quotaUser, paramCallback, $xgafv);
        // TODO: test validations
    }

    /**
     * Updates a ModelDeploymentMonitoringJob.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void aiplatformProjectsLocationsModelDeploymentMonitoringJobsPatchTest() throws ApiException {
        String projectsId = null;
        String locationsId = null;
        String modelDeploymentMonitoringJobsId = null;
        String updateMask = null;
        String uploadProtocol = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String key = null;
        String fields = null;
        String alt = null;
        String uploadType = null;
        String accessToken = null;
        String quotaUser = null;
        String paramCallback = null;
        String $xgafv = null;
        GoogleCloudAiplatformV1ModelDeploymentMonitoringJob googleCloudAiplatformV1ModelDeploymentMonitoringJob = null;
        GoogleLongrunningOperation response = api.aiplatformProjectsLocationsModelDeploymentMonitoringJobsPatch(projectsId, locationsId, modelDeploymentMonitoringJobsId, updateMask, uploadProtocol, oauthToken, prettyPrint, key, fields, alt, uploadType, accessToken, quotaUser, paramCallback, $xgafv, googleCloudAiplatformV1ModelDeploymentMonitoringJob);
        // TODO: test validations
    }

    /**
     * Pauses a ModelDeploymentMonitoringJob. If the job is running, the server makes a best effort to cancel the job. Will mark ModelDeploymentMonitoringJob.state to &#39;PAUSED&#39;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void aiplatformProjectsLocationsModelDeploymentMonitoringJobsPauseTest() throws ApiException {
        String projectsId = null;
        String locationsId = null;
        String modelDeploymentMonitoringJobsId = null;
        String uploadProtocol = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String key = null;
        String fields = null;
        String alt = null;
        String uploadType = null;
        String accessToken = null;
        String quotaUser = null;
        String paramCallback = null;
        String $xgafv = null;
        Object body = null;
        Object response = api.aiplatformProjectsLocationsModelDeploymentMonitoringJobsPause(projectsId, locationsId, modelDeploymentMonitoringJobsId, uploadProtocol, oauthToken, prettyPrint, key, fields, alt, uploadType, accessToken, quotaUser, paramCallback, $xgafv, body);
        // TODO: test validations
    }

    /**
     * Resumes a paused ModelDeploymentMonitoringJob. It will start to run from next scheduled time. A deleted ModelDeploymentMonitoringJob can&#39;t be resumed.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void aiplatformProjectsLocationsModelDeploymentMonitoringJobsResumeTest() throws ApiException {
        String projectsId = null;
        String locationsId = null;
        String modelDeploymentMonitoringJobsId = null;
        String uploadProtocol = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String key = null;
        String fields = null;
        String alt = null;
        String uploadType = null;
        String accessToken = null;
        String quotaUser = null;
        String paramCallback = null;
        String $xgafv = null;
        Object body = null;
        Object response = api.aiplatformProjectsLocationsModelDeploymentMonitoringJobsResume(projectsId, locationsId, modelDeploymentMonitoringJobsId, uploadProtocol, oauthToken, prettyPrint, key, fields, alt, uploadType, accessToken, quotaUser, paramCallback, $xgafv, body);
        // TODO: test validations
    }

    /**
     * Searches Model Monitoring Statistics generated within a given time window.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void aiplatformProjectsLocationsModelDeploymentMonitoringJobsSearchModelDeploymentMonitoringStatsAnomaliesTest() throws ApiException {
        String projectsId = null;
        String locationsId = null;
        String modelDeploymentMonitoringJobsId = null;
        String uploadProtocol = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String key = null;
        String fields = null;
        String alt = null;
        String uploadType = null;
        String accessToken = null;
        String quotaUser = null;
        String paramCallback = null;
        String $xgafv = null;
        GoogleCloudAiplatformV1SearchModelDeploymentMonitoringStatsAnomaliesRequest googleCloudAiplatformV1SearchModelDeploymentMonitoringStatsAnomaliesRequest = null;
        GoogleCloudAiplatformV1SearchModelDeploymentMonitoringStatsAnomaliesResponse response = api.aiplatformProjectsLocationsModelDeploymentMonitoringJobsSearchModelDeploymentMonitoringStatsAnomalies(projectsId, locationsId, modelDeploymentMonitoringJobsId, uploadProtocol, oauthToken, prettyPrint, key, fields, alt, uploadType, accessToken, quotaUser, paramCallback, $xgafv, googleCloudAiplatformV1SearchModelDeploymentMonitoringStatsAnomaliesRequest);
        // TODO: test validations
    }

    /**
     * Copies an already existing Vertex AI Model into the specified Location. The source Model must exist in the same Project. When copying custom Models, the users themselves are responsible for Model.metadata content to be region-agnostic, as well as making sure that any resources (e.g. files) it depends on remain accessible.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void aiplatformProjectsLocationsModelsCopyTest() throws ApiException {
        String projectsId = null;
        String locationsId = null;
        String uploadProtocol = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String key = null;
        String fields = null;
        String alt = null;
        String uploadType = null;
        String accessToken = null;
        String quotaUser = null;
        String paramCallback = null;
        String $xgafv = null;
        GoogleCloudAiplatformV1CopyModelRequest googleCloudAiplatformV1CopyModelRequest = null;
        GoogleLongrunningOperation response = api.aiplatformProjectsLocationsModelsCopy(projectsId, locationsId, uploadProtocol, oauthToken, prettyPrint, key, fields, alt, uploadType, accessToken, quotaUser, paramCallback, $xgafv, googleCloudAiplatformV1CopyModelRequest);
        // TODO: test validations
    }

    /**
     * Deletes a Model. A model cannot be deleted if any Endpoint resource has a DeployedModel based on the model in its deployed_models field.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void aiplatformProjectsLocationsModelsDeleteTest() throws ApiException {
        String projectsId = null;
        String locationsId = null;
        String modelsId = null;
        String uploadProtocol = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String key = null;
        String fields = null;
        String alt = null;
        String uploadType = null;
        String accessToken = null;
        String quotaUser = null;
        String paramCallback = null;
        String $xgafv = null;
        GoogleLongrunningOperation response = api.aiplatformProjectsLocationsModelsDelete(projectsId, locationsId, modelsId, uploadProtocol, oauthToken, prettyPrint, key, fields, alt, uploadType, accessToken, quotaUser, paramCallback, $xgafv);
        // TODO: test validations
    }

    /**
     * Deletes a Model version. Model version can only be deleted if there are no DeployedModels created from it. Deleting the only version in the Model is not allowed. Use DeleteModel for deleting the Model instead.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void aiplatformProjectsLocationsModelsDeleteVersionTest() throws ApiException {
        String projectsId = null;
        String locationsId = null;
        String modelsId = null;
        String uploadProtocol = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String key = null;
        String fields = null;
        String alt = null;
        String uploadType = null;
        String accessToken = null;
        String quotaUser = null;
        String paramCallback = null;
        String $xgafv = null;
        GoogleLongrunningOperation response = api.aiplatformProjectsLocationsModelsDeleteVersion(projectsId, locationsId, modelsId, uploadProtocol, oauthToken, prettyPrint, key, fields, alt, uploadType, accessToken, quotaUser, paramCallback, $xgafv);
        // TODO: test validations
    }

    /**
     * Gets a ModelEvaluation.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void aiplatformProjectsLocationsModelsEvaluationsGetTest() throws ApiException {
        String projectsId = null;
        String locationsId = null;
        String modelsId = null;
        String evaluationsId = null;
        String uploadProtocol = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String key = null;
        String fields = null;
        String alt = null;
        String uploadType = null;
        String accessToken = null;
        String quotaUser = null;
        String paramCallback = null;
        String $xgafv = null;
        GoogleCloudAiplatformV1ModelEvaluation response = api.aiplatformProjectsLocationsModelsEvaluationsGet(projectsId, locationsId, modelsId, evaluationsId, uploadProtocol, oauthToken, prettyPrint, key, fields, alt, uploadType, accessToken, quotaUser, paramCallback, $xgafv);
        // TODO: test validations
    }

    /**
     * Imports an externally generated ModelEvaluation.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void aiplatformProjectsLocationsModelsEvaluationsImportTest() throws ApiException {
        String projectsId = null;
        String locationsId = null;
        String modelsId = null;
        String uploadProtocol = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String key = null;
        String fields = null;
        String alt = null;
        String uploadType = null;
        String accessToken = null;
        String quotaUser = null;
        String paramCallback = null;
        String $xgafv = null;
        GoogleCloudAiplatformV1ImportModelEvaluationRequest googleCloudAiplatformV1ImportModelEvaluationRequest = null;
        GoogleCloudAiplatformV1ModelEvaluation response = api.aiplatformProjectsLocationsModelsEvaluationsImport(projectsId, locationsId, modelsId, uploadProtocol, oauthToken, prettyPrint, key, fields, alt, uploadType, accessToken, quotaUser, paramCallback, $xgafv, googleCloudAiplatformV1ImportModelEvaluationRequest);
        // TODO: test validations
    }

    /**
     * Lists ModelEvaluations in a Model.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void aiplatformProjectsLocationsModelsEvaluationsListTest() throws ApiException {
        String projectsId = null;
        String locationsId = null;
        String modelsId = null;
        String filter = null;
        String readMask = null;
        String pageToken = null;
        Integer pageSize = null;
        String uploadProtocol = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String key = null;
        String fields = null;
        String alt = null;
        String uploadType = null;
        String accessToken = null;
        String quotaUser = null;
        String paramCallback = null;
        String $xgafv = null;
        GoogleCloudAiplatformV1ListModelEvaluationsResponse response = api.aiplatformProjectsLocationsModelsEvaluationsList(projectsId, locationsId, modelsId, filter, readMask, pageToken, pageSize, uploadProtocol, oauthToken, prettyPrint, key, fields, alt, uploadType, accessToken, quotaUser, paramCallback, $xgafv);
        // TODO: test validations
    }

    /**
     * Starts asynchronous cancellation on a long-running operation. The server makes a best effort to cancel the operation, but success is not guaranteed. If the server doesn&#39;t support this method, it returns &#x60;google.rpc.Code.UNIMPLEMENTED&#x60;. Clients can use Operations.GetOperation or other methods to check whether the cancellation succeeded or whether the operation completed despite cancellation. On successful cancellation, the operation is not deleted; instead, it becomes an operation with an Operation.error value with a google.rpc.Status.code of 1, corresponding to &#x60;Code.CANCELLED&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void aiplatformProjectsLocationsModelsEvaluationsOperationsCancelTest() throws ApiException {
        String projectsId = null;
        String locationsId = null;
        String modelsId = null;
        String evaluationsId = null;
        String operationsId = null;
        String uploadProtocol = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String key = null;
        String fields = null;
        String alt = null;
        String uploadType = null;
        String accessToken = null;
        String quotaUser = null;
        String paramCallback = null;
        String $xgafv = null;
        Object response = api.aiplatformProjectsLocationsModelsEvaluationsOperationsCancel(projectsId, locationsId, modelsId, evaluationsId, operationsId, uploadProtocol, oauthToken, prettyPrint, key, fields, alt, uploadType, accessToken, quotaUser, paramCallback, $xgafv);
        // TODO: test validations
    }

    /**
     * Deletes a long-running operation. This method indicates that the client is no longer interested in the operation result. It does not cancel the operation. If the server doesn&#39;t support this method, it returns &#x60;google.rpc.Code.UNIMPLEMENTED&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void aiplatformProjectsLocationsModelsEvaluationsOperationsDeleteTest() throws ApiException {
        String projectsId = null;
        String locationsId = null;
        String modelsId = null;
        String evaluationsId = null;
        String operationsId = null;
        String uploadProtocol = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String key = null;
        String fields = null;
        String alt = null;
        String uploadType = null;
        String accessToken = null;
        String quotaUser = null;
        String paramCallback = null;
        String $xgafv = null;
        Object response = api.aiplatformProjectsLocationsModelsEvaluationsOperationsDelete(projectsId, locationsId, modelsId, evaluationsId, operationsId, uploadProtocol, oauthToken, prettyPrint, key, fields, alt, uploadType, accessToken, quotaUser, paramCallback, $xgafv);
        // TODO: test validations
    }

    /**
     * Gets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void aiplatformProjectsLocationsModelsEvaluationsOperationsGetTest() throws ApiException {
        String projectsId = null;
        String locationsId = null;
        String modelsId = null;
        String evaluationsId = null;
        String operationsId = null;
        String uploadProtocol = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String key = null;
        String fields = null;
        String alt = null;
        String uploadType = null;
        String accessToken = null;
        String quotaUser = null;
        String paramCallback = null;
        String $xgafv = null;
        GoogleLongrunningOperation response = api.aiplatformProjectsLocationsModelsEvaluationsOperationsGet(projectsId, locationsId, modelsId, evaluationsId, operationsId, uploadProtocol, oauthToken, prettyPrint, key, fields, alt, uploadType, accessToken, quotaUser, paramCallback, $xgafv);
        // TODO: test validations
    }

    /**
     * Lists operations that match the specified filter in the request. If the server doesn&#39;t support this method, it returns &#x60;UNIMPLEMENTED&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void aiplatformProjectsLocationsModelsEvaluationsOperationsListTest() throws ApiException {
        String projectsId = null;
        String locationsId = null;
        String modelsId = null;
        String evaluationsId = null;
        String pageToken = null;
        String filter = null;
        Integer pageSize = null;
        String uploadProtocol = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String key = null;
        String fields = null;
        String alt = null;
        String uploadType = null;
        String accessToken = null;
        String quotaUser = null;
        String paramCallback = null;
        String $xgafv = null;
        GoogleLongrunningListOperationsResponse response = api.aiplatformProjectsLocationsModelsEvaluationsOperationsList(projectsId, locationsId, modelsId, evaluationsId, pageToken, filter, pageSize, uploadProtocol, oauthToken, prettyPrint, key, fields, alt, uploadType, accessToken, quotaUser, paramCallback, $xgafv);
        // TODO: test validations
    }

    /**
     * Waits until the specified long-running operation is done or reaches at most a specified timeout, returning the latest state. If the operation is already done, the latest state is immediately returned. If the timeout specified is greater than the default HTTP/RPC timeout, the HTTP/RPC timeout is used. If the server does not support this method, it returns &#x60;google.rpc.Code.UNIMPLEMENTED&#x60;. Note that this method is on a best-effort basis. It may return the latest state before the specified timeout (including immediately), meaning even an immediate response is no guarantee that the operation is done.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void aiplatformProjectsLocationsModelsEvaluationsOperationsWaitTest() throws ApiException {
        String projectsId = null;
        String locationsId = null;
        String modelsId = null;
        String evaluationsId = null;
        String operationsId = null;
        String timeout = null;
        String uploadProtocol = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String key = null;
        String fields = null;
        String alt = null;
        String uploadType = null;
        String accessToken = null;
        String quotaUser = null;
        String paramCallback = null;
        String $xgafv = null;
        GoogleLongrunningOperation response = api.aiplatformProjectsLocationsModelsEvaluationsOperationsWait(projectsId, locationsId, modelsId, evaluationsId, operationsId, timeout, uploadProtocol, oauthToken, prettyPrint, key, fields, alt, uploadType, accessToken, quotaUser, paramCallback, $xgafv);
        // TODO: test validations
    }

    /**
     * Imports a list of externally generated EvaluatedAnnotations.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void aiplatformProjectsLocationsModelsEvaluationsSlicesBatchImportTest() throws ApiException {
        String projectsId = null;
        String locationsId = null;
        String modelsId = null;
        String evaluationsId = null;
        String slicesId = null;
        String uploadProtocol = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String key = null;
        String fields = null;
        String alt = null;
        String uploadType = null;
        String accessToken = null;
        String quotaUser = null;
        String paramCallback = null;
        String $xgafv = null;
        GoogleCloudAiplatformV1BatchImportEvaluatedAnnotationsRequest googleCloudAiplatformV1BatchImportEvaluatedAnnotationsRequest = null;
        GoogleCloudAiplatformV1BatchImportEvaluatedAnnotationsResponse response = api.aiplatformProjectsLocationsModelsEvaluationsSlicesBatchImport(projectsId, locationsId, modelsId, evaluationsId, slicesId, uploadProtocol, oauthToken, prettyPrint, key, fields, alt, uploadType, accessToken, quotaUser, paramCallback, $xgafv, googleCloudAiplatformV1BatchImportEvaluatedAnnotationsRequest);
        // TODO: test validations
    }

    /**
     * Gets a ModelEvaluationSlice.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void aiplatformProjectsLocationsModelsEvaluationsSlicesGetTest() throws ApiException {
        String projectsId = null;
        String locationsId = null;
        String modelsId = null;
        String evaluationsId = null;
        String slicesId = null;
        String uploadProtocol = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String key = null;
        String fields = null;
        String alt = null;
        String uploadType = null;
        String accessToken = null;
        String quotaUser = null;
        String paramCallback = null;
        String $xgafv = null;
        GoogleCloudAiplatformV1ModelEvaluationSlice response = api.aiplatformProjectsLocationsModelsEvaluationsSlicesGet(projectsId, locationsId, modelsId, evaluationsId, slicesId, uploadProtocol, oauthToken, prettyPrint, key, fields, alt, uploadType, accessToken, quotaUser, paramCallback, $xgafv);
        // TODO: test validations
    }

    /**
     * Lists ModelEvaluationSlices in a ModelEvaluation.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void aiplatformProjectsLocationsModelsEvaluationsSlicesListTest() throws ApiException {
        String projectsId = null;
        String locationsId = null;
        String modelsId = null;
        String evaluationsId = null;
        String filter = null;
        Integer pageSize = null;
        String pageToken = null;
        String readMask = null;
        String uploadProtocol = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String key = null;
        String fields = null;
        String alt = null;
        String uploadType = null;
        String accessToken = null;
        String quotaUser = null;
        String paramCallback = null;
        String $xgafv = null;
        GoogleCloudAiplatformV1ListModelEvaluationSlicesResponse response = api.aiplatformProjectsLocationsModelsEvaluationsSlicesList(projectsId, locationsId, modelsId, evaluationsId, filter, pageSize, pageToken, readMask, uploadProtocol, oauthToken, prettyPrint, key, fields, alt, uploadType, accessToken, quotaUser, paramCallback, $xgafv);
        // TODO: test validations
    }

    /**
     * Exports a trained, exportable Model to a location specified by the user. A Model is considered to be exportable if it has at least one supported export format.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void aiplatformProjectsLocationsModelsExportTest() throws ApiException {
        String projectsId = null;
        String locationsId = null;
        String modelsId = null;
        String uploadProtocol = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String key = null;
        String fields = null;
        String alt = null;
        String uploadType = null;
        String accessToken = null;
        String quotaUser = null;
        String paramCallback = null;
        String $xgafv = null;
        GoogleCloudAiplatformV1ExportModelRequest googleCloudAiplatformV1ExportModelRequest = null;
        GoogleLongrunningOperation response = api.aiplatformProjectsLocationsModelsExport(projectsId, locationsId, modelsId, uploadProtocol, oauthToken, prettyPrint, key, fields, alt, uploadType, accessToken, quotaUser, paramCallback, $xgafv, googleCloudAiplatformV1ExportModelRequest);
        // TODO: test validations
    }

    /**
     * Gets a Model.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void aiplatformProjectsLocationsModelsGetTest() throws ApiException {
        String projectsId = null;
        String locationsId = null;
        String modelsId = null;
        String uploadProtocol = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String key = null;
        String fields = null;
        String alt = null;
        String uploadType = null;
        String accessToken = null;
        String quotaUser = null;
        String paramCallback = null;
        String $xgafv = null;
        GoogleCloudAiplatformV1Model response = api.aiplatformProjectsLocationsModelsGet(projectsId, locationsId, modelsId, uploadProtocol, oauthToken, prettyPrint, key, fields, alt, uploadType, accessToken, quotaUser, paramCallback, $xgafv);
        // TODO: test validations
    }

    /**
     * Gets the access control policy for a resource. Returns an empty policy if the resource exists and does not have a policy set.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void aiplatformProjectsLocationsModelsGetIamPolicyTest() throws ApiException {
        String projectsId = null;
        String locationsId = null;
        String modelsId = null;
        Integer optionsRequestedPolicyVersion = null;
        String uploadProtocol = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String key = null;
        String fields = null;
        String alt = null;
        String uploadType = null;
        String accessToken = null;
        String quotaUser = null;
        String paramCallback = null;
        String $xgafv = null;
        GoogleIamV1Policy response = api.aiplatformProjectsLocationsModelsGetIamPolicy(projectsId, locationsId, modelsId, optionsRequestedPolicyVersion, uploadProtocol, oauthToken, prettyPrint, key, fields, alt, uploadType, accessToken, quotaUser, paramCallback, $xgafv);
        // TODO: test validations
    }

    /**
     * Lists Models in a Location.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void aiplatformProjectsLocationsModelsListTest() throws ApiException {
        String projectsId = null;
        String locationsId = null;
        String pageToken = null;
        String readMask = null;
        String filter = null;
        String orderBy = null;
        Integer pageSize = null;
        String uploadProtocol = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String key = null;
        String fields = null;
        String alt = null;
        String uploadType = null;
        String accessToken = null;
        String quotaUser = null;
        String paramCallback = null;
        String $xgafv = null;
        GoogleCloudAiplatformV1ListModelsResponse response = api.aiplatformProjectsLocationsModelsList(projectsId, locationsId, pageToken, readMask, filter, orderBy, pageSize, uploadProtocol, oauthToken, prettyPrint, key, fields, alt, uploadType, accessToken, quotaUser, paramCallback, $xgafv);
        // TODO: test validations
    }

    /**
     * Lists versions of the specified model.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void aiplatformProjectsLocationsModelsListVersionsTest() throws ApiException {
        String projectsId = null;
        String locationsId = null;
        String modelsId = null;
        String readMask = null;
        String pageToken = null;
        String orderBy = null;
        String filter = null;
        Integer pageSize = null;
        String uploadProtocol = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String key = null;
        String fields = null;
        String alt = null;
        String uploadType = null;
        String accessToken = null;
        String quotaUser = null;
        String paramCallback = null;
        String $xgafv = null;
        GoogleCloudAiplatformV1ListModelVersionsResponse response = api.aiplatformProjectsLocationsModelsListVersions(projectsId, locationsId, modelsId, readMask, pageToken, orderBy, filter, pageSize, uploadProtocol, oauthToken, prettyPrint, key, fields, alt, uploadType, accessToken, quotaUser, paramCallback, $xgafv);
        // TODO: test validations
    }

    /**
     * Merges a set of aliases for a Model version.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void aiplatformProjectsLocationsModelsMergeVersionAliasesTest() throws ApiException {
        String projectsId = null;
        String locationsId = null;
        String modelsId = null;
        String uploadProtocol = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String key = null;
        String fields = null;
        String alt = null;
        String uploadType = null;
        String accessToken = null;
        String quotaUser = null;
        String paramCallback = null;
        String $xgafv = null;
        GoogleCloudAiplatformV1MergeVersionAliasesRequest googleCloudAiplatformV1MergeVersionAliasesRequest = null;
        GoogleCloudAiplatformV1Model response = api.aiplatformProjectsLocationsModelsMergeVersionAliases(projectsId, locationsId, modelsId, uploadProtocol, oauthToken, prettyPrint, key, fields, alt, uploadType, accessToken, quotaUser, paramCallback, $xgafv, googleCloudAiplatformV1MergeVersionAliasesRequest);
        // TODO: test validations
    }

    /**
     * Starts asynchronous cancellation on a long-running operation. The server makes a best effort to cancel the operation, but success is not guaranteed. If the server doesn&#39;t support this method, it returns &#x60;google.rpc.Code.UNIMPLEMENTED&#x60;. Clients can use Operations.GetOperation or other methods to check whether the cancellation succeeded or whether the operation completed despite cancellation. On successful cancellation, the operation is not deleted; instead, it becomes an operation with an Operation.error value with a google.rpc.Status.code of 1, corresponding to &#x60;Code.CANCELLED&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void aiplatformProjectsLocationsModelsOperationsCancelTest() throws ApiException {
        String projectsId = null;
        String locationsId = null;
        String modelsId = null;
        String operationsId = null;
        String uploadProtocol = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String key = null;
        String fields = null;
        String alt = null;
        String uploadType = null;
        String accessToken = null;
        String quotaUser = null;
        String paramCallback = null;
        String $xgafv = null;
        Object response = api.aiplatformProjectsLocationsModelsOperationsCancel(projectsId, locationsId, modelsId, operationsId, uploadProtocol, oauthToken, prettyPrint, key, fields, alt, uploadType, accessToken, quotaUser, paramCallback, $xgafv);
        // TODO: test validations
    }

    /**
     * Deletes a long-running operation. This method indicates that the client is no longer interested in the operation result. It does not cancel the operation. If the server doesn&#39;t support this method, it returns &#x60;google.rpc.Code.UNIMPLEMENTED&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void aiplatformProjectsLocationsModelsOperationsDeleteTest() throws ApiException {
        String projectsId = null;
        String locationsId = null;
        String modelsId = null;
        String operationsId = null;
        String uploadProtocol = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String key = null;
        String fields = null;
        String alt = null;
        String uploadType = null;
        String accessToken = null;
        String quotaUser = null;
        String paramCallback = null;
        String $xgafv = null;
        Object response = api.aiplatformProjectsLocationsModelsOperationsDelete(projectsId, locationsId, modelsId, operationsId, uploadProtocol, oauthToken, prettyPrint, key, fields, alt, uploadType, accessToken, quotaUser, paramCallback, $xgafv);
        // TODO: test validations
    }

    /**
     * Gets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void aiplatformProjectsLocationsModelsOperationsGetTest() throws ApiException {
        String projectsId = null;
        String locationsId = null;
        String modelsId = null;
        String operationsId = null;
        String uploadProtocol = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String key = null;
        String fields = null;
        String alt = null;
        String uploadType = null;
        String accessToken = null;
        String quotaUser = null;
        String paramCallback = null;
        String $xgafv = null;
        GoogleLongrunningOperation response = api.aiplatformProjectsLocationsModelsOperationsGet(projectsId, locationsId, modelsId, operationsId, uploadProtocol, oauthToken, prettyPrint, key, fields, alt, uploadType, accessToken, quotaUser, paramCallback, $xgafv);
        // TODO: test validations
    }

    /**
     * Lists operations that match the specified filter in the request. If the server doesn&#39;t support this method, it returns &#x60;UNIMPLEMENTED&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void aiplatformProjectsLocationsModelsOperationsListTest() throws ApiException {
        String projectsId = null;
        String locationsId = null;
        String modelsId = null;
        String pageToken = null;
        String filter = null;
        Integer pageSize = null;
        String uploadProtocol = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String key = null;
        String fields = null;
        String alt = null;
        String uploadType = null;
        String accessToken = null;
        String quotaUser = null;
        String paramCallback = null;
        String $xgafv = null;
        GoogleLongrunningListOperationsResponse response = api.aiplatformProjectsLocationsModelsOperationsList(projectsId, locationsId, modelsId, pageToken, filter, pageSize, uploadProtocol, oauthToken, prettyPrint, key, fields, alt, uploadType, accessToken, quotaUser, paramCallback, $xgafv);
        // TODO: test validations
    }

    /**
     * Waits until the specified long-running operation is done or reaches at most a specified timeout, returning the latest state. If the operation is already done, the latest state is immediately returned. If the timeout specified is greater than the default HTTP/RPC timeout, the HTTP/RPC timeout is used. If the server does not support this method, it returns &#x60;google.rpc.Code.UNIMPLEMENTED&#x60;. Note that this method is on a best-effort basis. It may return the latest state before the specified timeout (including immediately), meaning even an immediate response is no guarantee that the operation is done.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void aiplatformProjectsLocationsModelsOperationsWaitTest() throws ApiException {
        String projectsId = null;
        String locationsId = null;
        String modelsId = null;
        String operationsId = null;
        String timeout = null;
        String uploadProtocol = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String key = null;
        String fields = null;
        String alt = null;
        String uploadType = null;
        String accessToken = null;
        String quotaUser = null;
        String paramCallback = null;
        String $xgafv = null;
        GoogleLongrunningOperation response = api.aiplatformProjectsLocationsModelsOperationsWait(projectsId, locationsId, modelsId, operationsId, timeout, uploadProtocol, oauthToken, prettyPrint, key, fields, alt, uploadType, accessToken, quotaUser, paramCallback, $xgafv);
        // TODO: test validations
    }

    /**
     * Updates a Model.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void aiplatformProjectsLocationsModelsPatchTest() throws ApiException {
        String projectsId = null;
        String locationsId = null;
        String modelsId = null;
        String updateMask = null;
        String uploadProtocol = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String key = null;
        String fields = null;
        String alt = null;
        String uploadType = null;
        String accessToken = null;
        String quotaUser = null;
        String paramCallback = null;
        String $xgafv = null;
        GoogleCloudAiplatformV1Model googleCloudAiplatformV1Model = null;
        GoogleCloudAiplatformV1Model response = api.aiplatformProjectsLocationsModelsPatch(projectsId, locationsId, modelsId, updateMask, uploadProtocol, oauthToken, prettyPrint, key, fields, alt, uploadType, accessToken, quotaUser, paramCallback, $xgafv, googleCloudAiplatformV1Model);
        // TODO: test validations
    }

    /**
     * Sets the access control policy on the specified resource. Replaces any existing policy. Can return &#x60;NOT_FOUND&#x60;, &#x60;INVALID_ARGUMENT&#x60;, and &#x60;PERMISSION_DENIED&#x60; errors.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void aiplatformProjectsLocationsModelsSetIamPolicyTest() throws ApiException {
        String projectsId = null;
        String locationsId = null;
        String modelsId = null;
        String uploadProtocol = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String key = null;
        String fields = null;
        String alt = null;
        String uploadType = null;
        String accessToken = null;
        String quotaUser = null;
        String paramCallback = null;
        String $xgafv = null;
        GoogleIamV1SetIamPolicyRequest googleIamV1SetIamPolicyRequest = null;
        GoogleIamV1Policy response = api.aiplatformProjectsLocationsModelsSetIamPolicy(projectsId, locationsId, modelsId, uploadProtocol, oauthToken, prettyPrint, key, fields, alt, uploadType, accessToken, quotaUser, paramCallback, $xgafv, googleIamV1SetIamPolicyRequest);
        // TODO: test validations
    }

    /**
     * Returns permissions that a caller has on the specified resource. If the resource does not exist, this will return an empty set of permissions, not a &#x60;NOT_FOUND&#x60; error. Note: This operation is designed to be used for building permission-aware UIs and command-line tools, not for authorization checking. This operation may \&quot;fail open\&quot; without warning.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void aiplatformProjectsLocationsModelsTestIamPermissionsTest() throws ApiException {
        String projectsId = null;
        String locationsId = null;
        String modelsId = null;
        String permissions = null;
        String uploadProtocol = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String key = null;
        String fields = null;
        String alt = null;
        String uploadType = null;
        String accessToken = null;
        String quotaUser = null;
        String paramCallback = null;
        String $xgafv = null;
        GoogleIamV1TestIamPermissionsResponse response = api.aiplatformProjectsLocationsModelsTestIamPermissions(projectsId, locationsId, modelsId, permissions, uploadProtocol, oauthToken, prettyPrint, key, fields, alt, uploadType, accessToken, quotaUser, paramCallback, $xgafv);
        // TODO: test validations
    }

    /**
     * Incrementally update the dataset used for an examples model.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void aiplatformProjectsLocationsModelsUpdateExplanationDatasetTest() throws ApiException {
        String projectsId = null;
        String locationsId = null;
        String modelsId = null;
        String uploadProtocol = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String key = null;
        String fields = null;
        String alt = null;
        String uploadType = null;
        String accessToken = null;
        String quotaUser = null;
        String paramCallback = null;
        String $xgafv = null;
        GoogleCloudAiplatformV1UpdateExplanationDatasetRequest googleCloudAiplatformV1UpdateExplanationDatasetRequest = null;
        GoogleLongrunningOperation response = api.aiplatformProjectsLocationsModelsUpdateExplanationDataset(projectsId, locationsId, modelsId, uploadProtocol, oauthToken, prettyPrint, key, fields, alt, uploadType, accessToken, quotaUser, paramCallback, $xgafv, googleCloudAiplatformV1UpdateExplanationDatasetRequest);
        // TODO: test validations
    }

    /**
     * Uploads a Model artifact into Vertex AI.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void aiplatformProjectsLocationsModelsUploadTest() throws ApiException {
        String projectsId = null;
        String locationsId = null;
        String uploadProtocol = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String key = null;
        String fields = null;
        String alt = null;
        String uploadType = null;
        String accessToken = null;
        String quotaUser = null;
        String paramCallback = null;
        String $xgafv = null;
        GoogleCloudAiplatformV1UploadModelRequest googleCloudAiplatformV1UploadModelRequest = null;
        GoogleLongrunningOperation response = api.aiplatformProjectsLocationsModelsUpload(projectsId, locationsId, uploadProtocol, oauthToken, prettyPrint, key, fields, alt, uploadType, accessToken, quotaUser, paramCallback, $xgafv, googleCloudAiplatformV1UploadModelRequest);
        // TODO: test validations
    }

    /**
     * Cancels a NasJob. Starts asynchronous cancellation on the NasJob. The server makes a best effort to cancel the job, but success is not guaranteed. Clients can use JobService.GetNasJob or other methods to check whether the cancellation succeeded or whether the job completed despite cancellation. On successful cancellation, the NasJob is not deleted; instead it becomes a job with a NasJob.error value with a google.rpc.Status.code of 1, corresponding to &#x60;Code.CANCELLED&#x60;, and NasJob.state is set to &#x60;CANCELLED&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void aiplatformProjectsLocationsNasJobsCancelTest() throws ApiException {
        String projectsId = null;
        String locationsId = null;
        String nasJobsId = null;
        String uploadProtocol = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String key = null;
        String fields = null;
        String alt = null;
        String uploadType = null;
        String accessToken = null;
        String quotaUser = null;
        String paramCallback = null;
        String $xgafv = null;
        Object body = null;
        Object response = api.aiplatformProjectsLocationsNasJobsCancel(projectsId, locationsId, nasJobsId, uploadProtocol, oauthToken, prettyPrint, key, fields, alt, uploadType, accessToken, quotaUser, paramCallback, $xgafv, body);
        // TODO: test validations
    }

    /**
     * Creates a NasJob
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void aiplatformProjectsLocationsNasJobsCreateTest() throws ApiException {
        String projectsId = null;
        String locationsId = null;
        String uploadProtocol = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String key = null;
        String fields = null;
        String alt = null;
        String uploadType = null;
        String accessToken = null;
        String quotaUser = null;
        String paramCallback = null;
        String $xgafv = null;
        GoogleCloudAiplatformV1NasJob googleCloudAiplatformV1NasJob = null;
        GoogleCloudAiplatformV1NasJob response = api.aiplatformProjectsLocationsNasJobsCreate(projectsId, locationsId, uploadProtocol, oauthToken, prettyPrint, key, fields, alt, uploadType, accessToken, quotaUser, paramCallback, $xgafv, googleCloudAiplatformV1NasJob);
        // TODO: test validations
    }

    /**
     * Deletes a NasJob.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void aiplatformProjectsLocationsNasJobsDeleteTest() throws ApiException {
        String projectsId = null;
        String locationsId = null;
        String nasJobsId = null;
        String uploadProtocol = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String key = null;
        String fields = null;
        String alt = null;
        String uploadType = null;
        String accessToken = null;
        String quotaUser = null;
        String paramCallback = null;
        String $xgafv = null;
        GoogleLongrunningOperation response = api.aiplatformProjectsLocationsNasJobsDelete(projectsId, locationsId, nasJobsId, uploadProtocol, oauthToken, prettyPrint, key, fields, alt, uploadType, accessToken, quotaUser, paramCallback, $xgafv);
        // TODO: test validations
    }

    /**
     * Gets a NasJob
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void aiplatformProjectsLocationsNasJobsGetTest() throws ApiException {
        String projectsId = null;
        String locationsId = null;
        String nasJobsId = null;
        String uploadProtocol = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String key = null;
        String fields = null;
        String alt = null;
        String uploadType = null;
        String accessToken = null;
        String quotaUser = null;
        String paramCallback = null;
        String $xgafv = null;
        GoogleCloudAiplatformV1NasJob response = api.aiplatformProjectsLocationsNasJobsGet(projectsId, locationsId, nasJobsId, uploadProtocol, oauthToken, prettyPrint, key, fields, alt, uploadType, accessToken, quotaUser, paramCallback, $xgafv);
        // TODO: test validations
    }

    /**
     * Lists NasJobs in a Location.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void aiplatformProjectsLocationsNasJobsListTest() throws ApiException {
        String projectsId = null;
        String locationsId = null;
        String pageToken = null;
        String filter = null;
        String readMask = null;
        Integer pageSize = null;
        String uploadProtocol = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String key = null;
        String fields = null;
        String alt = null;
        String uploadType = null;
        String accessToken = null;
        String quotaUser = null;
        String paramCallback = null;
        String $xgafv = null;
        GoogleCloudAiplatformV1ListNasJobsResponse response = api.aiplatformProjectsLocationsNasJobsList(projectsId, locationsId, pageToken, filter, readMask, pageSize, uploadProtocol, oauthToken, prettyPrint, key, fields, alt, uploadType, accessToken, quotaUser, paramCallback, $xgafv);
        // TODO: test validations
    }

    /**
     * Gets a NasTrialDetail.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void aiplatformProjectsLocationsNasJobsNasTrialDetailsGetTest() throws ApiException {
        String projectsId = null;
        String locationsId = null;
        String nasJobsId = null;
        String nasTrialDetailsId = null;
        String uploadProtocol = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String key = null;
        String fields = null;
        String alt = null;
        String uploadType = null;
        String accessToken = null;
        String quotaUser = null;
        String paramCallback = null;
        String $xgafv = null;
        GoogleCloudAiplatformV1NasTrialDetail response = api.aiplatformProjectsLocationsNasJobsNasTrialDetailsGet(projectsId, locationsId, nasJobsId, nasTrialDetailsId, uploadProtocol, oauthToken, prettyPrint, key, fields, alt, uploadType, accessToken, quotaUser, paramCallback, $xgafv);
        // TODO: test validations
    }

    /**
     * List top NasTrialDetails of a NasJob.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void aiplatformProjectsLocationsNasJobsNasTrialDetailsListTest() throws ApiException {
        String projectsId = null;
        String locationsId = null;
        String nasJobsId = null;
        Integer pageSize = null;
        String pageToken = null;
        String uploadProtocol = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String key = null;
        String fields = null;
        String alt = null;
        String uploadType = null;
        String accessToken = null;
        String quotaUser = null;
        String paramCallback = null;
        String $xgafv = null;
        GoogleCloudAiplatformV1ListNasTrialDetailsResponse response = api.aiplatformProjectsLocationsNasJobsNasTrialDetailsList(projectsId, locationsId, nasJobsId, pageSize, pageToken, uploadProtocol, oauthToken, prettyPrint, key, fields, alt, uploadType, accessToken, quotaUser, paramCallback, $xgafv);
        // TODO: test validations
    }

    /**
     * Creates a NotebookExecutionJob.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void aiplatformProjectsLocationsNotebookExecutionJobsCreateTest() throws ApiException {
        String projectsId = null;
        String locationsId = null;
        String notebookExecutionJobId = null;
        String uploadProtocol = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String key = null;
        String fields = null;
        String alt = null;
        String uploadType = null;
        String accessToken = null;
        String quotaUser = null;
        String paramCallback = null;
        String $xgafv = null;
        GoogleCloudAiplatformV1NotebookExecutionJob googleCloudAiplatformV1NotebookExecutionJob = null;
        GoogleLongrunningOperation response = api.aiplatformProjectsLocationsNotebookExecutionJobsCreate(projectsId, locationsId, notebookExecutionJobId, uploadProtocol, oauthToken, prettyPrint, key, fields, alt, uploadType, accessToken, quotaUser, paramCallback, $xgafv, googleCloudAiplatformV1NotebookExecutionJob);
        // TODO: test validations
    }

    /**
     * Deletes a NotebookExecutionJob.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void aiplatformProjectsLocationsNotebookExecutionJobsDeleteTest() throws ApiException {
        String projectsId = null;
        String locationsId = null;
        String notebookExecutionJobsId = null;
        String uploadProtocol = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String key = null;
        String fields = null;
        String alt = null;
        String uploadType = null;
        String accessToken = null;
        String quotaUser = null;
        String paramCallback = null;
        String $xgafv = null;
        GoogleLongrunningOperation response = api.aiplatformProjectsLocationsNotebookExecutionJobsDelete(projectsId, locationsId, notebookExecutionJobsId, uploadProtocol, oauthToken, prettyPrint, key, fields, alt, uploadType, accessToken, quotaUser, paramCallback, $xgafv);
        // TODO: test validations
    }

    /**
     * Gets a NotebookExecutionJob.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void aiplatformProjectsLocationsNotebookExecutionJobsGetTest() throws ApiException {
        String projectsId = null;
        String locationsId = null;
        String notebookExecutionJobsId = null;
        String view = null;
        String uploadProtocol = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String key = null;
        String fields = null;
        String alt = null;
        String uploadType = null;
        String accessToken = null;
        String quotaUser = null;
        String paramCallback = null;
        String $xgafv = null;
        GoogleCloudAiplatformV1NotebookExecutionJob response = api.aiplatformProjectsLocationsNotebookExecutionJobsGet(projectsId, locationsId, notebookExecutionJobsId, view, uploadProtocol, oauthToken, prettyPrint, key, fields, alt, uploadType, accessToken, quotaUser, paramCallback, $xgafv);
        // TODO: test validations
    }

    /**
     * Lists NotebookExecutionJobs in a Location.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void aiplatformProjectsLocationsNotebookExecutionJobsListTest() throws ApiException {
        String projectsId = null;
        String locationsId = null;
        String view = null;
        String orderBy = null;
        Integer pageSize = null;
        String pageToken = null;
        String filter = null;
        String uploadProtocol = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String key = null;
        String fields = null;
        String alt = null;
        String uploadType = null;
        String accessToken = null;
        String quotaUser = null;
        String paramCallback = null;
        String $xgafv = null;
        GoogleCloudAiplatformV1ListNotebookExecutionJobsResponse response = api.aiplatformProjectsLocationsNotebookExecutionJobsList(projectsId, locationsId, view, orderBy, pageSize, pageToken, filter, uploadProtocol, oauthToken, prettyPrint, key, fields, alt, uploadType, accessToken, quotaUser, paramCallback, $xgafv);
        // TODO: test validations
    }

    /**
     * Starts asynchronous cancellation on a long-running operation. The server makes a best effort to cancel the operation, but success is not guaranteed. If the server doesn&#39;t support this method, it returns &#x60;google.rpc.Code.UNIMPLEMENTED&#x60;. Clients can use Operations.GetOperation or other methods to check whether the cancellation succeeded or whether the operation completed despite cancellation. On successful cancellation, the operation is not deleted; instead, it becomes an operation with an Operation.error value with a google.rpc.Status.code of 1, corresponding to &#x60;Code.CANCELLED&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void aiplatformProjectsLocationsNotebookExecutionJobsOperationsCancelTest() throws ApiException {
        String projectsId = null;
        String locationsId = null;
        String notebookExecutionJobsId = null;
        String operationsId = null;
        String uploadProtocol = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String key = null;
        String fields = null;
        String alt = null;
        String uploadType = null;
        String accessToken = null;
        String quotaUser = null;
        String paramCallback = null;
        String $xgafv = null;
        Object response = api.aiplatformProjectsLocationsNotebookExecutionJobsOperationsCancel(projectsId, locationsId, notebookExecutionJobsId, operationsId, uploadProtocol, oauthToken, prettyPrint, key, fields, alt, uploadType, accessToken, quotaUser, paramCallback, $xgafv);
        // TODO: test validations
    }

    /**
     * Deletes a long-running operation. This method indicates that the client is no longer interested in the operation result. It does not cancel the operation. If the server doesn&#39;t support this method, it returns &#x60;google.rpc.Code.UNIMPLEMENTED&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void aiplatformProjectsLocationsNotebookExecutionJobsOperationsDeleteTest() throws ApiException {
        String projectsId = null;
        String locationsId = null;
        String notebookExecutionJobsId = null;
        String operationsId = null;
        String uploadProtocol = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String key = null;
        String fields = null;
        String alt = null;
        String uploadType = null;
        String accessToken = null;
        String quotaUser = null;
        String paramCallback = null;
        String $xgafv = null;
        Object response = api.aiplatformProjectsLocationsNotebookExecutionJobsOperationsDelete(projectsId, locationsId, notebookExecutionJobsId, operationsId, uploadProtocol, oauthToken, prettyPrint, key, fields, alt, uploadType, accessToken, quotaUser, paramCallback, $xgafv);
        // TODO: test validations
    }

    /**
     * Gets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void aiplatformProjectsLocationsNotebookExecutionJobsOperationsGetTest() throws ApiException {
        String projectsId = null;
        String locationsId = null;
        String notebookExecutionJobsId = null;
        String operationsId = null;
        String uploadProtocol = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String key = null;
        String fields = null;
        String alt = null;
        String uploadType = null;
        String accessToken = null;
        String quotaUser = null;
        String paramCallback = null;
        String $xgafv = null;
        GoogleLongrunningOperation response = api.aiplatformProjectsLocationsNotebookExecutionJobsOperationsGet(projectsId, locationsId, notebookExecutionJobsId, operationsId, uploadProtocol, oauthToken, prettyPrint, key, fields, alt, uploadType, accessToken, quotaUser, paramCallback, $xgafv);
        // TODO: test validations
    }

    /**
     * Lists operations that match the specified filter in the request. If the server doesn&#39;t support this method, it returns &#x60;UNIMPLEMENTED&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void aiplatformProjectsLocationsNotebookExecutionJobsOperationsListTest() throws ApiException {
        String projectsId = null;
        String locationsId = null;
        String notebookExecutionJobsId = null;
        Integer pageSize = null;
        String filter = null;
        String pageToken = null;
        String uploadProtocol = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String key = null;
        String fields = null;
        String alt = null;
        String uploadType = null;
        String accessToken = null;
        String quotaUser = null;
        String paramCallback = null;
        String $xgafv = null;
        GoogleLongrunningListOperationsResponse response = api.aiplatformProjectsLocationsNotebookExecutionJobsOperationsList(projectsId, locationsId, notebookExecutionJobsId, pageSize, filter, pageToken, uploadProtocol, oauthToken, prettyPrint, key, fields, alt, uploadType, accessToken, quotaUser, paramCallback, $xgafv);
        // TODO: test validations
    }

    /**
     * Waits until the specified long-running operation is done or reaches at most a specified timeout, returning the latest state. If the operation is already done, the latest state is immediately returned. If the timeout specified is greater than the default HTTP/RPC timeout, the HTTP/RPC timeout is used. If the server does not support this method, it returns &#x60;google.rpc.Code.UNIMPLEMENTED&#x60;. Note that this method is on a best-effort basis. It may return the latest state before the specified timeout (including immediately), meaning even an immediate response is no guarantee that the operation is done.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void aiplatformProjectsLocationsNotebookExecutionJobsOperationsWaitTest() throws ApiException {
        String projectsId = null;
        String locationsId = null;
        String notebookExecutionJobsId = null;
        String operationsId = null;
        String timeout = null;
        String uploadProtocol = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String key = null;
        String fields = null;
        String alt = null;
        String uploadType = null;
        String accessToken = null;
        String quotaUser = null;
        String paramCallback = null;
        String $xgafv = null;
        GoogleLongrunningOperation response = api.aiplatformProjectsLocationsNotebookExecutionJobsOperationsWait(projectsId, locationsId, notebookExecutionJobsId, operationsId, timeout, uploadProtocol, oauthToken, prettyPrint, key, fields, alt, uploadType, accessToken, quotaUser, paramCallback, $xgafv);
        // TODO: test validations
    }

    /**
     * Creates a NotebookRuntimeTemplate.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void aiplatformProjectsLocationsNotebookRuntimeTemplatesCreateTest() throws ApiException {
        String projectsId = null;
        String locationsId = null;
        String notebookRuntimeTemplateId = null;
        String uploadProtocol = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String key = null;
        String fields = null;
        String alt = null;
        String uploadType = null;
        String accessToken = null;
        String quotaUser = null;
        String paramCallback = null;
        String $xgafv = null;
        GoogleCloudAiplatformV1NotebookRuntimeTemplate googleCloudAiplatformV1NotebookRuntimeTemplate = null;
        GoogleLongrunningOperation response = api.aiplatformProjectsLocationsNotebookRuntimeTemplatesCreate(projectsId, locationsId, notebookRuntimeTemplateId, uploadProtocol, oauthToken, prettyPrint, key, fields, alt, uploadType, accessToken, quotaUser, paramCallback, $xgafv, googleCloudAiplatformV1NotebookRuntimeTemplate);
        // TODO: test validations
    }

    /**
     * Deletes a NotebookRuntimeTemplate.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void aiplatformProjectsLocationsNotebookRuntimeTemplatesDeleteTest() throws ApiException {
        String projectsId = null;
        String locationsId = null;
        String notebookRuntimeTemplatesId = null;
        String uploadProtocol = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String key = null;
        String fields = null;
        String alt = null;
        String uploadType = null;
        String accessToken = null;
        String quotaUser = null;
        String paramCallback = null;
        String $xgafv = null;
        GoogleLongrunningOperation response = api.aiplatformProjectsLocationsNotebookRuntimeTemplatesDelete(projectsId, locationsId, notebookRuntimeTemplatesId, uploadProtocol, oauthToken, prettyPrint, key, fields, alt, uploadType, accessToken, quotaUser, paramCallback, $xgafv);
        // TODO: test validations
    }

    /**
     * Gets a NotebookRuntimeTemplate.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void aiplatformProjectsLocationsNotebookRuntimeTemplatesGetTest() throws ApiException {
        String projectsId = null;
        String locationsId = null;
        String notebookRuntimeTemplatesId = null;
        String uploadProtocol = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String key = null;
        String fields = null;
        String alt = null;
        String uploadType = null;
        String accessToken = null;
        String quotaUser = null;
        String paramCallback = null;
        String $xgafv = null;
        GoogleCloudAiplatformV1NotebookRuntimeTemplate response = api.aiplatformProjectsLocationsNotebookRuntimeTemplatesGet(projectsId, locationsId, notebookRuntimeTemplatesId, uploadProtocol, oauthToken, prettyPrint, key, fields, alt, uploadType, accessToken, quotaUser, paramCallback, $xgafv);
        // TODO: test validations
    }

    /**
     * Gets the access control policy for a resource. Returns an empty policy if the resource exists and does not have a policy set.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void aiplatformProjectsLocationsNotebookRuntimeTemplatesGetIamPolicyTest() throws ApiException {
        String projectsId = null;
        String locationsId = null;
        String notebookRuntimeTemplatesId = null;
        Integer optionsRequestedPolicyVersion = null;
        String uploadProtocol = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String key = null;
        String fields = null;
        String alt = null;
        String uploadType = null;
        String accessToken = null;
        String quotaUser = null;
        String paramCallback = null;
        String $xgafv = null;
        GoogleIamV1Policy response = api.aiplatformProjectsLocationsNotebookRuntimeTemplatesGetIamPolicy(projectsId, locationsId, notebookRuntimeTemplatesId, optionsRequestedPolicyVersion, uploadProtocol, oauthToken, prettyPrint, key, fields, alt, uploadType, accessToken, quotaUser, paramCallback, $xgafv);
        // TODO: test validations
    }

    /**
     * Lists NotebookRuntimeTemplates in a Location.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void aiplatformProjectsLocationsNotebookRuntimeTemplatesListTest() throws ApiException {
        String projectsId = null;
        String locationsId = null;
        String filter = null;
        String readMask = null;
        String pageToken = null;
        String orderBy = null;
        Integer pageSize = null;
        String uploadProtocol = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String key = null;
        String fields = null;
        String alt = null;
        String uploadType = null;
        String accessToken = null;
        String quotaUser = null;
        String paramCallback = null;
        String $xgafv = null;
        GoogleCloudAiplatformV1ListNotebookRuntimeTemplatesResponse response = api.aiplatformProjectsLocationsNotebookRuntimeTemplatesList(projectsId, locationsId, filter, readMask, pageToken, orderBy, pageSize, uploadProtocol, oauthToken, prettyPrint, key, fields, alt, uploadType, accessToken, quotaUser, paramCallback, $xgafv);
        // TODO: test validations
    }

    /**
     * Starts asynchronous cancellation on a long-running operation. The server makes a best effort to cancel the operation, but success is not guaranteed. If the server doesn&#39;t support this method, it returns &#x60;google.rpc.Code.UNIMPLEMENTED&#x60;. Clients can use Operations.GetOperation or other methods to check whether the cancellation succeeded or whether the operation completed despite cancellation. On successful cancellation, the operation is not deleted; instead, it becomes an operation with an Operation.error value with a google.rpc.Status.code of 1, corresponding to &#x60;Code.CANCELLED&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void aiplatformProjectsLocationsNotebookRuntimeTemplatesOperationsCancelTest() throws ApiException {
        String projectsId = null;
        String locationsId = null;
        String notebookRuntimeTemplatesId = null;
        String operationsId = null;
        String uploadProtocol = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String key = null;
        String fields = null;
        String alt = null;
        String uploadType = null;
        String accessToken = null;
        String quotaUser = null;
        String paramCallback = null;
        String $xgafv = null;
        Object response = api.aiplatformProjectsLocationsNotebookRuntimeTemplatesOperationsCancel(projectsId, locationsId, notebookRuntimeTemplatesId, operationsId, uploadProtocol, oauthToken, prettyPrint, key, fields, alt, uploadType, accessToken, quotaUser, paramCallback, $xgafv);
        // TODO: test validations
    }

    /**
     * Deletes a long-running operation. This method indicates that the client is no longer interested in the operation result. It does not cancel the operation. If the server doesn&#39;t support this method, it returns &#x60;google.rpc.Code.UNIMPLEMENTED&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void aiplatformProjectsLocationsNotebookRuntimeTemplatesOperationsDeleteTest() throws ApiException {
        String projectsId = null;
        String locationsId = null;
        String notebookRuntimeTemplatesId = null;
        String operationsId = null;
        String uploadProtocol = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String key = null;
        String fields = null;
        String alt = null;
        String uploadType = null;
        String accessToken = null;
        String quotaUser = null;
        String paramCallback = null;
        String $xgafv = null;
        Object response = api.aiplatformProjectsLocationsNotebookRuntimeTemplatesOperationsDelete(projectsId, locationsId, notebookRuntimeTemplatesId, operationsId, uploadProtocol, oauthToken, prettyPrint, key, fields, alt, uploadType, accessToken, quotaUser, paramCallback, $xgafv);
        // TODO: test validations
    }

    /**
     * Gets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void aiplatformProjectsLocationsNotebookRuntimeTemplatesOperationsGetTest() throws ApiException {
        String projectsId = null;
        String locationsId = null;
        String notebookRuntimeTemplatesId = null;
        String operationsId = null;
        String uploadProtocol = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String key = null;
        String fields = null;
        String alt = null;
        String uploadType = null;
        String accessToken = null;
        String quotaUser = null;
        String paramCallback = null;
        String $xgafv = null;
        GoogleLongrunningOperation response = api.aiplatformProjectsLocationsNotebookRuntimeTemplatesOperationsGet(projectsId, locationsId, notebookRuntimeTemplatesId, operationsId, uploadProtocol, oauthToken, prettyPrint, key, fields, alt, uploadType, accessToken, quotaUser, paramCallback, $xgafv);
        // TODO: test validations
    }

    /**
     * Lists operations that match the specified filter in the request. If the server doesn&#39;t support this method, it returns &#x60;UNIMPLEMENTED&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void aiplatformProjectsLocationsNotebookRuntimeTemplatesOperationsListTest() throws ApiException {
        String projectsId = null;
        String locationsId = null;
        String notebookRuntimeTemplatesId = null;
        String pageToken = null;
        Integer pageSize = null;
        String filter = null;
        String uploadProtocol = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String key = null;
        String fields = null;
        String alt = null;
        String uploadType = null;
        String accessToken = null;
        String quotaUser = null;
        String paramCallback = null;
        String $xgafv = null;
        GoogleLongrunningListOperationsResponse response = api.aiplatformProjectsLocationsNotebookRuntimeTemplatesOperationsList(projectsId, locationsId, notebookRuntimeTemplatesId, pageToken, pageSize, filter, uploadProtocol, oauthToken, prettyPrint, key, fields, alt, uploadType, accessToken, quotaUser, paramCallback, $xgafv);
        // TODO: test validations
    }

    /**
     * Waits until the specified long-running operation is done or reaches at most a specified timeout, returning the latest state. If the operation is already done, the latest state is immediately returned. If the timeout specified is greater than the default HTTP/RPC timeout, the HTTP/RPC timeout is used. If the server does not support this method, it returns &#x60;google.rpc.Code.UNIMPLEMENTED&#x60;. Note that this method is on a best-effort basis. It may return the latest state before the specified timeout (including immediately), meaning even an immediate response is no guarantee that the operation is done.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void aiplatformProjectsLocationsNotebookRuntimeTemplatesOperationsWaitTest() throws ApiException {
        String projectsId = null;
        String locationsId = null;
        String notebookRuntimeTemplatesId = null;
        String operationsId = null;
        String timeout = null;
        String uploadProtocol = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String key = null;
        String fields = null;
        String alt = null;
        String uploadType = null;
        String accessToken = null;
        String quotaUser = null;
        String paramCallback = null;
        String $xgafv = null;
        GoogleLongrunningOperation response = api.aiplatformProjectsLocationsNotebookRuntimeTemplatesOperationsWait(projectsId, locationsId, notebookRuntimeTemplatesId, operationsId, timeout, uploadProtocol, oauthToken, prettyPrint, key, fields, alt, uploadType, accessToken, quotaUser, paramCallback, $xgafv);
        // TODO: test validations
    }

    /**
     * Updates a NotebookRuntimeTemplate.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void aiplatformProjectsLocationsNotebookRuntimeTemplatesPatchTest() throws ApiException {
        String projectsId = null;
        String locationsId = null;
        String notebookRuntimeTemplatesId = null;
        String updateMask = null;
        String uploadProtocol = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String key = null;
        String fields = null;
        String alt = null;
        String uploadType = null;
        String accessToken = null;
        String quotaUser = null;
        String paramCallback = null;
        String $xgafv = null;
        GoogleCloudAiplatformV1NotebookRuntimeTemplate googleCloudAiplatformV1NotebookRuntimeTemplate = null;
        GoogleCloudAiplatformV1NotebookRuntimeTemplate response = api.aiplatformProjectsLocationsNotebookRuntimeTemplatesPatch(projectsId, locationsId, notebookRuntimeTemplatesId, updateMask, uploadProtocol, oauthToken, prettyPrint, key, fields, alt, uploadType, accessToken, quotaUser, paramCallback, $xgafv, googleCloudAiplatformV1NotebookRuntimeTemplate);
        // TODO: test validations
    }

    /**
     * Sets the access control policy on the specified resource. Replaces any existing policy. Can return &#x60;NOT_FOUND&#x60;, &#x60;INVALID_ARGUMENT&#x60;, and &#x60;PERMISSION_DENIED&#x60; errors.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void aiplatformProjectsLocationsNotebookRuntimeTemplatesSetIamPolicyTest() throws ApiException {
        String projectsId = null;
        String locationsId = null;
        String notebookRuntimeTemplatesId = null;
        String uploadProtocol = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String key = null;
        String fields = null;
        String alt = null;
        String uploadType = null;
        String accessToken = null;
        String quotaUser = null;
        String paramCallback = null;
        String $xgafv = null;
        GoogleIamV1SetIamPolicyRequest googleIamV1SetIamPolicyRequest = null;
        GoogleIamV1Policy response = api.aiplatformProjectsLocationsNotebookRuntimeTemplatesSetIamPolicy(projectsId, locationsId, notebookRuntimeTemplatesId, uploadProtocol, oauthToken, prettyPrint, key, fields, alt, uploadType, accessToken, quotaUser, paramCallback, $xgafv, googleIamV1SetIamPolicyRequest);
        // TODO: test validations
    }

    /**
     * Returns permissions that a caller has on the specified resource. If the resource does not exist, this will return an empty set of permissions, not a &#x60;NOT_FOUND&#x60; error. Note: This operation is designed to be used for building permission-aware UIs and command-line tools, not for authorization checking. This operation may \&quot;fail open\&quot; without warning.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void aiplatformProjectsLocationsNotebookRuntimeTemplatesTestIamPermissionsTest() throws ApiException {
        String projectsId = null;
        String locationsId = null;
        String notebookRuntimeTemplatesId = null;
        String permissions = null;
        String uploadProtocol = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String key = null;
        String fields = null;
        String alt = null;
        String uploadType = null;
        String accessToken = null;
        String quotaUser = null;
        String paramCallback = null;
        String $xgafv = null;
        GoogleIamV1TestIamPermissionsResponse response = api.aiplatformProjectsLocationsNotebookRuntimeTemplatesTestIamPermissions(projectsId, locationsId, notebookRuntimeTemplatesId, permissions, uploadProtocol, oauthToken, prettyPrint, key, fields, alt, uploadType, accessToken, quotaUser, paramCallback, $xgafv);
        // TODO: test validations
    }

    /**
     * Assigns a NotebookRuntime to a user for a particular Notebook file. This method will either returns an existing assignment or generates a new one.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void aiplatformProjectsLocationsNotebookRuntimesAssignTest() throws ApiException {
        String projectsId = null;
        String locationsId = null;
        String uploadProtocol = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String key = null;
        String fields = null;
        String alt = null;
        String uploadType = null;
        String accessToken = null;
        String quotaUser = null;
        String paramCallback = null;
        String $xgafv = null;
        GoogleCloudAiplatformV1AssignNotebookRuntimeRequest googleCloudAiplatformV1AssignNotebookRuntimeRequest = null;
        GoogleLongrunningOperation response = api.aiplatformProjectsLocationsNotebookRuntimesAssign(projectsId, locationsId, uploadProtocol, oauthToken, prettyPrint, key, fields, alt, uploadType, accessToken, quotaUser, paramCallback, $xgafv, googleCloudAiplatformV1AssignNotebookRuntimeRequest);
        // TODO: test validations
    }

    /**
     * Deletes a NotebookRuntime.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void aiplatformProjectsLocationsNotebookRuntimesDeleteTest() throws ApiException {
        String projectsId = null;
        String locationsId = null;
        String notebookRuntimesId = null;
        String uploadProtocol = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String key = null;
        String fields = null;
        String alt = null;
        String uploadType = null;
        String accessToken = null;
        String quotaUser = null;
        String paramCallback = null;
        String $xgafv = null;
        GoogleLongrunningOperation response = api.aiplatformProjectsLocationsNotebookRuntimesDelete(projectsId, locationsId, notebookRuntimesId, uploadProtocol, oauthToken, prettyPrint, key, fields, alt, uploadType, accessToken, quotaUser, paramCallback, $xgafv);
        // TODO: test validations
    }

    /**
     * Gets a NotebookRuntime.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void aiplatformProjectsLocationsNotebookRuntimesGetTest() throws ApiException {
        String projectsId = null;
        String locationsId = null;
        String notebookRuntimesId = null;
        String uploadProtocol = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String key = null;
        String fields = null;
        String alt = null;
        String uploadType = null;
        String accessToken = null;
        String quotaUser = null;
        String paramCallback = null;
        String $xgafv = null;
        GoogleCloudAiplatformV1NotebookRuntime response = api.aiplatformProjectsLocationsNotebookRuntimesGet(projectsId, locationsId, notebookRuntimesId, uploadProtocol, oauthToken, prettyPrint, key, fields, alt, uploadType, accessToken, quotaUser, paramCallback, $xgafv);
        // TODO: test validations
    }

    /**
     * Lists NotebookRuntimes in a Location.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void aiplatformProjectsLocationsNotebookRuntimesListTest() throws ApiException {
        String projectsId = null;
        String locationsId = null;
        String filter = null;
        String pageToken = null;
        String orderBy = null;
        String readMask = null;
        Integer pageSize = null;
        String uploadProtocol = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String key = null;
        String fields = null;
        String alt = null;
        String uploadType = null;
        String accessToken = null;
        String quotaUser = null;
        String paramCallback = null;
        String $xgafv = null;
        GoogleCloudAiplatformV1ListNotebookRuntimesResponse response = api.aiplatformProjectsLocationsNotebookRuntimesList(projectsId, locationsId, filter, pageToken, orderBy, readMask, pageSize, uploadProtocol, oauthToken, prettyPrint, key, fields, alt, uploadType, accessToken, quotaUser, paramCallback, $xgafv);
        // TODO: test validations
    }

    /**
     * Starts asynchronous cancellation on a long-running operation. The server makes a best effort to cancel the operation, but success is not guaranteed. If the server doesn&#39;t support this method, it returns &#x60;google.rpc.Code.UNIMPLEMENTED&#x60;. Clients can use Operations.GetOperation or other methods to check whether the cancellation succeeded or whether the operation completed despite cancellation. On successful cancellation, the operation is not deleted; instead, it becomes an operation with an Operation.error value with a google.rpc.Status.code of 1, corresponding to &#x60;Code.CANCELLED&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void aiplatformProjectsLocationsNotebookRuntimesOperationsCancelTest() throws ApiException {
        String projectsId = null;
        String locationsId = null;
        String notebookRuntimesId = null;
        String operationsId = null;
        String uploadProtocol = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String key = null;
        String fields = null;
        String alt = null;
        String uploadType = null;
        String accessToken = null;
        String quotaUser = null;
        String paramCallback = null;
        String $xgafv = null;
        Object response = api.aiplatformProjectsLocationsNotebookRuntimesOperationsCancel(projectsId, locationsId, notebookRuntimesId, operationsId, uploadProtocol, oauthToken, prettyPrint, key, fields, alt, uploadType, accessToken, quotaUser, paramCallback, $xgafv);
        // TODO: test validations
    }

    /**
     * Deletes a long-running operation. This method indicates that the client is no longer interested in the operation result. It does not cancel the operation. If the server doesn&#39;t support this method, it returns &#x60;google.rpc.Code.UNIMPLEMENTED&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void aiplatformProjectsLocationsNotebookRuntimesOperationsDeleteTest() throws ApiException {
        String projectsId = null;
        String locationsId = null;
        String notebookRuntimesId = null;
        String operationsId = null;
        String uploadProtocol = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String key = null;
        String fields = null;
        String alt = null;
        String uploadType = null;
        String accessToken = null;
        String quotaUser = null;
        String paramCallback = null;
        String $xgafv = null;
        Object response = api.aiplatformProjectsLocationsNotebookRuntimesOperationsDelete(projectsId, locationsId, notebookRuntimesId, operationsId, uploadProtocol, oauthToken, prettyPrint, key, fields, alt, uploadType, accessToken, quotaUser, paramCallback, $xgafv);
        // TODO: test validations
    }

    /**
     * Gets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void aiplatformProjectsLocationsNotebookRuntimesOperationsGetTest() throws ApiException {
        String projectsId = null;
        String locationsId = null;
        String notebookRuntimesId = null;
        String operationsId = null;
        String uploadProtocol = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String key = null;
        String fields = null;
        String alt = null;
        String uploadType = null;
        String accessToken = null;
        String quotaUser = null;
        String paramCallback = null;
        String $xgafv = null;
        GoogleLongrunningOperation response = api.aiplatformProjectsLocationsNotebookRuntimesOperationsGet(projectsId, locationsId, notebookRuntimesId, operationsId, uploadProtocol, oauthToken, prettyPrint, key, fields, alt, uploadType, accessToken, quotaUser, paramCallback, $xgafv);
        // TODO: test validations
    }

    /**
     * Lists operations that match the specified filter in the request. If the server doesn&#39;t support this method, it returns &#x60;UNIMPLEMENTED&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void aiplatformProjectsLocationsNotebookRuntimesOperationsListTest() throws ApiException {
        String projectsId = null;
        String locationsId = null;
        String notebookRuntimesId = null;
        String pageToken = null;
        String filter = null;
        Integer pageSize = null;
        String uploadProtocol = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String key = null;
        String fields = null;
        String alt = null;
        String uploadType = null;
        String accessToken = null;
        String quotaUser = null;
        String paramCallback = null;
        String $xgafv = null;
        GoogleLongrunningListOperationsResponse response = api.aiplatformProjectsLocationsNotebookRuntimesOperationsList(projectsId, locationsId, notebookRuntimesId, pageToken, filter, pageSize, uploadProtocol, oauthToken, prettyPrint, key, fields, alt, uploadType, accessToken, quotaUser, paramCallback, $xgafv);
        // TODO: test validations
    }

    /**
     * Waits until the specified long-running operation is done or reaches at most a specified timeout, returning the latest state. If the operation is already done, the latest state is immediately returned. If the timeout specified is greater than the default HTTP/RPC timeout, the HTTP/RPC timeout is used. If the server does not support this method, it returns &#x60;google.rpc.Code.UNIMPLEMENTED&#x60;. Note that this method is on a best-effort basis. It may return the latest state before the specified timeout (including immediately), meaning even an immediate response is no guarantee that the operation is done.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void aiplatformProjectsLocationsNotebookRuntimesOperationsWaitTest() throws ApiException {
        String projectsId = null;
        String locationsId = null;
        String notebookRuntimesId = null;
        String operationsId = null;
        String timeout = null;
        String uploadProtocol = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String key = null;
        String fields = null;
        String alt = null;
        String uploadType = null;
        String accessToken = null;
        String quotaUser = null;
        String paramCallback = null;
        String $xgafv = null;
        GoogleLongrunningOperation response = api.aiplatformProjectsLocationsNotebookRuntimesOperationsWait(projectsId, locationsId, notebookRuntimesId, operationsId, timeout, uploadProtocol, oauthToken, prettyPrint, key, fields, alt, uploadType, accessToken, quotaUser, paramCallback, $xgafv);
        // TODO: test validations
    }

    /**
     * Starts a NotebookRuntime.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void aiplatformProjectsLocationsNotebookRuntimesStartTest() throws ApiException {
        String projectsId = null;
        String locationsId = null;
        String notebookRuntimesId = null;
        String uploadProtocol = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String key = null;
        String fields = null;
        String alt = null;
        String uploadType = null;
        String accessToken = null;
        String quotaUser = null;
        String paramCallback = null;
        String $xgafv = null;
        Object body = null;
        GoogleLongrunningOperation response = api.aiplatformProjectsLocationsNotebookRuntimesStart(projectsId, locationsId, notebookRuntimesId, uploadProtocol, oauthToken, prettyPrint, key, fields, alt, uploadType, accessToken, quotaUser, paramCallback, $xgafv, body);
        // TODO: test validations
    }

    /**
     * Upgrades a NotebookRuntime.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void aiplatformProjectsLocationsNotebookRuntimesUpgradeTest() throws ApiException {
        String projectsId = null;
        String locationsId = null;
        String notebookRuntimesId = null;
        String uploadProtocol = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String key = null;
        String fields = null;
        String alt = null;
        String uploadType = null;
        String accessToken = null;
        String quotaUser = null;
        String paramCallback = null;
        String $xgafv = null;
        Object body = null;
        GoogleLongrunningOperation response = api.aiplatformProjectsLocationsNotebookRuntimesUpgrade(projectsId, locationsId, notebookRuntimesId, uploadProtocol, oauthToken, prettyPrint, key, fields, alt, uploadType, accessToken, quotaUser, paramCallback, $xgafv, body);
        // TODO: test validations
    }

    /**
     * Starts asynchronous cancellation on a long-running operation. The server makes a best effort to cancel the operation, but success is not guaranteed. If the server doesn&#39;t support this method, it returns &#x60;google.rpc.Code.UNIMPLEMENTED&#x60;. Clients can use Operations.GetOperation or other methods to check whether the cancellation succeeded or whether the operation completed despite cancellation. On successful cancellation, the operation is not deleted; instead, it becomes an operation with an Operation.error value with a google.rpc.Status.code of 1, corresponding to &#x60;Code.CANCELLED&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void aiplatformProjectsLocationsOperationsCancelTest() throws ApiException {
        String projectsId = null;
        String locationsId = null;
        String operationsId = null;
        String uploadProtocol = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String key = null;
        String fields = null;
        String alt = null;
        String uploadType = null;
        String accessToken = null;
        String quotaUser = null;
        String paramCallback = null;
        String $xgafv = null;
        Object response = api.aiplatformProjectsLocationsOperationsCancel(projectsId, locationsId, operationsId, uploadProtocol, oauthToken, prettyPrint, key, fields, alt, uploadType, accessToken, quotaUser, paramCallback, $xgafv);
        // TODO: test validations
    }

    /**
     * Deletes a long-running operation. This method indicates that the client is no longer interested in the operation result. It does not cancel the operation. If the server doesn&#39;t support this method, it returns &#x60;google.rpc.Code.UNIMPLEMENTED&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void aiplatformProjectsLocationsOperationsDeleteTest() throws ApiException {
        String projectsId = null;
        String locationsId = null;
        String operationsId = null;
        String uploadProtocol = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String key = null;
        String fields = null;
        String alt = null;
        String uploadType = null;
        String accessToken = null;
        String quotaUser = null;
        String paramCallback = null;
        String $xgafv = null;
        Object response = api.aiplatformProjectsLocationsOperationsDelete(projectsId, locationsId, operationsId, uploadProtocol, oauthToken, prettyPrint, key, fields, alt, uploadType, accessToken, quotaUser, paramCallback, $xgafv);
        // TODO: test validations
    }

    /**
     * Gets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void aiplatformProjectsLocationsOperationsGetTest() throws ApiException {
        String projectsId = null;
        String locationsId = null;
        String operationsId = null;
        String uploadProtocol = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String key = null;
        String fields = null;
        String alt = null;
        String uploadType = null;
        String accessToken = null;
        String quotaUser = null;
        String paramCallback = null;
        String $xgafv = null;
        GoogleLongrunningOperation response = api.aiplatformProjectsLocationsOperationsGet(projectsId, locationsId, operationsId, uploadProtocol, oauthToken, prettyPrint, key, fields, alt, uploadType, accessToken, quotaUser, paramCallback, $xgafv);
        // TODO: test validations
    }

    /**
     * Lists operations that match the specified filter in the request. If the server doesn&#39;t support this method, it returns &#x60;UNIMPLEMENTED&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void aiplatformProjectsLocationsOperationsListTest() throws ApiException {
        String projectsId = null;
        String locationsId = null;
        String pageToken = null;
        String filter = null;
        Integer pageSize = null;
        String uploadProtocol = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String key = null;
        String fields = null;
        String alt = null;
        String uploadType = null;
        String accessToken = null;
        String quotaUser = null;
        String paramCallback = null;
        String $xgafv = null;
        GoogleLongrunningListOperationsResponse response = api.aiplatformProjectsLocationsOperationsList(projectsId, locationsId, pageToken, filter, pageSize, uploadProtocol, oauthToken, prettyPrint, key, fields, alt, uploadType, accessToken, quotaUser, paramCallback, $xgafv);
        // TODO: test validations
    }

    /**
     * Waits until the specified long-running operation is done or reaches at most a specified timeout, returning the latest state. If the operation is already done, the latest state is immediately returned. If the timeout specified is greater than the default HTTP/RPC timeout, the HTTP/RPC timeout is used. If the server does not support this method, it returns &#x60;google.rpc.Code.UNIMPLEMENTED&#x60;. Note that this method is on a best-effort basis. It may return the latest state before the specified timeout (including immediately), meaning even an immediate response is no guarantee that the operation is done.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void aiplatformProjectsLocationsOperationsWaitTest() throws ApiException {
        String projectsId = null;
        String locationsId = null;
        String operationsId = null;
        String timeout = null;
        String uploadProtocol = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String key = null;
        String fields = null;
        String alt = null;
        String uploadType = null;
        String accessToken = null;
        String quotaUser = null;
        String paramCallback = null;
        String $xgafv = null;
        GoogleLongrunningOperation response = api.aiplatformProjectsLocationsOperationsWait(projectsId, locationsId, operationsId, timeout, uploadProtocol, oauthToken, prettyPrint, key, fields, alt, uploadType, accessToken, quotaUser, paramCallback, $xgafv);
        // TODO: test validations
    }

    /**
     * Creates a PersistentResource.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void aiplatformProjectsLocationsPersistentResourcesCreateTest() throws ApiException {
        String projectsId = null;
        String locationsId = null;
        String persistentResourceId = null;
        String uploadProtocol = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String key = null;
        String fields = null;
        String alt = null;
        String uploadType = null;
        String accessToken = null;
        String quotaUser = null;
        String paramCallback = null;
        String $xgafv = null;
        GoogleCloudAiplatformV1PersistentResource googleCloudAiplatformV1PersistentResource = null;
        GoogleLongrunningOperation response = api.aiplatformProjectsLocationsPersistentResourcesCreate(projectsId, locationsId, persistentResourceId, uploadProtocol, oauthToken, prettyPrint, key, fields, alt, uploadType, accessToken, quotaUser, paramCallback, $xgafv, googleCloudAiplatformV1PersistentResource);
        // TODO: test validations
    }

    /**
     * Deletes a PersistentResource.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void aiplatformProjectsLocationsPersistentResourcesDeleteTest() throws ApiException {
        String projectsId = null;
        String locationsId = null;
        String persistentResourcesId = null;
        String uploadProtocol = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String key = null;
        String fields = null;
        String alt = null;
        String uploadType = null;
        String accessToken = null;
        String quotaUser = null;
        String paramCallback = null;
        String $xgafv = null;
        GoogleLongrunningOperation response = api.aiplatformProjectsLocationsPersistentResourcesDelete(projectsId, locationsId, persistentResourcesId, uploadProtocol, oauthToken, prettyPrint, key, fields, alt, uploadType, accessToken, quotaUser, paramCallback, $xgafv);
        // TODO: test validations
    }

    /**
     * Gets a PersistentResource.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void aiplatformProjectsLocationsPersistentResourcesGetTest() throws ApiException {
        String projectsId = null;
        String locationsId = null;
        String persistentResourcesId = null;
        String uploadProtocol = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String key = null;
        String fields = null;
        String alt = null;
        String uploadType = null;
        String accessToken = null;
        String quotaUser = null;
        String paramCallback = null;
        String $xgafv = null;
        GoogleCloudAiplatformV1PersistentResource response = api.aiplatformProjectsLocationsPersistentResourcesGet(projectsId, locationsId, persistentResourcesId, uploadProtocol, oauthToken, prettyPrint, key, fields, alt, uploadType, accessToken, quotaUser, paramCallback, $xgafv);
        // TODO: test validations
    }

    /**
     * Lists PersistentResources in a Location.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void aiplatformProjectsLocationsPersistentResourcesListTest() throws ApiException {
        String projectsId = null;
        String locationsId = null;
        Integer pageSize = null;
        String pageToken = null;
        String uploadProtocol = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String key = null;
        String fields = null;
        String alt = null;
        String uploadType = null;
        String accessToken = null;
        String quotaUser = null;
        String paramCallback = null;
        String $xgafv = null;
        GoogleCloudAiplatformV1ListPersistentResourcesResponse response = api.aiplatformProjectsLocationsPersistentResourcesList(projectsId, locationsId, pageSize, pageToken, uploadProtocol, oauthToken, prettyPrint, key, fields, alt, uploadType, accessToken, quotaUser, paramCallback, $xgafv);
        // TODO: test validations
    }

    /**
     * Starts asynchronous cancellation on a long-running operation. The server makes a best effort to cancel the operation, but success is not guaranteed. If the server doesn&#39;t support this method, it returns &#x60;google.rpc.Code.UNIMPLEMENTED&#x60;. Clients can use Operations.GetOperation or other methods to check whether the cancellation succeeded or whether the operation completed despite cancellation. On successful cancellation, the operation is not deleted; instead, it becomes an operation with an Operation.error value with a google.rpc.Status.code of 1, corresponding to &#x60;Code.CANCELLED&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void aiplatformProjectsLocationsPersistentResourcesOperationsCancelTest() throws ApiException {
        String projectsId = null;
        String locationsId = null;
        String persistentResourcesId = null;
        String operationsId = null;
        String uploadProtocol = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String key = null;
        String fields = null;
        String alt = null;
        String uploadType = null;
        String accessToken = null;
        String quotaUser = null;
        String paramCallback = null;
        String $xgafv = null;
        Object response = api.aiplatformProjectsLocationsPersistentResourcesOperationsCancel(projectsId, locationsId, persistentResourcesId, operationsId, uploadProtocol, oauthToken, prettyPrint, key, fields, alt, uploadType, accessToken, quotaUser, paramCallback, $xgafv);
        // TODO: test validations
    }

    /**
     * Deletes a long-running operation. This method indicates that the client is no longer interested in the operation result. It does not cancel the operation. If the server doesn&#39;t support this method, it returns &#x60;google.rpc.Code.UNIMPLEMENTED&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void aiplatformProjectsLocationsPersistentResourcesOperationsDeleteTest() throws ApiException {
        String projectsId = null;
        String locationsId = null;
        String persistentResourcesId = null;
        String operationsId = null;
        String uploadProtocol = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String key = null;
        String fields = null;
        String alt = null;
        String uploadType = null;
        String accessToken = null;
        String quotaUser = null;
        String paramCallback = null;
        String $xgafv = null;
        Object response = api.aiplatformProjectsLocationsPersistentResourcesOperationsDelete(projectsId, locationsId, persistentResourcesId, operationsId, uploadProtocol, oauthToken, prettyPrint, key, fields, alt, uploadType, accessToken, quotaUser, paramCallback, $xgafv);
        // TODO: test validations
    }

    /**
     * Gets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void aiplatformProjectsLocationsPersistentResourcesOperationsGetTest() throws ApiException {
        String projectsId = null;
        String locationsId = null;
        String persistentResourcesId = null;
        String operationsId = null;
        String uploadProtocol = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String key = null;
        String fields = null;
        String alt = null;
        String uploadType = null;
        String accessToken = null;
        String quotaUser = null;
        String paramCallback = null;
        String $xgafv = null;
        GoogleLongrunningOperation response = api.aiplatformProjectsLocationsPersistentResourcesOperationsGet(projectsId, locationsId, persistentResourcesId, operationsId, uploadProtocol, oauthToken, prettyPrint, key, fields, alt, uploadType, accessToken, quotaUser, paramCallback, $xgafv);
        // TODO: test validations
    }

    /**
     * Lists operations that match the specified filter in the request. If the server doesn&#39;t support this method, it returns &#x60;UNIMPLEMENTED&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void aiplatformProjectsLocationsPersistentResourcesOperationsListTest() throws ApiException {
        String projectsId = null;
        String locationsId = null;
        String persistentResourcesId = null;
        Integer pageSize = null;
        String filter = null;
        String pageToken = null;
        String uploadProtocol = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String key = null;
        String fields = null;
        String alt = null;
        String uploadType = null;
        String accessToken = null;
        String quotaUser = null;
        String paramCallback = null;
        String $xgafv = null;
        GoogleLongrunningListOperationsResponse response = api.aiplatformProjectsLocationsPersistentResourcesOperationsList(projectsId, locationsId, persistentResourcesId, pageSize, filter, pageToken, uploadProtocol, oauthToken, prettyPrint, key, fields, alt, uploadType, accessToken, quotaUser, paramCallback, $xgafv);
        // TODO: test validations
    }

    /**
     * Waits until the specified long-running operation is done or reaches at most a specified timeout, returning the latest state. If the operation is already done, the latest state is immediately returned. If the timeout specified is greater than the default HTTP/RPC timeout, the HTTP/RPC timeout is used. If the server does not support this method, it returns &#x60;google.rpc.Code.UNIMPLEMENTED&#x60;. Note that this method is on a best-effort basis. It may return the latest state before the specified timeout (including immediately), meaning even an immediate response is no guarantee that the operation is done.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void aiplatformProjectsLocationsPersistentResourcesOperationsWaitTest() throws ApiException {
        String projectsId = null;
        String locationsId = null;
        String persistentResourcesId = null;
        String operationsId = null;
        String timeout = null;
        String uploadProtocol = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String key = null;
        String fields = null;
        String alt = null;
        String uploadType = null;
        String accessToken = null;
        String quotaUser = null;
        String paramCallback = null;
        String $xgafv = null;
        GoogleLongrunningOperation response = api.aiplatformProjectsLocationsPersistentResourcesOperationsWait(projectsId, locationsId, persistentResourcesId, operationsId, timeout, uploadProtocol, oauthToken, prettyPrint, key, fields, alt, uploadType, accessToken, quotaUser, paramCallback, $xgafv);
        // TODO: test validations
    }

    /**
     * Updates a PersistentResource.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void aiplatformProjectsLocationsPersistentResourcesPatchTest() throws ApiException {
        String projectsId = null;
        String locationsId = null;
        String persistentResourcesId = null;
        String updateMask = null;
        String uploadProtocol = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String key = null;
        String fields = null;
        String alt = null;
        String uploadType = null;
        String accessToken = null;
        String quotaUser = null;
        String paramCallback = null;
        String $xgafv = null;
        GoogleCloudAiplatformV1PersistentResource googleCloudAiplatformV1PersistentResource = null;
        GoogleLongrunningOperation response = api.aiplatformProjectsLocationsPersistentResourcesPatch(projectsId, locationsId, persistentResourcesId, updateMask, uploadProtocol, oauthToken, prettyPrint, key, fields, alt, uploadType, accessToken, quotaUser, paramCallback, $xgafv, googleCloudAiplatformV1PersistentResource);
        // TODO: test validations
    }

    /**
     * Reboots a PersistentResource.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void aiplatformProjectsLocationsPersistentResourcesRebootTest() throws ApiException {
        String projectsId = null;
        String locationsId = null;
        String persistentResourcesId = null;
        String uploadProtocol = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String key = null;
        String fields = null;
        String alt = null;
        String uploadType = null;
        String accessToken = null;
        String quotaUser = null;
        String paramCallback = null;
        String $xgafv = null;
        Object body = null;
        GoogleLongrunningOperation response = api.aiplatformProjectsLocationsPersistentResourcesReboot(projectsId, locationsId, persistentResourcesId, uploadProtocol, oauthToken, prettyPrint, key, fields, alt, uploadType, accessToken, quotaUser, paramCallback, $xgafv, body);
        // TODO: test validations
    }

    /**
     * Batch cancel PipelineJobs. Firstly the server will check if all the jobs are in non-terminal states, and skip the jobs that are already terminated. If the operation failed, none of the pipeline jobs are cancelled. The server will poll the states of all the pipeline jobs periodically to check the cancellation status. This operation will return an LRO.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void aiplatformProjectsLocationsPipelineJobsBatchCancelTest() throws ApiException {
        String projectsId = null;
        String locationsId = null;
        String uploadProtocol = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String key = null;
        String fields = null;
        String alt = null;
        String uploadType = null;
        String accessToken = null;
        String quotaUser = null;
        String paramCallback = null;
        String $xgafv = null;
        GoogleCloudAiplatformV1BatchCancelPipelineJobsRequest googleCloudAiplatformV1BatchCancelPipelineJobsRequest = null;
        GoogleLongrunningOperation response = api.aiplatformProjectsLocationsPipelineJobsBatchCancel(projectsId, locationsId, uploadProtocol, oauthToken, prettyPrint, key, fields, alt, uploadType, accessToken, quotaUser, paramCallback, $xgafv, googleCloudAiplatformV1BatchCancelPipelineJobsRequest);
        // TODO: test validations
    }

    /**
     * Batch deletes PipelineJobs The Operation is atomic. If it fails, none of the PipelineJobs are deleted. If it succeeds, all of the PipelineJobs are deleted.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void aiplatformProjectsLocationsPipelineJobsBatchDeleteTest() throws ApiException {
        String projectsId = null;
        String locationsId = null;
        String uploadProtocol = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String key = null;
        String fields = null;
        String alt = null;
        String uploadType = null;
        String accessToken = null;
        String quotaUser = null;
        String paramCallback = null;
        String $xgafv = null;
        GoogleCloudAiplatformV1BatchDeletePipelineJobsRequest googleCloudAiplatformV1BatchDeletePipelineJobsRequest = null;
        GoogleLongrunningOperation response = api.aiplatformProjectsLocationsPipelineJobsBatchDelete(projectsId, locationsId, uploadProtocol, oauthToken, prettyPrint, key, fields, alt, uploadType, accessToken, quotaUser, paramCallback, $xgafv, googleCloudAiplatformV1BatchDeletePipelineJobsRequest);
        // TODO: test validations
    }

    /**
     * Cancels a PipelineJob. Starts asynchronous cancellation on the PipelineJob. The server makes a best effort to cancel the pipeline, but success is not guaranteed. Clients can use PipelineService.GetPipelineJob or other methods to check whether the cancellation succeeded or whether the pipeline completed despite cancellation. On successful cancellation, the PipelineJob is not deleted; instead it becomes a pipeline with a PipelineJob.error value with a google.rpc.Status.code of 1, corresponding to &#x60;Code.CANCELLED&#x60;, and PipelineJob.state is set to &#x60;CANCELLED&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void aiplatformProjectsLocationsPipelineJobsCancelTest() throws ApiException {
        String projectsId = null;
        String locationsId = null;
        String pipelineJobsId = null;
        String uploadProtocol = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String key = null;
        String fields = null;
        String alt = null;
        String uploadType = null;
        String accessToken = null;
        String quotaUser = null;
        String paramCallback = null;
        String $xgafv = null;
        Object body = null;
        Object response = api.aiplatformProjectsLocationsPipelineJobsCancel(projectsId, locationsId, pipelineJobsId, uploadProtocol, oauthToken, prettyPrint, key, fields, alt, uploadType, accessToken, quotaUser, paramCallback, $xgafv, body);
        // TODO: test validations
    }

    /**
     * Creates a PipelineJob. A PipelineJob will run immediately when created.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void aiplatformProjectsLocationsPipelineJobsCreateTest() throws ApiException {
        String projectsId = null;
        String locationsId = null;
        String pipelineJobId = null;
        String uploadProtocol = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String key = null;
        String fields = null;
        String alt = null;
        String uploadType = null;
        String accessToken = null;
        String quotaUser = null;
        String paramCallback = null;
        String $xgafv = null;
        GoogleCloudAiplatformV1PipelineJob googleCloudAiplatformV1PipelineJob = null;
        GoogleCloudAiplatformV1PipelineJob response = api.aiplatformProjectsLocationsPipelineJobsCreate(projectsId, locationsId, pipelineJobId, uploadProtocol, oauthToken, prettyPrint, key, fields, alt, uploadType, accessToken, quotaUser, paramCallback, $xgafv, googleCloudAiplatformV1PipelineJob);
        // TODO: test validations
    }

    /**
     * Deletes a PipelineJob.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void aiplatformProjectsLocationsPipelineJobsDeleteTest() throws ApiException {
        String projectsId = null;
        String locationsId = null;
        String pipelineJobsId = null;
        String uploadProtocol = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String key = null;
        String fields = null;
        String alt = null;
        String uploadType = null;
        String accessToken = null;
        String quotaUser = null;
        String paramCallback = null;
        String $xgafv = null;
        GoogleLongrunningOperation response = api.aiplatformProjectsLocationsPipelineJobsDelete(projectsId, locationsId, pipelineJobsId, uploadProtocol, oauthToken, prettyPrint, key, fields, alt, uploadType, accessToken, quotaUser, paramCallback, $xgafv);
        // TODO: test validations
    }

    /**
     * Gets a PipelineJob.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void aiplatformProjectsLocationsPipelineJobsGetTest() throws ApiException {
        String projectsId = null;
        String locationsId = null;
        String pipelineJobsId = null;
        String uploadProtocol = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String key = null;
        String fields = null;
        String alt = null;
        String uploadType = null;
        String accessToken = null;
        String quotaUser = null;
        String paramCallback = null;
        String $xgafv = null;
        GoogleCloudAiplatformV1PipelineJob response = api.aiplatformProjectsLocationsPipelineJobsGet(projectsId, locationsId, pipelineJobsId, uploadProtocol, oauthToken, prettyPrint, key, fields, alt, uploadType, accessToken, quotaUser, paramCallback, $xgafv);
        // TODO: test validations
    }

    /**
     * Lists PipelineJobs in a Location.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void aiplatformProjectsLocationsPipelineJobsListTest() throws ApiException {
        String projectsId = null;
        String locationsId = null;
        String readMask = null;
        String pageToken = null;
        Integer pageSize = null;
        String filter = null;
        String orderBy = null;
        String uploadProtocol = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String key = null;
        String fields = null;
        String alt = null;
        String uploadType = null;
        String accessToken = null;
        String quotaUser = null;
        String paramCallback = null;
        String $xgafv = null;
        GoogleCloudAiplatformV1ListPipelineJobsResponse response = api.aiplatformProjectsLocationsPipelineJobsList(projectsId, locationsId, readMask, pageToken, pageSize, filter, orderBy, uploadProtocol, oauthToken, prettyPrint, key, fields, alt, uploadType, accessToken, quotaUser, paramCallback, $xgafv);
        // TODO: test validations
    }

    /**
     * Starts asynchronous cancellation on a long-running operation. The server makes a best effort to cancel the operation, but success is not guaranteed. If the server doesn&#39;t support this method, it returns &#x60;google.rpc.Code.UNIMPLEMENTED&#x60;. Clients can use Operations.GetOperation or other methods to check whether the cancellation succeeded or whether the operation completed despite cancellation. On successful cancellation, the operation is not deleted; instead, it becomes an operation with an Operation.error value with a google.rpc.Status.code of 1, corresponding to &#x60;Code.CANCELLED&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void aiplatformProjectsLocationsPipelineJobsOperationsCancelTest() throws ApiException {
        String projectsId = null;
        String locationsId = null;
        String pipelineJobsId = null;
        String operationsId = null;
        String uploadProtocol = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String key = null;
        String fields = null;
        String alt = null;
        String uploadType = null;
        String accessToken = null;
        String quotaUser = null;
        String paramCallback = null;
        String $xgafv = null;
        Object response = api.aiplatformProjectsLocationsPipelineJobsOperationsCancel(projectsId, locationsId, pipelineJobsId, operationsId, uploadProtocol, oauthToken, prettyPrint, key, fields, alt, uploadType, accessToken, quotaUser, paramCallback, $xgafv);
        // TODO: test validations
    }

    /**
     * Deletes a long-running operation. This method indicates that the client is no longer interested in the operation result. It does not cancel the operation. If the server doesn&#39;t support this method, it returns &#x60;google.rpc.Code.UNIMPLEMENTED&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void aiplatformProjectsLocationsPipelineJobsOperationsDeleteTest() throws ApiException {
        String projectsId = null;
        String locationsId = null;
        String pipelineJobsId = null;
        String operationsId = null;
        String uploadProtocol = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String key = null;
        String fields = null;
        String alt = null;
        String uploadType = null;
        String accessToken = null;
        String quotaUser = null;
        String paramCallback = null;
        String $xgafv = null;
        Object response = api.aiplatformProjectsLocationsPipelineJobsOperationsDelete(projectsId, locationsId, pipelineJobsId, operationsId, uploadProtocol, oauthToken, prettyPrint, key, fields, alt, uploadType, accessToken, quotaUser, paramCallback, $xgafv);
        // TODO: test validations
    }

    /**
     * Gets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void aiplatformProjectsLocationsPipelineJobsOperationsGetTest() throws ApiException {
        String projectsId = null;
        String locationsId = null;
        String pipelineJobsId = null;
        String operationsId = null;
        String uploadProtocol = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String key = null;
        String fields = null;
        String alt = null;
        String uploadType = null;
        String accessToken = null;
        String quotaUser = null;
        String paramCallback = null;
        String $xgafv = null;
        GoogleLongrunningOperation response = api.aiplatformProjectsLocationsPipelineJobsOperationsGet(projectsId, locationsId, pipelineJobsId, operationsId, uploadProtocol, oauthToken, prettyPrint, key, fields, alt, uploadType, accessToken, quotaUser, paramCallback, $xgafv);
        // TODO: test validations
    }

    /**
     * Lists operations that match the specified filter in the request. If the server doesn&#39;t support this method, it returns &#x60;UNIMPLEMENTED&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void aiplatformProjectsLocationsPipelineJobsOperationsListTest() throws ApiException {
        String projectsId = null;
        String locationsId = null;
        String pipelineJobsId = null;
        String filter = null;
        Integer pageSize = null;
        String pageToken = null;
        String uploadProtocol = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String key = null;
        String fields = null;
        String alt = null;
        String uploadType = null;
        String accessToken = null;
        String quotaUser = null;
        String paramCallback = null;
        String $xgafv = null;
        GoogleLongrunningListOperationsResponse response = api.aiplatformProjectsLocationsPipelineJobsOperationsList(projectsId, locationsId, pipelineJobsId, filter, pageSize, pageToken, uploadProtocol, oauthToken, prettyPrint, key, fields, alt, uploadType, accessToken, quotaUser, paramCallback, $xgafv);
        // TODO: test validations
    }

    /**
     * Waits until the specified long-running operation is done or reaches at most a specified timeout, returning the latest state. If the operation is already done, the latest state is immediately returned. If the timeout specified is greater than the default HTTP/RPC timeout, the HTTP/RPC timeout is used. If the server does not support this method, it returns &#x60;google.rpc.Code.UNIMPLEMENTED&#x60;. Note that this method is on a best-effort basis. It may return the latest state before the specified timeout (including immediately), meaning even an immediate response is no guarantee that the operation is done.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void aiplatformProjectsLocationsPipelineJobsOperationsWaitTest() throws ApiException {
        String projectsId = null;
        String locationsId = null;
        String pipelineJobsId = null;
        String operationsId = null;
        String timeout = null;
        String uploadProtocol = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String key = null;
        String fields = null;
        String alt = null;
        String uploadType = null;
        String accessToken = null;
        String quotaUser = null;
        String paramCallback = null;
        String $xgafv = null;
        GoogleLongrunningOperation response = api.aiplatformProjectsLocationsPipelineJobsOperationsWait(projectsId, locationsId, pipelineJobsId, operationsId, timeout, uploadProtocol, oauthToken, prettyPrint, key, fields, alt, uploadType, accessToken, quotaUser, paramCallback, $xgafv);
        // TODO: test validations
    }

    /**
     * Return a list of tokens based on the input text.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void aiplatformProjectsLocationsPublishersModelsComputeTokensTest() throws ApiException {
        String projectsId = null;
        String locationsId = null;
        String publishersId = null;
        String modelsId = null;
        String uploadProtocol = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String key = null;
        String fields = null;
        String alt = null;
        String uploadType = null;
        String accessToken = null;
        String quotaUser = null;
        String paramCallback = null;
        String $xgafv = null;
        GoogleCloudAiplatformV1ComputeTokensRequest googleCloudAiplatformV1ComputeTokensRequest = null;
        GoogleCloudAiplatformV1ComputeTokensResponse response = api.aiplatformProjectsLocationsPublishersModelsComputeTokens(projectsId, locationsId, publishersId, modelsId, uploadProtocol, oauthToken, prettyPrint, key, fields, alt, uploadType, accessToken, quotaUser, paramCallback, $xgafv, googleCloudAiplatformV1ComputeTokensRequest);
        // TODO: test validations
    }

    /**
     * Perform a token counting.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void aiplatformProjectsLocationsPublishersModelsCountTokensTest() throws ApiException {
        String projectsId = null;
        String locationsId = null;
        String publishersId = null;
        String modelsId = null;
        String uploadProtocol = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String key = null;
        String fields = null;
        String alt = null;
        String uploadType = null;
        String accessToken = null;
        String quotaUser = null;
        String paramCallback = null;
        String $xgafv = null;
        GoogleCloudAiplatformV1CountTokensRequest googleCloudAiplatformV1CountTokensRequest = null;
        GoogleCloudAiplatformV1CountTokensResponse response = api.aiplatformProjectsLocationsPublishersModelsCountTokens(projectsId, locationsId, publishersId, modelsId, uploadProtocol, oauthToken, prettyPrint, key, fields, alt, uploadType, accessToken, quotaUser, paramCallback, $xgafv, googleCloudAiplatformV1CountTokensRequest);
        // TODO: test validations
    }

    /**
     * Generate content with multimodal inputs.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void aiplatformProjectsLocationsPublishersModelsGenerateContentTest() throws ApiException {
        String projectsId = null;
        String locationsId = null;
        String publishersId = null;
        String modelsId = null;
        String uploadProtocol = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String key = null;
        String fields = null;
        String alt = null;
        String uploadType = null;
        String accessToken = null;
        String quotaUser = null;
        String paramCallback = null;
        String $xgafv = null;
        GoogleCloudAiplatformV1GenerateContentRequest googleCloudAiplatformV1GenerateContentRequest = null;
        GoogleCloudAiplatformV1GenerateContentResponse response = api.aiplatformProjectsLocationsPublishersModelsGenerateContent(projectsId, locationsId, publishersId, modelsId, uploadProtocol, oauthToken, prettyPrint, key, fields, alt, uploadType, accessToken, quotaUser, paramCallback, $xgafv, googleCloudAiplatformV1GenerateContentRequest);
        // TODO: test validations
    }

    /**
     * Perform an online prediction.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void aiplatformProjectsLocationsPublishersModelsPredictTest() throws ApiException {
        String projectsId = null;
        String locationsId = null;
        String publishersId = null;
        String modelsId = null;
        String uploadProtocol = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String key = null;
        String fields = null;
        String alt = null;
        String uploadType = null;
        String accessToken = null;
        String quotaUser = null;
        String paramCallback = null;
        String $xgafv = null;
        GoogleCloudAiplatformV1PredictRequest googleCloudAiplatformV1PredictRequest = null;
        GoogleCloudAiplatformV1PredictResponse response = api.aiplatformProjectsLocationsPublishersModelsPredict(projectsId, locationsId, publishersId, modelsId, uploadProtocol, oauthToken, prettyPrint, key, fields, alt, uploadType, accessToken, quotaUser, paramCallback, $xgafv, googleCloudAiplatformV1PredictRequest);
        // TODO: test validations
    }

    /**
     * Perform an online prediction with an arbitrary HTTP payload. The response includes the following HTTP headers: * &#x60;X-Vertex-AI-Endpoint-Id&#x60;: ID of the Endpoint that served this prediction. * &#x60;X-Vertex-AI-Deployed-Model-Id&#x60;: ID of the Endpoint&#39;s DeployedModel that served this prediction.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void aiplatformProjectsLocationsPublishersModelsRawPredictTest() throws ApiException {
        String projectsId = null;
        String locationsId = null;
        String publishersId = null;
        String modelsId = null;
        String uploadProtocol = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String key = null;
        String fields = null;
        String alt = null;
        String uploadType = null;
        String accessToken = null;
        String quotaUser = null;
        String paramCallback = null;
        String $xgafv = null;
        GoogleCloudAiplatformV1RawPredictRequest googleCloudAiplatformV1RawPredictRequest = null;
        GoogleApiHttpBody response = api.aiplatformProjectsLocationsPublishersModelsRawPredict(projectsId, locationsId, publishersId, modelsId, uploadProtocol, oauthToken, prettyPrint, key, fields, alt, uploadType, accessToken, quotaUser, paramCallback, $xgafv, googleCloudAiplatformV1RawPredictRequest);
        // TODO: test validations
    }

    /**
     * Perform a server-side streaming online prediction request for Vertex LLM streaming.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void aiplatformProjectsLocationsPublishersModelsServerStreamingPredictTest() throws ApiException {
        String projectsId = null;
        String locationsId = null;
        String publishersId = null;
        String modelsId = null;
        String uploadProtocol = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String key = null;
        String fields = null;
        String alt = null;
        String uploadType = null;
        String accessToken = null;
        String quotaUser = null;
        String paramCallback = null;
        String $xgafv = null;
        GoogleCloudAiplatformV1StreamingPredictRequest googleCloudAiplatformV1StreamingPredictRequest = null;
        GoogleCloudAiplatformV1StreamingPredictResponse response = api.aiplatformProjectsLocationsPublishersModelsServerStreamingPredict(projectsId, locationsId, publishersId, modelsId, uploadProtocol, oauthToken, prettyPrint, key, fields, alt, uploadType, accessToken, quotaUser, paramCallback, $xgafv, googleCloudAiplatformV1StreamingPredictRequest);
        // TODO: test validations
    }

    /**
     * Generate content with multimodal inputs with streaming support.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void aiplatformProjectsLocationsPublishersModelsStreamGenerateContentTest() throws ApiException {
        String projectsId = null;
        String locationsId = null;
        String publishersId = null;
        String modelsId = null;
        String uploadProtocol = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String key = null;
        String fields = null;
        String alt = null;
        String uploadType = null;
        String accessToken = null;
        String quotaUser = null;
        String paramCallback = null;
        String $xgafv = null;
        GoogleCloudAiplatformV1GenerateContentRequest googleCloudAiplatformV1GenerateContentRequest = null;
        GoogleCloudAiplatformV1GenerateContentResponse response = api.aiplatformProjectsLocationsPublishersModelsStreamGenerateContent(projectsId, locationsId, publishersId, modelsId, uploadProtocol, oauthToken, prettyPrint, key, fields, alt, uploadType, accessToken, quotaUser, paramCallback, $xgafv, googleCloudAiplatformV1GenerateContentRequest);
        // TODO: test validations
    }

    /**
     * Perform a streaming online prediction with an arbitrary HTTP payload.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void aiplatformProjectsLocationsPublishersModelsStreamRawPredictTest() throws ApiException {
        String projectsId = null;
        String locationsId = null;
        String publishersId = null;
        String modelsId = null;
        String uploadProtocol = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String key = null;
        String fields = null;
        String alt = null;
        String uploadType = null;
        String accessToken = null;
        String quotaUser = null;
        String paramCallback = null;
        String $xgafv = null;
        GoogleCloudAiplatformV1StreamRawPredictRequest googleCloudAiplatformV1StreamRawPredictRequest = null;
        GoogleApiHttpBody response = api.aiplatformProjectsLocationsPublishersModelsStreamRawPredict(projectsId, locationsId, publishersId, modelsId, uploadProtocol, oauthToken, prettyPrint, key, fields, alt, uploadType, accessToken, quotaUser, paramCallback, $xgafv, googleCloudAiplatformV1StreamRawPredictRequest);
        // TODO: test validations
    }

    /**
     * Creates a Schedule.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void aiplatformProjectsLocationsSchedulesCreateTest() throws ApiException {
        String projectsId = null;
        String locationsId = null;
        String uploadProtocol = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String key = null;
        String fields = null;
        String alt = null;
        String uploadType = null;
        String accessToken = null;
        String quotaUser = null;
        String paramCallback = null;
        String $xgafv = null;
        GoogleCloudAiplatformV1Schedule googleCloudAiplatformV1Schedule = null;
        GoogleCloudAiplatformV1Schedule response = api.aiplatformProjectsLocationsSchedulesCreate(projectsId, locationsId, uploadProtocol, oauthToken, prettyPrint, key, fields, alt, uploadType, accessToken, quotaUser, paramCallback, $xgafv, googleCloudAiplatformV1Schedule);
        // TODO: test validations
    }

    /**
     * Deletes a Schedule.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void aiplatformProjectsLocationsSchedulesDeleteTest() throws ApiException {
        String projectsId = null;
        String locationsId = null;
        String schedulesId = null;
        String uploadProtocol = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String key = null;
        String fields = null;
        String alt = null;
        String uploadType = null;
        String accessToken = null;
        String quotaUser = null;
        String paramCallback = null;
        String $xgafv = null;
        GoogleLongrunningOperation response = api.aiplatformProjectsLocationsSchedulesDelete(projectsId, locationsId, schedulesId, uploadProtocol, oauthToken, prettyPrint, key, fields, alt, uploadType, accessToken, quotaUser, paramCallback, $xgafv);
        // TODO: test validations
    }

    /**
     * Gets a Schedule.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void aiplatformProjectsLocationsSchedulesGetTest() throws ApiException {
        String projectsId = null;
        String locationsId = null;
        String schedulesId = null;
        String uploadProtocol = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String key = null;
        String fields = null;
        String alt = null;
        String uploadType = null;
        String accessToken = null;
        String quotaUser = null;
        String paramCallback = null;
        String $xgafv = null;
        GoogleCloudAiplatformV1Schedule response = api.aiplatformProjectsLocationsSchedulesGet(projectsId, locationsId, schedulesId, uploadProtocol, oauthToken, prettyPrint, key, fields, alt, uploadType, accessToken, quotaUser, paramCallback, $xgafv);
        // TODO: test validations
    }

    /**
     * Lists Schedules in a Location.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void aiplatformProjectsLocationsSchedulesListTest() throws ApiException {
        String projectsId = null;
        String locationsId = null;
        String filter = null;
        String pageToken = null;
        Integer pageSize = null;
        String orderBy = null;
        String uploadProtocol = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String key = null;
        String fields = null;
        String alt = null;
        String uploadType = null;
        String accessToken = null;
        String quotaUser = null;
        String paramCallback = null;
        String $xgafv = null;
        GoogleCloudAiplatformV1ListSchedulesResponse response = api.aiplatformProjectsLocationsSchedulesList(projectsId, locationsId, filter, pageToken, pageSize, orderBy, uploadProtocol, oauthToken, prettyPrint, key, fields, alt, uploadType, accessToken, quotaUser, paramCallback, $xgafv);
        // TODO: test validations
    }

    /**
     * Starts asynchronous cancellation on a long-running operation. The server makes a best effort to cancel the operation, but success is not guaranteed. If the server doesn&#39;t support this method, it returns &#x60;google.rpc.Code.UNIMPLEMENTED&#x60;. Clients can use Operations.GetOperation or other methods to check whether the cancellation succeeded or whether the operation completed despite cancellation. On successful cancellation, the operation is not deleted; instead, it becomes an operation with an Operation.error value with a google.rpc.Status.code of 1, corresponding to &#x60;Code.CANCELLED&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void aiplatformProjectsLocationsSchedulesOperationsCancelTest() throws ApiException {
        String projectsId = null;
        String locationsId = null;
        String schedulesId = null;
        String operationsId = null;
        String uploadProtocol = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String key = null;
        String fields = null;
        String alt = null;
        String uploadType = null;
        String accessToken = null;
        String quotaUser = null;
        String paramCallback = null;
        String $xgafv = null;
        Object response = api.aiplatformProjectsLocationsSchedulesOperationsCancel(projectsId, locationsId, schedulesId, operationsId, uploadProtocol, oauthToken, prettyPrint, key, fields, alt, uploadType, accessToken, quotaUser, paramCallback, $xgafv);
        // TODO: test validations
    }

    /**
     * Deletes a long-running operation. This method indicates that the client is no longer interested in the operation result. It does not cancel the operation. If the server doesn&#39;t support this method, it returns &#x60;google.rpc.Code.UNIMPLEMENTED&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void aiplatformProjectsLocationsSchedulesOperationsDeleteTest() throws ApiException {
        String projectsId = null;
        String locationsId = null;
        String schedulesId = null;
        String operationsId = null;
        String uploadProtocol = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String key = null;
        String fields = null;
        String alt = null;
        String uploadType = null;
        String accessToken = null;
        String quotaUser = null;
        String paramCallback = null;
        String $xgafv = null;
        Object response = api.aiplatformProjectsLocationsSchedulesOperationsDelete(projectsId, locationsId, schedulesId, operationsId, uploadProtocol, oauthToken, prettyPrint, key, fields, alt, uploadType, accessToken, quotaUser, paramCallback, $xgafv);
        // TODO: test validations
    }

    /**
     * Gets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void aiplatformProjectsLocationsSchedulesOperationsGetTest() throws ApiException {
        String projectsId = null;
        String locationsId = null;
        String schedulesId = null;
        String operationsId = null;
        String uploadProtocol = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String key = null;
        String fields = null;
        String alt = null;
        String uploadType = null;
        String accessToken = null;
        String quotaUser = null;
        String paramCallback = null;
        String $xgafv = null;
        GoogleLongrunningOperation response = api.aiplatformProjectsLocationsSchedulesOperationsGet(projectsId, locationsId, schedulesId, operationsId, uploadProtocol, oauthToken, prettyPrint, key, fields, alt, uploadType, accessToken, quotaUser, paramCallback, $xgafv);
        // TODO: test validations
    }

    /**
     * Lists operations that match the specified filter in the request. If the server doesn&#39;t support this method, it returns &#x60;UNIMPLEMENTED&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void aiplatformProjectsLocationsSchedulesOperationsListTest() throws ApiException {
        String projectsId = null;
        String locationsId = null;
        String schedulesId = null;
        String pageToken = null;
        Integer pageSize = null;
        String filter = null;
        String uploadProtocol = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String key = null;
        String fields = null;
        String alt = null;
        String uploadType = null;
        String accessToken = null;
        String quotaUser = null;
        String paramCallback = null;
        String $xgafv = null;
        GoogleLongrunningListOperationsResponse response = api.aiplatformProjectsLocationsSchedulesOperationsList(projectsId, locationsId, schedulesId, pageToken, pageSize, filter, uploadProtocol, oauthToken, prettyPrint, key, fields, alt, uploadType, accessToken, quotaUser, paramCallback, $xgafv);
        // TODO: test validations
    }

    /**
     * Waits until the specified long-running operation is done or reaches at most a specified timeout, returning the latest state. If the operation is already done, the latest state is immediately returned. If the timeout specified is greater than the default HTTP/RPC timeout, the HTTP/RPC timeout is used. If the server does not support this method, it returns &#x60;google.rpc.Code.UNIMPLEMENTED&#x60;. Note that this method is on a best-effort basis. It may return the latest state before the specified timeout (including immediately), meaning even an immediate response is no guarantee that the operation is done.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void aiplatformProjectsLocationsSchedulesOperationsWaitTest() throws ApiException {
        String projectsId = null;
        String locationsId = null;
        String schedulesId = null;
        String operationsId = null;
        String timeout = null;
        String uploadProtocol = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String key = null;
        String fields = null;
        String alt = null;
        String uploadType = null;
        String accessToken = null;
        String quotaUser = null;
        String paramCallback = null;
        String $xgafv = null;
        GoogleLongrunningOperation response = api.aiplatformProjectsLocationsSchedulesOperationsWait(projectsId, locationsId, schedulesId, operationsId, timeout, uploadProtocol, oauthToken, prettyPrint, key, fields, alt, uploadType, accessToken, quotaUser, paramCallback, $xgafv);
        // TODO: test validations
    }

    /**
     * Updates an active or paused Schedule. When the Schedule is updated, new runs will be scheduled starting from the updated next execution time after the update time based on the time_specification in the updated Schedule. All unstarted runs before the update time will be skipped while already created runs will NOT be paused or canceled.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void aiplatformProjectsLocationsSchedulesPatchTest() throws ApiException {
        String projectsId = null;
        String locationsId = null;
        String schedulesId = null;
        String updateMask = null;
        String uploadProtocol = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String key = null;
        String fields = null;
        String alt = null;
        String uploadType = null;
        String accessToken = null;
        String quotaUser = null;
        String paramCallback = null;
        String $xgafv = null;
        GoogleCloudAiplatformV1Schedule googleCloudAiplatformV1Schedule = null;
        GoogleCloudAiplatformV1Schedule response = api.aiplatformProjectsLocationsSchedulesPatch(projectsId, locationsId, schedulesId, updateMask, uploadProtocol, oauthToken, prettyPrint, key, fields, alt, uploadType, accessToken, quotaUser, paramCallback, $xgafv, googleCloudAiplatformV1Schedule);
        // TODO: test validations
    }

    /**
     * Pauses a Schedule. Will mark Schedule.state to &#39;PAUSED&#39;. If the schedule is paused, no new runs will be created. Already created runs will NOT be paused or canceled.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void aiplatformProjectsLocationsSchedulesPauseTest() throws ApiException {
        String projectsId = null;
        String locationsId = null;
        String schedulesId = null;
        String uploadProtocol = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String key = null;
        String fields = null;
        String alt = null;
        String uploadType = null;
        String accessToken = null;
        String quotaUser = null;
        String paramCallback = null;
        String $xgafv = null;
        Object body = null;
        Object response = api.aiplatformProjectsLocationsSchedulesPause(projectsId, locationsId, schedulesId, uploadProtocol, oauthToken, prettyPrint, key, fields, alt, uploadType, accessToken, quotaUser, paramCallback, $xgafv, body);
        // TODO: test validations
    }

    /**
     * Resumes a paused Schedule to start scheduling new runs. Will mark Schedule.state to &#39;ACTIVE&#39;. Only paused Schedule can be resumed. When the Schedule is resumed, new runs will be scheduled starting from the next execution time after the current time based on the time_specification in the Schedule. If Schedule.catchUp is set up true, all missed runs will be scheduled for backfill first.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void aiplatformProjectsLocationsSchedulesResumeTest() throws ApiException {
        String projectsId = null;
        String locationsId = null;
        String schedulesId = null;
        String uploadProtocol = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String key = null;
        String fields = null;
        String alt = null;
        String uploadType = null;
        String accessToken = null;
        String quotaUser = null;
        String paramCallback = null;
        String $xgafv = null;
        GoogleCloudAiplatformV1ResumeScheduleRequest googleCloudAiplatformV1ResumeScheduleRequest = null;
        Object response = api.aiplatformProjectsLocationsSchedulesResume(projectsId, locationsId, schedulesId, uploadProtocol, oauthToken, prettyPrint, key, fields, alt, uploadType, accessToken, quotaUser, paramCallback, $xgafv, googleCloudAiplatformV1ResumeScheduleRequest);
        // TODO: test validations
    }

    /**
     * Creates a SpecialistPool.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void aiplatformProjectsLocationsSpecialistPoolsCreateTest() throws ApiException {
        String projectsId = null;
        String locationsId = null;
        String uploadProtocol = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String key = null;
        String fields = null;
        String alt = null;
        String uploadType = null;
        String accessToken = null;
        String quotaUser = null;
        String paramCallback = null;
        String $xgafv = null;
        GoogleCloudAiplatformV1SpecialistPool googleCloudAiplatformV1SpecialistPool = null;
        GoogleLongrunningOperation response = api.aiplatformProjectsLocationsSpecialistPoolsCreate(projectsId, locationsId, uploadProtocol, oauthToken, prettyPrint, key, fields, alt, uploadType, accessToken, quotaUser, paramCallback, $xgafv, googleCloudAiplatformV1SpecialistPool);
        // TODO: test validations
    }

    /**
     * Deletes a SpecialistPool as well as all Specialists in the pool.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void aiplatformProjectsLocationsSpecialistPoolsDeleteTest() throws ApiException {
        String projectsId = null;
        String locationsId = null;
        String specialistPoolsId = null;
        Boolean force = null;
        String uploadProtocol = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String key = null;
        String fields = null;
        String alt = null;
        String uploadType = null;
        String accessToken = null;
        String quotaUser = null;
        String paramCallback = null;
        String $xgafv = null;
        GoogleLongrunningOperation response = api.aiplatformProjectsLocationsSpecialistPoolsDelete(projectsId, locationsId, specialistPoolsId, force, uploadProtocol, oauthToken, prettyPrint, key, fields, alt, uploadType, accessToken, quotaUser, paramCallback, $xgafv);
        // TODO: test validations
    }

    /**
     * Gets a SpecialistPool.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void aiplatformProjectsLocationsSpecialistPoolsGetTest() throws ApiException {
        String projectsId = null;
        String locationsId = null;
        String specialistPoolsId = null;
        String uploadProtocol = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String key = null;
        String fields = null;
        String alt = null;
        String uploadType = null;
        String accessToken = null;
        String quotaUser = null;
        String paramCallback = null;
        String $xgafv = null;
        GoogleCloudAiplatformV1SpecialistPool response = api.aiplatformProjectsLocationsSpecialistPoolsGet(projectsId, locationsId, specialistPoolsId, uploadProtocol, oauthToken, prettyPrint, key, fields, alt, uploadType, accessToken, quotaUser, paramCallback, $xgafv);
        // TODO: test validations
    }

    /**
     * Lists SpecialistPools in a Location.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void aiplatformProjectsLocationsSpecialistPoolsListTest() throws ApiException {
        String projectsId = null;
        String locationsId = null;
        String pageToken = null;
        Integer pageSize = null;
        String readMask = null;
        String uploadProtocol = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String key = null;
        String fields = null;
        String alt = null;
        String uploadType = null;
        String accessToken = null;
        String quotaUser = null;
        String paramCallback = null;
        String $xgafv = null;
        GoogleCloudAiplatformV1ListSpecialistPoolsResponse response = api.aiplatformProjectsLocationsSpecialistPoolsList(projectsId, locationsId, pageToken, pageSize, readMask, uploadProtocol, oauthToken, prettyPrint, key, fields, alt, uploadType, accessToken, quotaUser, paramCallback, $xgafv);
        // TODO: test validations
    }

    /**
     * Starts asynchronous cancellation on a long-running operation. The server makes a best effort to cancel the operation, but success is not guaranteed. If the server doesn&#39;t support this method, it returns &#x60;google.rpc.Code.UNIMPLEMENTED&#x60;. Clients can use Operations.GetOperation or other methods to check whether the cancellation succeeded or whether the operation completed despite cancellation. On successful cancellation, the operation is not deleted; instead, it becomes an operation with an Operation.error value with a google.rpc.Status.code of 1, corresponding to &#x60;Code.CANCELLED&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void aiplatformProjectsLocationsSpecialistPoolsOperationsCancelTest() throws ApiException {
        String projectsId = null;
        String locationsId = null;
        String specialistPoolsId = null;
        String operationsId = null;
        String uploadProtocol = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String key = null;
        String fields = null;
        String alt = null;
        String uploadType = null;
        String accessToken = null;
        String quotaUser = null;
        String paramCallback = null;
        String $xgafv = null;
        Object response = api.aiplatformProjectsLocationsSpecialistPoolsOperationsCancel(projectsId, locationsId, specialistPoolsId, operationsId, uploadProtocol, oauthToken, prettyPrint, key, fields, alt, uploadType, accessToken, quotaUser, paramCallback, $xgafv);
        // TODO: test validations
    }

    /**
     * Deletes a long-running operation. This method indicates that the client is no longer interested in the operation result. It does not cancel the operation. If the server doesn&#39;t support this method, it returns &#x60;google.rpc.Code.UNIMPLEMENTED&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void aiplatformProjectsLocationsSpecialistPoolsOperationsDeleteTest() throws ApiException {
        String projectsId = null;
        String locationsId = null;
        String specialistPoolsId = null;
        String operationsId = null;
        String uploadProtocol = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String key = null;
        String fields = null;
        String alt = null;
        String uploadType = null;
        String accessToken = null;
        String quotaUser = null;
        String paramCallback = null;
        String $xgafv = null;
        Object response = api.aiplatformProjectsLocationsSpecialistPoolsOperationsDelete(projectsId, locationsId, specialistPoolsId, operationsId, uploadProtocol, oauthToken, prettyPrint, key, fields, alt, uploadType, accessToken, quotaUser, paramCallback, $xgafv);
        // TODO: test validations
    }

    /**
     * Gets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void aiplatformProjectsLocationsSpecialistPoolsOperationsGetTest() throws ApiException {
        String projectsId = null;
        String locationsId = null;
        String specialistPoolsId = null;
        String operationsId = null;
        String uploadProtocol = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String key = null;
        String fields = null;
        String alt = null;
        String uploadType = null;
        String accessToken = null;
        String quotaUser = null;
        String paramCallback = null;
        String $xgafv = null;
        GoogleLongrunningOperation response = api.aiplatformProjectsLocationsSpecialistPoolsOperationsGet(projectsId, locationsId, specialistPoolsId, operationsId, uploadProtocol, oauthToken, prettyPrint, key, fields, alt, uploadType, accessToken, quotaUser, paramCallback, $xgafv);
        // TODO: test validations
    }

    /**
     * Lists operations that match the specified filter in the request. If the server doesn&#39;t support this method, it returns &#x60;UNIMPLEMENTED&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void aiplatformProjectsLocationsSpecialistPoolsOperationsListTest() throws ApiException {
        String projectsId = null;
        String locationsId = null;
        String specialistPoolsId = null;
        String pageToken = null;
        String filter = null;
        Integer pageSize = null;
        String uploadProtocol = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String key = null;
        String fields = null;
        String alt = null;
        String uploadType = null;
        String accessToken = null;
        String quotaUser = null;
        String paramCallback = null;
        String $xgafv = null;
        GoogleLongrunningListOperationsResponse response = api.aiplatformProjectsLocationsSpecialistPoolsOperationsList(projectsId, locationsId, specialistPoolsId, pageToken, filter, pageSize, uploadProtocol, oauthToken, prettyPrint, key, fields, alt, uploadType, accessToken, quotaUser, paramCallback, $xgafv);
        // TODO: test validations
    }

    /**
     * Waits until the specified long-running operation is done or reaches at most a specified timeout, returning the latest state. If the operation is already done, the latest state is immediately returned. If the timeout specified is greater than the default HTTP/RPC timeout, the HTTP/RPC timeout is used. If the server does not support this method, it returns &#x60;google.rpc.Code.UNIMPLEMENTED&#x60;. Note that this method is on a best-effort basis. It may return the latest state before the specified timeout (including immediately), meaning even an immediate response is no guarantee that the operation is done.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void aiplatformProjectsLocationsSpecialistPoolsOperationsWaitTest() throws ApiException {
        String projectsId = null;
        String locationsId = null;
        String specialistPoolsId = null;
        String operationsId = null;
        String timeout = null;
        String uploadProtocol = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String key = null;
        String fields = null;
        String alt = null;
        String uploadType = null;
        String accessToken = null;
        String quotaUser = null;
        String paramCallback = null;
        String $xgafv = null;
        GoogleLongrunningOperation response = api.aiplatformProjectsLocationsSpecialistPoolsOperationsWait(projectsId, locationsId, specialistPoolsId, operationsId, timeout, uploadProtocol, oauthToken, prettyPrint, key, fields, alt, uploadType, accessToken, quotaUser, paramCallback, $xgafv);
        // TODO: test validations
    }

    /**
     * Updates a SpecialistPool.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void aiplatformProjectsLocationsSpecialistPoolsPatchTest() throws ApiException {
        String projectsId = null;
        String locationsId = null;
        String specialistPoolsId = null;
        String updateMask = null;
        String uploadProtocol = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String key = null;
        String fields = null;
        String alt = null;
        String uploadType = null;
        String accessToken = null;
        String quotaUser = null;
        String paramCallback = null;
        String $xgafv = null;
        GoogleCloudAiplatformV1SpecialistPool googleCloudAiplatformV1SpecialistPool = null;
        GoogleLongrunningOperation response = api.aiplatformProjectsLocationsSpecialistPoolsPatch(projectsId, locationsId, specialistPoolsId, updateMask, uploadProtocol, oauthToken, prettyPrint, key, fields, alt, uploadType, accessToken, quotaUser, paramCallback, $xgafv, googleCloudAiplatformV1SpecialistPool);
        // TODO: test validations
    }

    /**
     * Creates a Study. A resource name will be generated after creation of the Study.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void aiplatformProjectsLocationsStudiesCreateTest() throws ApiException {
        String projectsId = null;
        String locationsId = null;
        String uploadProtocol = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String key = null;
        String fields = null;
        String alt = null;
        String uploadType = null;
        String accessToken = null;
        String quotaUser = null;
        String paramCallback = null;
        String $xgafv = null;
        GoogleCloudAiplatformV1Study googleCloudAiplatformV1Study = null;
        GoogleCloudAiplatformV1Study response = api.aiplatformProjectsLocationsStudiesCreate(projectsId, locationsId, uploadProtocol, oauthToken, prettyPrint, key, fields, alt, uploadType, accessToken, quotaUser, paramCallback, $xgafv, googleCloudAiplatformV1Study);
        // TODO: test validations
    }

    /**
     * Deletes a Study.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void aiplatformProjectsLocationsStudiesDeleteTest() throws ApiException {
        String projectsId = null;
        String locationsId = null;
        String studiesId = null;
        String uploadProtocol = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String key = null;
        String fields = null;
        String alt = null;
        String uploadType = null;
        String accessToken = null;
        String quotaUser = null;
        String paramCallback = null;
        String $xgafv = null;
        Object response = api.aiplatformProjectsLocationsStudiesDelete(projectsId, locationsId, studiesId, uploadProtocol, oauthToken, prettyPrint, key, fields, alt, uploadType, accessToken, quotaUser, paramCallback, $xgafv);
        // TODO: test validations
    }

    /**
     * Gets a Study by name.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void aiplatformProjectsLocationsStudiesGetTest() throws ApiException {
        String projectsId = null;
        String locationsId = null;
        String studiesId = null;
        String uploadProtocol = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String key = null;
        String fields = null;
        String alt = null;
        String uploadType = null;
        String accessToken = null;
        String quotaUser = null;
        String paramCallback = null;
        String $xgafv = null;
        GoogleCloudAiplatformV1Study response = api.aiplatformProjectsLocationsStudiesGet(projectsId, locationsId, studiesId, uploadProtocol, oauthToken, prettyPrint, key, fields, alt, uploadType, accessToken, quotaUser, paramCallback, $xgafv);
        // TODO: test validations
    }

    /**
     * Lists all the studies in a region for an associated project.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void aiplatformProjectsLocationsStudiesListTest() throws ApiException {
        String projectsId = null;
        String locationsId = null;
        Integer pageSize = null;
        String pageToken = null;
        String uploadProtocol = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String key = null;
        String fields = null;
        String alt = null;
        String uploadType = null;
        String accessToken = null;
        String quotaUser = null;
        String paramCallback = null;
        String $xgafv = null;
        GoogleCloudAiplatformV1ListStudiesResponse response = api.aiplatformProjectsLocationsStudiesList(projectsId, locationsId, pageSize, pageToken, uploadProtocol, oauthToken, prettyPrint, key, fields, alt, uploadType, accessToken, quotaUser, paramCallback, $xgafv);
        // TODO: test validations
    }

    /**
     * Looks a study up using the user-defined display_name field instead of the fully qualified resource name.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void aiplatformProjectsLocationsStudiesLookupTest() throws ApiException {
        String projectsId = null;
        String locationsId = null;
        String uploadProtocol = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String key = null;
        String fields = null;
        String alt = null;
        String uploadType = null;
        String accessToken = null;
        String quotaUser = null;
        String paramCallback = null;
        String $xgafv = null;
        GoogleCloudAiplatformV1LookupStudyRequest googleCloudAiplatformV1LookupStudyRequest = null;
        GoogleCloudAiplatformV1Study response = api.aiplatformProjectsLocationsStudiesLookup(projectsId, locationsId, uploadProtocol, oauthToken, prettyPrint, key, fields, alt, uploadType, accessToken, quotaUser, paramCallback, $xgafv, googleCloudAiplatformV1LookupStudyRequest);
        // TODO: test validations
    }

    /**
     * Starts asynchronous cancellation on a long-running operation. The server makes a best effort to cancel the operation, but success is not guaranteed. If the server doesn&#39;t support this method, it returns &#x60;google.rpc.Code.UNIMPLEMENTED&#x60;. Clients can use Operations.GetOperation or other methods to check whether the cancellation succeeded or whether the operation completed despite cancellation. On successful cancellation, the operation is not deleted; instead, it becomes an operation with an Operation.error value with a google.rpc.Status.code of 1, corresponding to &#x60;Code.CANCELLED&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void aiplatformProjectsLocationsStudiesOperationsCancelTest() throws ApiException {
        String projectsId = null;
        String locationsId = null;
        String studiesId = null;
        String operationsId = null;
        String uploadProtocol = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String key = null;
        String fields = null;
        String alt = null;
        String uploadType = null;
        String accessToken = null;
        String quotaUser = null;
        String paramCallback = null;
        String $xgafv = null;
        Object response = api.aiplatformProjectsLocationsStudiesOperationsCancel(projectsId, locationsId, studiesId, operationsId, uploadProtocol, oauthToken, prettyPrint, key, fields, alt, uploadType, accessToken, quotaUser, paramCallback, $xgafv);
        // TODO: test validations
    }

    /**
     * Deletes a long-running operation. This method indicates that the client is no longer interested in the operation result. It does not cancel the operation. If the server doesn&#39;t support this method, it returns &#x60;google.rpc.Code.UNIMPLEMENTED&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void aiplatformProjectsLocationsStudiesOperationsDeleteTest() throws ApiException {
        String projectsId = null;
        String locationsId = null;
        String studiesId = null;
        String operationsId = null;
        String uploadProtocol = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String key = null;
        String fields = null;
        String alt = null;
        String uploadType = null;
        String accessToken = null;
        String quotaUser = null;
        String paramCallback = null;
        String $xgafv = null;
        Object response = api.aiplatformProjectsLocationsStudiesOperationsDelete(projectsId, locationsId, studiesId, operationsId, uploadProtocol, oauthToken, prettyPrint, key, fields, alt, uploadType, accessToken, quotaUser, paramCallback, $xgafv);
        // TODO: test validations
    }

    /**
     * Gets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void aiplatformProjectsLocationsStudiesOperationsGetTest() throws ApiException {
        String projectsId = null;
        String locationsId = null;
        String studiesId = null;
        String operationsId = null;
        String uploadProtocol = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String key = null;
        String fields = null;
        String alt = null;
        String uploadType = null;
        String accessToken = null;
        String quotaUser = null;
        String paramCallback = null;
        String $xgafv = null;
        GoogleLongrunningOperation response = api.aiplatformProjectsLocationsStudiesOperationsGet(projectsId, locationsId, studiesId, operationsId, uploadProtocol, oauthToken, prettyPrint, key, fields, alt, uploadType, accessToken, quotaUser, paramCallback, $xgafv);
        // TODO: test validations
    }

    /**
     * Lists operations that match the specified filter in the request. If the server doesn&#39;t support this method, it returns &#x60;UNIMPLEMENTED&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void aiplatformProjectsLocationsStudiesOperationsListTest() throws ApiException {
        String projectsId = null;
        String locationsId = null;
        String studiesId = null;
        String pageToken = null;
        String filter = null;
        Integer pageSize = null;
        String uploadProtocol = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String key = null;
        String fields = null;
        String alt = null;
        String uploadType = null;
        String accessToken = null;
        String quotaUser = null;
        String paramCallback = null;
        String $xgafv = null;
        GoogleLongrunningListOperationsResponse response = api.aiplatformProjectsLocationsStudiesOperationsList(projectsId, locationsId, studiesId, pageToken, filter, pageSize, uploadProtocol, oauthToken, prettyPrint, key, fields, alt, uploadType, accessToken, quotaUser, paramCallback, $xgafv);
        // TODO: test validations
    }

    /**
     * Waits until the specified long-running operation is done or reaches at most a specified timeout, returning the latest state. If the operation is already done, the latest state is immediately returned. If the timeout specified is greater than the default HTTP/RPC timeout, the HTTP/RPC timeout is used. If the server does not support this method, it returns &#x60;google.rpc.Code.UNIMPLEMENTED&#x60;. Note that this method is on a best-effort basis. It may return the latest state before the specified timeout (including immediately), meaning even an immediate response is no guarantee that the operation is done.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void aiplatformProjectsLocationsStudiesOperationsWaitTest() throws ApiException {
        String projectsId = null;
        String locationsId = null;
        String studiesId = null;
        String operationsId = null;
        String timeout = null;
        String uploadProtocol = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String key = null;
        String fields = null;
        String alt = null;
        String uploadType = null;
        String accessToken = null;
        String quotaUser = null;
        String paramCallback = null;
        String $xgafv = null;
        GoogleLongrunningOperation response = api.aiplatformProjectsLocationsStudiesOperationsWait(projectsId, locationsId, studiesId, operationsId, timeout, uploadProtocol, oauthToken, prettyPrint, key, fields, alt, uploadType, accessToken, quotaUser, paramCallback, $xgafv);
        // TODO: test validations
    }

    /**
     * Adds a measurement of the objective metrics to a Trial. This measurement is assumed to have been taken before the Trial is complete.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void aiplatformProjectsLocationsStudiesTrialsAddTrialMeasurementTest() throws ApiException {
        String projectsId = null;
        String locationsId = null;
        String studiesId = null;
        String trialsId = null;
        String uploadProtocol = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String key = null;
        String fields = null;
        String alt = null;
        String uploadType = null;
        String accessToken = null;
        String quotaUser = null;
        String paramCallback = null;
        String $xgafv = null;
        GoogleCloudAiplatformV1AddTrialMeasurementRequest googleCloudAiplatformV1AddTrialMeasurementRequest = null;
        GoogleCloudAiplatformV1Trial response = api.aiplatformProjectsLocationsStudiesTrialsAddTrialMeasurement(projectsId, locationsId, studiesId, trialsId, uploadProtocol, oauthToken, prettyPrint, key, fields, alt, uploadType, accessToken, quotaUser, paramCallback, $xgafv, googleCloudAiplatformV1AddTrialMeasurementRequest);
        // TODO: test validations
    }

    /**
     * Checks whether a Trial should stop or not. Returns a long-running operation. When the operation is successful, it will contain a CheckTrialEarlyStoppingStateResponse.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void aiplatformProjectsLocationsStudiesTrialsCheckTrialEarlyStoppingStateTest() throws ApiException {
        String projectsId = null;
        String locationsId = null;
        String studiesId = null;
        String trialsId = null;
        String uploadProtocol = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String key = null;
        String fields = null;
        String alt = null;
        String uploadType = null;
        String accessToken = null;
        String quotaUser = null;
        String paramCallback = null;
        String $xgafv = null;
        Object body = null;
        GoogleLongrunningOperation response = api.aiplatformProjectsLocationsStudiesTrialsCheckTrialEarlyStoppingState(projectsId, locationsId, studiesId, trialsId, uploadProtocol, oauthToken, prettyPrint, key, fields, alt, uploadType, accessToken, quotaUser, paramCallback, $xgafv, body);
        // TODO: test validations
    }

    /**
     * Marks a Trial as complete.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void aiplatformProjectsLocationsStudiesTrialsCompleteTest() throws ApiException {
        String projectsId = null;
        String locationsId = null;
        String studiesId = null;
        String trialsId = null;
        String uploadProtocol = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String key = null;
        String fields = null;
        String alt = null;
        String uploadType = null;
        String accessToken = null;
        String quotaUser = null;
        String paramCallback = null;
        String $xgafv = null;
        GoogleCloudAiplatformV1CompleteTrialRequest googleCloudAiplatformV1CompleteTrialRequest = null;
        GoogleCloudAiplatformV1Trial response = api.aiplatformProjectsLocationsStudiesTrialsComplete(projectsId, locationsId, studiesId, trialsId, uploadProtocol, oauthToken, prettyPrint, key, fields, alt, uploadType, accessToken, quotaUser, paramCallback, $xgafv, googleCloudAiplatformV1CompleteTrialRequest);
        // TODO: test validations
    }

    /**
     * Adds a user provided Trial to a Study.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void aiplatformProjectsLocationsStudiesTrialsCreateTest() throws ApiException {
        String projectsId = null;
        String locationsId = null;
        String studiesId = null;
        String uploadProtocol = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String key = null;
        String fields = null;
        String alt = null;
        String uploadType = null;
        String accessToken = null;
        String quotaUser = null;
        String paramCallback = null;
        String $xgafv = null;
        GoogleCloudAiplatformV1Trial googleCloudAiplatformV1Trial = null;
        GoogleCloudAiplatformV1Trial response = api.aiplatformProjectsLocationsStudiesTrialsCreate(projectsId, locationsId, studiesId, uploadProtocol, oauthToken, prettyPrint, key, fields, alt, uploadType, accessToken, quotaUser, paramCallback, $xgafv, googleCloudAiplatformV1Trial);
        // TODO: test validations
    }

    /**
     * Deletes a Trial.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void aiplatformProjectsLocationsStudiesTrialsDeleteTest() throws ApiException {
        String projectsId = null;
        String locationsId = null;
        String studiesId = null;
        String trialsId = null;
        String uploadProtocol = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String key = null;
        String fields = null;
        String alt = null;
        String uploadType = null;
        String accessToken = null;
        String quotaUser = null;
        String paramCallback = null;
        String $xgafv = null;
        Object response = api.aiplatformProjectsLocationsStudiesTrialsDelete(projectsId, locationsId, studiesId, trialsId, uploadProtocol, oauthToken, prettyPrint, key, fields, alt, uploadType, accessToken, quotaUser, paramCallback, $xgafv);
        // TODO: test validations
    }

    /**
     * Gets a Trial.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void aiplatformProjectsLocationsStudiesTrialsGetTest() throws ApiException {
        String projectsId = null;
        String locationsId = null;
        String studiesId = null;
        String trialsId = null;
        String uploadProtocol = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String key = null;
        String fields = null;
        String alt = null;
        String uploadType = null;
        String accessToken = null;
        String quotaUser = null;
        String paramCallback = null;
        String $xgafv = null;
        GoogleCloudAiplatformV1Trial response = api.aiplatformProjectsLocationsStudiesTrialsGet(projectsId, locationsId, studiesId, trialsId, uploadProtocol, oauthToken, prettyPrint, key, fields, alt, uploadType, accessToken, quotaUser, paramCallback, $xgafv);
        // TODO: test validations
    }

    /**
     * Lists the Trials associated with a Study.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void aiplatformProjectsLocationsStudiesTrialsListTest() throws ApiException {
        String projectsId = null;
        String locationsId = null;
        String studiesId = null;
        String pageToken = null;
        Integer pageSize = null;
        String uploadProtocol = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String key = null;
        String fields = null;
        String alt = null;
        String uploadType = null;
        String accessToken = null;
        String quotaUser = null;
        String paramCallback = null;
        String $xgafv = null;
        GoogleCloudAiplatformV1ListTrialsResponse response = api.aiplatformProjectsLocationsStudiesTrialsList(projectsId, locationsId, studiesId, pageToken, pageSize, uploadProtocol, oauthToken, prettyPrint, key, fields, alt, uploadType, accessToken, quotaUser, paramCallback, $xgafv);
        // TODO: test validations
    }

    /**
     * Lists the pareto-optimal Trials for multi-objective Study or the optimal Trials for single-objective Study. The definition of pareto-optimal can be checked in wiki page. https://en.wikipedia.org/wiki/Pareto_efficiency
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void aiplatformProjectsLocationsStudiesTrialsListOptimalTrialsTest() throws ApiException {
        String projectsId = null;
        String locationsId = null;
        String studiesId = null;
        String uploadProtocol = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String key = null;
        String fields = null;
        String alt = null;
        String uploadType = null;
        String accessToken = null;
        String quotaUser = null;
        String paramCallback = null;
        String $xgafv = null;
        Object body = null;
        GoogleCloudAiplatformV1ListOptimalTrialsResponse response = api.aiplatformProjectsLocationsStudiesTrialsListOptimalTrials(projectsId, locationsId, studiesId, uploadProtocol, oauthToken, prettyPrint, key, fields, alt, uploadType, accessToken, quotaUser, paramCallback, $xgafv, body);
        // TODO: test validations
    }

    /**
     * Starts asynchronous cancellation on a long-running operation. The server makes a best effort to cancel the operation, but success is not guaranteed. If the server doesn&#39;t support this method, it returns &#x60;google.rpc.Code.UNIMPLEMENTED&#x60;. Clients can use Operations.GetOperation or other methods to check whether the cancellation succeeded or whether the operation completed despite cancellation. On successful cancellation, the operation is not deleted; instead, it becomes an operation with an Operation.error value with a google.rpc.Status.code of 1, corresponding to &#x60;Code.CANCELLED&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void aiplatformProjectsLocationsStudiesTrialsOperationsCancelTest() throws ApiException {
        String projectsId = null;
        String locationsId = null;
        String studiesId = null;
        String trialsId = null;
        String operationsId = null;
        String uploadProtocol = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String key = null;
        String fields = null;
        String alt = null;
        String uploadType = null;
        String accessToken = null;
        String quotaUser = null;
        String paramCallback = null;
        String $xgafv = null;
        Object response = api.aiplatformProjectsLocationsStudiesTrialsOperationsCancel(projectsId, locationsId, studiesId, trialsId, operationsId, uploadProtocol, oauthToken, prettyPrint, key, fields, alt, uploadType, accessToken, quotaUser, paramCallback, $xgafv);
        // TODO: test validations
    }

    /**
     * Deletes a long-running operation. This method indicates that the client is no longer interested in the operation result. It does not cancel the operation. If the server doesn&#39;t support this method, it returns &#x60;google.rpc.Code.UNIMPLEMENTED&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void aiplatformProjectsLocationsStudiesTrialsOperationsDeleteTest() throws ApiException {
        String projectsId = null;
        String locationsId = null;
        String studiesId = null;
        String trialsId = null;
        String operationsId = null;
        String uploadProtocol = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String key = null;
        String fields = null;
        String alt = null;
        String uploadType = null;
        String accessToken = null;
        String quotaUser = null;
        String paramCallback = null;
        String $xgafv = null;
        Object response = api.aiplatformProjectsLocationsStudiesTrialsOperationsDelete(projectsId, locationsId, studiesId, trialsId, operationsId, uploadProtocol, oauthToken, prettyPrint, key, fields, alt, uploadType, accessToken, quotaUser, paramCallback, $xgafv);
        // TODO: test validations
    }

    /**
     * Gets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void aiplatformProjectsLocationsStudiesTrialsOperationsGetTest() throws ApiException {
        String projectsId = null;
        String locationsId = null;
        String studiesId = null;
        String trialsId = null;
        String operationsId = null;
        String uploadProtocol = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String key = null;
        String fields = null;
        String alt = null;
        String uploadType = null;
        String accessToken = null;
        String quotaUser = null;
        String paramCallback = null;
        String $xgafv = null;
        GoogleLongrunningOperation response = api.aiplatformProjectsLocationsStudiesTrialsOperationsGet(projectsId, locationsId, studiesId, trialsId, operationsId, uploadProtocol, oauthToken, prettyPrint, key, fields, alt, uploadType, accessToken, quotaUser, paramCallback, $xgafv);
        // TODO: test validations
    }

    /**
     * Lists operations that match the specified filter in the request. If the server doesn&#39;t support this method, it returns &#x60;UNIMPLEMENTED&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void aiplatformProjectsLocationsStudiesTrialsOperationsListTest() throws ApiException {
        String projectsId = null;
        String locationsId = null;
        String studiesId = null;
        String trialsId = null;
        String pageToken = null;
        Integer pageSize = null;
        String filter = null;
        String uploadProtocol = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String key = null;
        String fields = null;
        String alt = null;
        String uploadType = null;
        String accessToken = null;
        String quotaUser = null;
        String paramCallback = null;
        String $xgafv = null;
        GoogleLongrunningListOperationsResponse response = api.aiplatformProjectsLocationsStudiesTrialsOperationsList(projectsId, locationsId, studiesId, trialsId, pageToken, pageSize, filter, uploadProtocol, oauthToken, prettyPrint, key, fields, alt, uploadType, accessToken, quotaUser, paramCallback, $xgafv);
        // TODO: test validations
    }

    /**
     * Waits until the specified long-running operation is done or reaches at most a specified timeout, returning the latest state. If the operation is already done, the latest state is immediately returned. If the timeout specified is greater than the default HTTP/RPC timeout, the HTTP/RPC timeout is used. If the server does not support this method, it returns &#x60;google.rpc.Code.UNIMPLEMENTED&#x60;. Note that this method is on a best-effort basis. It may return the latest state before the specified timeout (including immediately), meaning even an immediate response is no guarantee that the operation is done.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void aiplatformProjectsLocationsStudiesTrialsOperationsWaitTest() throws ApiException {
        String projectsId = null;
        String locationsId = null;
        String studiesId = null;
        String trialsId = null;
        String operationsId = null;
        String timeout = null;
        String uploadProtocol = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String key = null;
        String fields = null;
        String alt = null;
        String uploadType = null;
        String accessToken = null;
        String quotaUser = null;
        String paramCallback = null;
        String $xgafv = null;
        GoogleLongrunningOperation response = api.aiplatformProjectsLocationsStudiesTrialsOperationsWait(projectsId, locationsId, studiesId, trialsId, operationsId, timeout, uploadProtocol, oauthToken, prettyPrint, key, fields, alt, uploadType, accessToken, quotaUser, paramCallback, $xgafv);
        // TODO: test validations
    }

    /**
     * Stops a Trial.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void aiplatformProjectsLocationsStudiesTrialsStopTest() throws ApiException {
        String projectsId = null;
        String locationsId = null;
        String studiesId = null;
        String trialsId = null;
        String uploadProtocol = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String key = null;
        String fields = null;
        String alt = null;
        String uploadType = null;
        String accessToken = null;
        String quotaUser = null;
        String paramCallback = null;
        String $xgafv = null;
        Object body = null;
        GoogleCloudAiplatformV1Trial response = api.aiplatformProjectsLocationsStudiesTrialsStop(projectsId, locationsId, studiesId, trialsId, uploadProtocol, oauthToken, prettyPrint, key, fields, alt, uploadType, accessToken, quotaUser, paramCallback, $xgafv, body);
        // TODO: test validations
    }

    /**
     * Adds one or more Trials to a Study, with parameter values suggested by Vertex AI Vizier. Returns a long-running operation associated with the generation of Trial suggestions. When this long-running operation succeeds, it will contain a SuggestTrialsResponse.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void aiplatformProjectsLocationsStudiesTrialsSuggestTest() throws ApiException {
        String projectsId = null;
        String locationsId = null;
        String studiesId = null;
        String uploadProtocol = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String key = null;
        String fields = null;
        String alt = null;
        String uploadType = null;
        String accessToken = null;
        String quotaUser = null;
        String paramCallback = null;
        String $xgafv = null;
        GoogleCloudAiplatformV1SuggestTrialsRequest googleCloudAiplatformV1SuggestTrialsRequest = null;
        GoogleLongrunningOperation response = api.aiplatformProjectsLocationsStudiesTrialsSuggest(projectsId, locationsId, studiesId, uploadProtocol, oauthToken, prettyPrint, key, fields, alt, uploadType, accessToken, quotaUser, paramCallback, $xgafv, googleCloudAiplatformV1SuggestTrialsRequest);
        // TODO: test validations
    }

    /**
     * Reads multiple TensorboardTimeSeries&#39; data. The data point number limit is 1000 for scalars, 100 for tensors and blob references. If the number of data points stored is less than the limit, all data is returned. Otherwise, the number limit of data points is randomly selected from this time series and returned.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void aiplatformProjectsLocationsTensorboardsBatchReadTest() throws ApiException {
        String projectsId = null;
        String locationsId = null;
        String tensorboardsId = null;
        String timeSeries = null;
        String uploadProtocol = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String key = null;
        String fields = null;
        String alt = null;
        String uploadType = null;
        String accessToken = null;
        String quotaUser = null;
        String paramCallback = null;
        String $xgafv = null;
        GoogleCloudAiplatformV1BatchReadTensorboardTimeSeriesDataResponse response = api.aiplatformProjectsLocationsTensorboardsBatchRead(projectsId, locationsId, tensorboardsId, timeSeries, uploadProtocol, oauthToken, prettyPrint, key, fields, alt, uploadType, accessToken, quotaUser, paramCallback, $xgafv);
        // TODO: test validations
    }

    /**
     * Creates a Tensorboard.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void aiplatformProjectsLocationsTensorboardsCreateTest() throws ApiException {
        String projectsId = null;
        String locationsId = null;
        String uploadProtocol = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String key = null;
        String fields = null;
        String alt = null;
        String uploadType = null;
        String accessToken = null;
        String quotaUser = null;
        String paramCallback = null;
        String $xgafv = null;
        GoogleCloudAiplatformV1Tensorboard googleCloudAiplatformV1Tensorboard = null;
        GoogleLongrunningOperation response = api.aiplatformProjectsLocationsTensorboardsCreate(projectsId, locationsId, uploadProtocol, oauthToken, prettyPrint, key, fields, alt, uploadType, accessToken, quotaUser, paramCallback, $xgafv, googleCloudAiplatformV1Tensorboard);
        // TODO: test validations
    }

    /**
     * Deletes a Tensorboard.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void aiplatformProjectsLocationsTensorboardsDeleteTest() throws ApiException {
        String projectsId = null;
        String locationsId = null;
        String tensorboardsId = null;
        String uploadProtocol = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String key = null;
        String fields = null;
        String alt = null;
        String uploadType = null;
        String accessToken = null;
        String quotaUser = null;
        String paramCallback = null;
        String $xgafv = null;
        GoogleLongrunningOperation response = api.aiplatformProjectsLocationsTensorboardsDelete(projectsId, locationsId, tensorboardsId, uploadProtocol, oauthToken, prettyPrint, key, fields, alt, uploadType, accessToken, quotaUser, paramCallback, $xgafv);
        // TODO: test validations
    }

    /**
     * Batch create TensorboardTimeSeries that belong to a TensorboardExperiment.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void aiplatformProjectsLocationsTensorboardsExperimentsBatchCreateTest() throws ApiException {
        String projectsId = null;
        String locationsId = null;
        String tensorboardsId = null;
        String experimentsId = null;
        String uploadProtocol = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String key = null;
        String fields = null;
        String alt = null;
        String uploadType = null;
        String accessToken = null;
        String quotaUser = null;
        String paramCallback = null;
        String $xgafv = null;
        GoogleCloudAiplatformV1BatchCreateTensorboardTimeSeriesRequest googleCloudAiplatformV1BatchCreateTensorboardTimeSeriesRequest = null;
        GoogleCloudAiplatformV1BatchCreateTensorboardTimeSeriesResponse response = api.aiplatformProjectsLocationsTensorboardsExperimentsBatchCreate(projectsId, locationsId, tensorboardsId, experimentsId, uploadProtocol, oauthToken, prettyPrint, key, fields, alt, uploadType, accessToken, quotaUser, paramCallback, $xgafv, googleCloudAiplatformV1BatchCreateTensorboardTimeSeriesRequest);
        // TODO: test validations
    }

    /**
     * Creates a TensorboardExperiment.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void aiplatformProjectsLocationsTensorboardsExperimentsCreateTest() throws ApiException {
        String projectsId = null;
        String locationsId = null;
        String tensorboardsId = null;
        String tensorboardExperimentId = null;
        String uploadProtocol = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String key = null;
        String fields = null;
        String alt = null;
        String uploadType = null;
        String accessToken = null;
        String quotaUser = null;
        String paramCallback = null;
        String $xgafv = null;
        GoogleCloudAiplatformV1TensorboardExperiment googleCloudAiplatformV1TensorboardExperiment = null;
        GoogleCloudAiplatformV1TensorboardExperiment response = api.aiplatformProjectsLocationsTensorboardsExperimentsCreate(projectsId, locationsId, tensorboardsId, tensorboardExperimentId, uploadProtocol, oauthToken, prettyPrint, key, fields, alt, uploadType, accessToken, quotaUser, paramCallback, $xgafv, googleCloudAiplatformV1TensorboardExperiment);
        // TODO: test validations
    }

    /**
     * Deletes a TensorboardExperiment.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void aiplatformProjectsLocationsTensorboardsExperimentsDeleteTest() throws ApiException {
        String projectsId = null;
        String locationsId = null;
        String tensorboardsId = null;
        String experimentsId = null;
        String uploadProtocol = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String key = null;
        String fields = null;
        String alt = null;
        String uploadType = null;
        String accessToken = null;
        String quotaUser = null;
        String paramCallback = null;
        String $xgafv = null;
        GoogleLongrunningOperation response = api.aiplatformProjectsLocationsTensorboardsExperimentsDelete(projectsId, locationsId, tensorboardsId, experimentsId, uploadProtocol, oauthToken, prettyPrint, key, fields, alt, uploadType, accessToken, quotaUser, paramCallback, $xgafv);
        // TODO: test validations
    }

    /**
     * Gets a TensorboardExperiment.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void aiplatformProjectsLocationsTensorboardsExperimentsGetTest() throws ApiException {
        String projectsId = null;
        String locationsId = null;
        String tensorboardsId = null;
        String experimentsId = null;
        String uploadProtocol = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String key = null;
        String fields = null;
        String alt = null;
        String uploadType = null;
        String accessToken = null;
        String quotaUser = null;
        String paramCallback = null;
        String $xgafv = null;
        GoogleCloudAiplatformV1TensorboardExperiment response = api.aiplatformProjectsLocationsTensorboardsExperimentsGet(projectsId, locationsId, tensorboardsId, experimentsId, uploadProtocol, oauthToken, prettyPrint, key, fields, alt, uploadType, accessToken, quotaUser, paramCallback, $xgafv);
        // TODO: test validations
    }

    /**
     * Lists TensorboardExperiments in a Location.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void aiplatformProjectsLocationsTensorboardsExperimentsListTest() throws ApiException {
        String projectsId = null;
        String locationsId = null;
        String tensorboardsId = null;
        String filter = null;
        String readMask = null;
        String pageToken = null;
        Integer pageSize = null;
        String orderBy = null;
        String uploadProtocol = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String key = null;
        String fields = null;
        String alt = null;
        String uploadType = null;
        String accessToken = null;
        String quotaUser = null;
        String paramCallback = null;
        String $xgafv = null;
        GoogleCloudAiplatformV1ListTensorboardExperimentsResponse response = api.aiplatformProjectsLocationsTensorboardsExperimentsList(projectsId, locationsId, tensorboardsId, filter, readMask, pageToken, pageSize, orderBy, uploadProtocol, oauthToken, prettyPrint, key, fields, alt, uploadType, accessToken, quotaUser, paramCallback, $xgafv);
        // TODO: test validations
    }

    /**
     * Starts asynchronous cancellation on a long-running operation. The server makes a best effort to cancel the operation, but success is not guaranteed. If the server doesn&#39;t support this method, it returns &#x60;google.rpc.Code.UNIMPLEMENTED&#x60;. Clients can use Operations.GetOperation or other methods to check whether the cancellation succeeded or whether the operation completed despite cancellation. On successful cancellation, the operation is not deleted; instead, it becomes an operation with an Operation.error value with a google.rpc.Status.code of 1, corresponding to &#x60;Code.CANCELLED&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void aiplatformProjectsLocationsTensorboardsExperimentsOperationsCancelTest() throws ApiException {
        String projectsId = null;
        String locationsId = null;
        String tensorboardsId = null;
        String experimentsId = null;
        String operationsId = null;
        String uploadProtocol = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String key = null;
        String fields = null;
        String alt = null;
        String uploadType = null;
        String accessToken = null;
        String quotaUser = null;
        String paramCallback = null;
        String $xgafv = null;
        Object response = api.aiplatformProjectsLocationsTensorboardsExperimentsOperationsCancel(projectsId, locationsId, tensorboardsId, experimentsId, operationsId, uploadProtocol, oauthToken, prettyPrint, key, fields, alt, uploadType, accessToken, quotaUser, paramCallback, $xgafv);
        // TODO: test validations
    }

    /**
     * Deletes a long-running operation. This method indicates that the client is no longer interested in the operation result. It does not cancel the operation. If the server doesn&#39;t support this method, it returns &#x60;google.rpc.Code.UNIMPLEMENTED&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void aiplatformProjectsLocationsTensorboardsExperimentsOperationsDeleteTest() throws ApiException {
        String projectsId = null;
        String locationsId = null;
        String tensorboardsId = null;
        String experimentsId = null;
        String operationsId = null;
        String uploadProtocol = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String key = null;
        String fields = null;
        String alt = null;
        String uploadType = null;
        String accessToken = null;
        String quotaUser = null;
        String paramCallback = null;
        String $xgafv = null;
        Object response = api.aiplatformProjectsLocationsTensorboardsExperimentsOperationsDelete(projectsId, locationsId, tensorboardsId, experimentsId, operationsId, uploadProtocol, oauthToken, prettyPrint, key, fields, alt, uploadType, accessToken, quotaUser, paramCallback, $xgafv);
        // TODO: test validations
    }

    /**
     * Gets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void aiplatformProjectsLocationsTensorboardsExperimentsOperationsGetTest() throws ApiException {
        String projectsId = null;
        String locationsId = null;
        String tensorboardsId = null;
        String experimentsId = null;
        String operationsId = null;
        String uploadProtocol = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String key = null;
        String fields = null;
        String alt = null;
        String uploadType = null;
        String accessToken = null;
        String quotaUser = null;
        String paramCallback = null;
        String $xgafv = null;
        GoogleLongrunningOperation response = api.aiplatformProjectsLocationsTensorboardsExperimentsOperationsGet(projectsId, locationsId, tensorboardsId, experimentsId, operationsId, uploadProtocol, oauthToken, prettyPrint, key, fields, alt, uploadType, accessToken, quotaUser, paramCallback, $xgafv);
        // TODO: test validations
    }

    /**
     * Lists operations that match the specified filter in the request. If the server doesn&#39;t support this method, it returns &#x60;UNIMPLEMENTED&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void aiplatformProjectsLocationsTensorboardsExperimentsOperationsListTest() throws ApiException {
        String projectsId = null;
        String locationsId = null;
        String tensorboardsId = null;
        String experimentsId = null;
        String filter = null;
        String pageToken = null;
        Integer pageSize = null;
        String uploadProtocol = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String key = null;
        String fields = null;
        String alt = null;
        String uploadType = null;
        String accessToken = null;
        String quotaUser = null;
        String paramCallback = null;
        String $xgafv = null;
        GoogleLongrunningListOperationsResponse response = api.aiplatformProjectsLocationsTensorboardsExperimentsOperationsList(projectsId, locationsId, tensorboardsId, experimentsId, filter, pageToken, pageSize, uploadProtocol, oauthToken, prettyPrint, key, fields, alt, uploadType, accessToken, quotaUser, paramCallback, $xgafv);
        // TODO: test validations
    }

    /**
     * Waits until the specified long-running operation is done or reaches at most a specified timeout, returning the latest state. If the operation is already done, the latest state is immediately returned. If the timeout specified is greater than the default HTTP/RPC timeout, the HTTP/RPC timeout is used. If the server does not support this method, it returns &#x60;google.rpc.Code.UNIMPLEMENTED&#x60;. Note that this method is on a best-effort basis. It may return the latest state before the specified timeout (including immediately), meaning even an immediate response is no guarantee that the operation is done.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void aiplatformProjectsLocationsTensorboardsExperimentsOperationsWaitTest() throws ApiException {
        String projectsId = null;
        String locationsId = null;
        String tensorboardsId = null;
        String experimentsId = null;
        String operationsId = null;
        String timeout = null;
        String uploadProtocol = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String key = null;
        String fields = null;
        String alt = null;
        String uploadType = null;
        String accessToken = null;
        String quotaUser = null;
        String paramCallback = null;
        String $xgafv = null;
        GoogleLongrunningOperation response = api.aiplatformProjectsLocationsTensorboardsExperimentsOperationsWait(projectsId, locationsId, tensorboardsId, experimentsId, operationsId, timeout, uploadProtocol, oauthToken, prettyPrint, key, fields, alt, uploadType, accessToken, quotaUser, paramCallback, $xgafv);
        // TODO: test validations
    }

    /**
     * Updates a TensorboardExperiment.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void aiplatformProjectsLocationsTensorboardsExperimentsPatchTest() throws ApiException {
        String projectsId = null;
        String locationsId = null;
        String tensorboardsId = null;
        String experimentsId = null;
        String updateMask = null;
        String uploadProtocol = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String key = null;
        String fields = null;
        String alt = null;
        String uploadType = null;
        String accessToken = null;
        String quotaUser = null;
        String paramCallback = null;
        String $xgafv = null;
        GoogleCloudAiplatformV1TensorboardExperiment googleCloudAiplatformV1TensorboardExperiment = null;
        GoogleCloudAiplatformV1TensorboardExperiment response = api.aiplatformProjectsLocationsTensorboardsExperimentsPatch(projectsId, locationsId, tensorboardsId, experimentsId, updateMask, uploadProtocol, oauthToken, prettyPrint, key, fields, alt, uploadType, accessToken, quotaUser, paramCallback, $xgafv, googleCloudAiplatformV1TensorboardExperiment);
        // TODO: test validations
    }

    /**
     * Batch create TensorboardRuns.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void aiplatformProjectsLocationsTensorboardsExperimentsRunsBatchCreateTest() throws ApiException {
        String projectsId = null;
        String locationsId = null;
        String tensorboardsId = null;
        String experimentsId = null;
        String uploadProtocol = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String key = null;
        String fields = null;
        String alt = null;
        String uploadType = null;
        String accessToken = null;
        String quotaUser = null;
        String paramCallback = null;
        String $xgafv = null;
        GoogleCloudAiplatformV1BatchCreateTensorboardRunsRequest googleCloudAiplatformV1BatchCreateTensorboardRunsRequest = null;
        GoogleCloudAiplatformV1BatchCreateTensorboardRunsResponse response = api.aiplatformProjectsLocationsTensorboardsExperimentsRunsBatchCreate(projectsId, locationsId, tensorboardsId, experimentsId, uploadProtocol, oauthToken, prettyPrint, key, fields, alt, uploadType, accessToken, quotaUser, paramCallback, $xgafv, googleCloudAiplatformV1BatchCreateTensorboardRunsRequest);
        // TODO: test validations
    }

    /**
     * Creates a TensorboardRun.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void aiplatformProjectsLocationsTensorboardsExperimentsRunsCreateTest() throws ApiException {
        String projectsId = null;
        String locationsId = null;
        String tensorboardsId = null;
        String experimentsId = null;
        String tensorboardRunId = null;
        String uploadProtocol = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String key = null;
        String fields = null;
        String alt = null;
        String uploadType = null;
        String accessToken = null;
        String quotaUser = null;
        String paramCallback = null;
        String $xgafv = null;
        GoogleCloudAiplatformV1TensorboardRun googleCloudAiplatformV1TensorboardRun = null;
        GoogleCloudAiplatformV1TensorboardRun response = api.aiplatformProjectsLocationsTensorboardsExperimentsRunsCreate(projectsId, locationsId, tensorboardsId, experimentsId, tensorboardRunId, uploadProtocol, oauthToken, prettyPrint, key, fields, alt, uploadType, accessToken, quotaUser, paramCallback, $xgafv, googleCloudAiplatformV1TensorboardRun);
        // TODO: test validations
    }

    /**
     * Deletes a TensorboardRun.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void aiplatformProjectsLocationsTensorboardsExperimentsRunsDeleteTest() throws ApiException {
        String projectsId = null;
        String locationsId = null;
        String tensorboardsId = null;
        String experimentsId = null;
        String runsId = null;
        String uploadProtocol = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String key = null;
        String fields = null;
        String alt = null;
        String uploadType = null;
        String accessToken = null;
        String quotaUser = null;
        String paramCallback = null;
        String $xgafv = null;
        GoogleLongrunningOperation response = api.aiplatformProjectsLocationsTensorboardsExperimentsRunsDelete(projectsId, locationsId, tensorboardsId, experimentsId, runsId, uploadProtocol, oauthToken, prettyPrint, key, fields, alt, uploadType, accessToken, quotaUser, paramCallback, $xgafv);
        // TODO: test validations
    }

    /**
     * Gets a TensorboardRun.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void aiplatformProjectsLocationsTensorboardsExperimentsRunsGetTest() throws ApiException {
        String projectsId = null;
        String locationsId = null;
        String tensorboardsId = null;
        String experimentsId = null;
        String runsId = null;
        String uploadProtocol = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String key = null;
        String fields = null;
        String alt = null;
        String uploadType = null;
        String accessToken = null;
        String quotaUser = null;
        String paramCallback = null;
        String $xgafv = null;
        GoogleCloudAiplatformV1TensorboardRun response = api.aiplatformProjectsLocationsTensorboardsExperimentsRunsGet(projectsId, locationsId, tensorboardsId, experimentsId, runsId, uploadProtocol, oauthToken, prettyPrint, key, fields, alt, uploadType, accessToken, quotaUser, paramCallback, $xgafv);
        // TODO: test validations
    }

    /**
     * Lists TensorboardRuns in a Location.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void aiplatformProjectsLocationsTensorboardsExperimentsRunsListTest() throws ApiException {
        String projectsId = null;
        String locationsId = null;
        String tensorboardsId = null;
        String experimentsId = null;
        Integer pageSize = null;
        String readMask = null;
        String pageToken = null;
        String orderBy = null;
        String filter = null;
        String uploadProtocol = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String key = null;
        String fields = null;
        String alt = null;
        String uploadType = null;
        String accessToken = null;
        String quotaUser = null;
        String paramCallback = null;
        String $xgafv = null;
        GoogleCloudAiplatformV1ListTensorboardRunsResponse response = api.aiplatformProjectsLocationsTensorboardsExperimentsRunsList(projectsId, locationsId, tensorboardsId, experimentsId, pageSize, readMask, pageToken, orderBy, filter, uploadProtocol, oauthToken, prettyPrint, key, fields, alt, uploadType, accessToken, quotaUser, paramCallback, $xgafv);
        // TODO: test validations
    }

    /**
     * Starts asynchronous cancellation on a long-running operation. The server makes a best effort to cancel the operation, but success is not guaranteed. If the server doesn&#39;t support this method, it returns &#x60;google.rpc.Code.UNIMPLEMENTED&#x60;. Clients can use Operations.GetOperation or other methods to check whether the cancellation succeeded or whether the operation completed despite cancellation. On successful cancellation, the operation is not deleted; instead, it becomes an operation with an Operation.error value with a google.rpc.Status.code of 1, corresponding to &#x60;Code.CANCELLED&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void aiplatformProjectsLocationsTensorboardsExperimentsRunsOperationsCancelTest() throws ApiException {
        String projectsId = null;
        String locationsId = null;
        String tensorboardsId = null;
        String experimentsId = null;
        String runsId = null;
        String operationsId = null;
        String uploadProtocol = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String key = null;
        String fields = null;
        String alt = null;
        String uploadType = null;
        String accessToken = null;
        String quotaUser = null;
        String paramCallback = null;
        String $xgafv = null;
        Object response = api.aiplatformProjectsLocationsTensorboardsExperimentsRunsOperationsCancel(projectsId, locationsId, tensorboardsId, experimentsId, runsId, operationsId, uploadProtocol, oauthToken, prettyPrint, key, fields, alt, uploadType, accessToken, quotaUser, paramCallback, $xgafv);
        // TODO: test validations
    }

    /**
     * Deletes a long-running operation. This method indicates that the client is no longer interested in the operation result. It does not cancel the operation. If the server doesn&#39;t support this method, it returns &#x60;google.rpc.Code.UNIMPLEMENTED&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void aiplatformProjectsLocationsTensorboardsExperimentsRunsOperationsDeleteTest() throws ApiException {
        String projectsId = null;
        String locationsId = null;
        String tensorboardsId = null;
        String experimentsId = null;
        String runsId = null;
        String operationsId = null;
        String uploadProtocol = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String key = null;
        String fields = null;
        String alt = null;
        String uploadType = null;
        String accessToken = null;
        String quotaUser = null;
        String paramCallback = null;
        String $xgafv = null;
        Object response = api.aiplatformProjectsLocationsTensorboardsExperimentsRunsOperationsDelete(projectsId, locationsId, tensorboardsId, experimentsId, runsId, operationsId, uploadProtocol, oauthToken, prettyPrint, key, fields, alt, uploadType, accessToken, quotaUser, paramCallback, $xgafv);
        // TODO: test validations
    }

    /**
     * Gets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void aiplatformProjectsLocationsTensorboardsExperimentsRunsOperationsGetTest() throws ApiException {
        String projectsId = null;
        String locationsId = null;
        String tensorboardsId = null;
        String experimentsId = null;
        String runsId = null;
        String operationsId = null;
        String uploadProtocol = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String key = null;
        String fields = null;
        String alt = null;
        String uploadType = null;
        String accessToken = null;
        String quotaUser = null;
        String paramCallback = null;
        String $xgafv = null;
        GoogleLongrunningOperation response = api.aiplatformProjectsLocationsTensorboardsExperimentsRunsOperationsGet(projectsId, locationsId, tensorboardsId, experimentsId, runsId, operationsId, uploadProtocol, oauthToken, prettyPrint, key, fields, alt, uploadType, accessToken, quotaUser, paramCallback, $xgafv);
        // TODO: test validations
    }

    /**
     * Lists operations that match the specified filter in the request. If the server doesn&#39;t support this method, it returns &#x60;UNIMPLEMENTED&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void aiplatformProjectsLocationsTensorboardsExperimentsRunsOperationsListTest() throws ApiException {
        String projectsId = null;
        String locationsId = null;
        String tensorboardsId = null;
        String experimentsId = null;
        String runsId = null;
        Integer pageSize = null;
        String pageToken = null;
        String filter = null;
        String uploadProtocol = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String key = null;
        String fields = null;
        String alt = null;
        String uploadType = null;
        String accessToken = null;
        String quotaUser = null;
        String paramCallback = null;
        String $xgafv = null;
        GoogleLongrunningListOperationsResponse response = api.aiplatformProjectsLocationsTensorboardsExperimentsRunsOperationsList(projectsId, locationsId, tensorboardsId, experimentsId, runsId, pageSize, pageToken, filter, uploadProtocol, oauthToken, prettyPrint, key, fields, alt, uploadType, accessToken, quotaUser, paramCallback, $xgafv);
        // TODO: test validations
    }

    /**
     * Waits until the specified long-running operation is done or reaches at most a specified timeout, returning the latest state. If the operation is already done, the latest state is immediately returned. If the timeout specified is greater than the default HTTP/RPC timeout, the HTTP/RPC timeout is used. If the server does not support this method, it returns &#x60;google.rpc.Code.UNIMPLEMENTED&#x60;. Note that this method is on a best-effort basis. It may return the latest state before the specified timeout (including immediately), meaning even an immediate response is no guarantee that the operation is done.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void aiplatformProjectsLocationsTensorboardsExperimentsRunsOperationsWaitTest() throws ApiException {
        String projectsId = null;
        String locationsId = null;
        String tensorboardsId = null;
        String experimentsId = null;
        String runsId = null;
        String operationsId = null;
        String timeout = null;
        String uploadProtocol = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String key = null;
        String fields = null;
        String alt = null;
        String uploadType = null;
        String accessToken = null;
        String quotaUser = null;
        String paramCallback = null;
        String $xgafv = null;
        GoogleLongrunningOperation response = api.aiplatformProjectsLocationsTensorboardsExperimentsRunsOperationsWait(projectsId, locationsId, tensorboardsId, experimentsId, runsId, operationsId, timeout, uploadProtocol, oauthToken, prettyPrint, key, fields, alt, uploadType, accessToken, quotaUser, paramCallback, $xgafv);
        // TODO: test validations
    }

    /**
     * Updates a TensorboardRun.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void aiplatformProjectsLocationsTensorboardsExperimentsRunsPatchTest() throws ApiException {
        String projectsId = null;
        String locationsId = null;
        String tensorboardsId = null;
        String experimentsId = null;
        String runsId = null;
        String updateMask = null;
        String uploadProtocol = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String key = null;
        String fields = null;
        String alt = null;
        String uploadType = null;
        String accessToken = null;
        String quotaUser = null;
        String paramCallback = null;
        String $xgafv = null;
        GoogleCloudAiplatformV1TensorboardRun googleCloudAiplatformV1TensorboardRun = null;
        GoogleCloudAiplatformV1TensorboardRun response = api.aiplatformProjectsLocationsTensorboardsExperimentsRunsPatch(projectsId, locationsId, tensorboardsId, experimentsId, runsId, updateMask, uploadProtocol, oauthToken, prettyPrint, key, fields, alt, uploadType, accessToken, quotaUser, paramCallback, $xgafv, googleCloudAiplatformV1TensorboardRun);
        // TODO: test validations
    }

    /**
     * Creates a TensorboardTimeSeries.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void aiplatformProjectsLocationsTensorboardsExperimentsRunsTimeSeriesCreateTest() throws ApiException {
        String projectsId = null;
        String locationsId = null;
        String tensorboardsId = null;
        String experimentsId = null;
        String runsId = null;
        String tensorboardTimeSeriesId = null;
        String uploadProtocol = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String key = null;
        String fields = null;
        String alt = null;
        String uploadType = null;
        String accessToken = null;
        String quotaUser = null;
        String paramCallback = null;
        String $xgafv = null;
        GoogleCloudAiplatformV1TensorboardTimeSeries googleCloudAiplatformV1TensorboardTimeSeries = null;
        GoogleCloudAiplatformV1TensorboardTimeSeries response = api.aiplatformProjectsLocationsTensorboardsExperimentsRunsTimeSeriesCreate(projectsId, locationsId, tensorboardsId, experimentsId, runsId, tensorboardTimeSeriesId, uploadProtocol, oauthToken, prettyPrint, key, fields, alt, uploadType, accessToken, quotaUser, paramCallback, $xgafv, googleCloudAiplatformV1TensorboardTimeSeries);
        // TODO: test validations
    }

    /**
     * Deletes a TensorboardTimeSeries.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void aiplatformProjectsLocationsTensorboardsExperimentsRunsTimeSeriesDeleteTest() throws ApiException {
        String projectsId = null;
        String locationsId = null;
        String tensorboardsId = null;
        String experimentsId = null;
        String runsId = null;
        String timeSeriesId = null;
        String uploadProtocol = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String key = null;
        String fields = null;
        String alt = null;
        String uploadType = null;
        String accessToken = null;
        String quotaUser = null;
        String paramCallback = null;
        String $xgafv = null;
        GoogleLongrunningOperation response = api.aiplatformProjectsLocationsTensorboardsExperimentsRunsTimeSeriesDelete(projectsId, locationsId, tensorboardsId, experimentsId, runsId, timeSeriesId, uploadProtocol, oauthToken, prettyPrint, key, fields, alt, uploadType, accessToken, quotaUser, paramCallback, $xgafv);
        // TODO: test validations
    }

    /**
     * Exports a TensorboardTimeSeries&#39; data. Data is returned in paginated responses.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void aiplatformProjectsLocationsTensorboardsExperimentsRunsTimeSeriesExportTensorboardTimeSeriesTest() throws ApiException {
        String projectsId = null;
        String locationsId = null;
        String tensorboardsId = null;
        String experimentsId = null;
        String runsId = null;
        String timeSeriesId = null;
        String uploadProtocol = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String key = null;
        String fields = null;
        String alt = null;
        String uploadType = null;
        String accessToken = null;
        String quotaUser = null;
        String paramCallback = null;
        String $xgafv = null;
        GoogleCloudAiplatformV1ExportTensorboardTimeSeriesDataRequest googleCloudAiplatformV1ExportTensorboardTimeSeriesDataRequest = null;
        GoogleCloudAiplatformV1ExportTensorboardTimeSeriesDataResponse response = api.aiplatformProjectsLocationsTensorboardsExperimentsRunsTimeSeriesExportTensorboardTimeSeries(projectsId, locationsId, tensorboardsId, experimentsId, runsId, timeSeriesId, uploadProtocol, oauthToken, prettyPrint, key, fields, alt, uploadType, accessToken, quotaUser, paramCallback, $xgafv, googleCloudAiplatformV1ExportTensorboardTimeSeriesDataRequest);
        // TODO: test validations
    }

    /**
     * Gets a TensorboardTimeSeries.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void aiplatformProjectsLocationsTensorboardsExperimentsRunsTimeSeriesGetTest() throws ApiException {
        String projectsId = null;
        String locationsId = null;
        String tensorboardsId = null;
        String experimentsId = null;
        String runsId = null;
        String timeSeriesId = null;
        String uploadProtocol = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String key = null;
        String fields = null;
        String alt = null;
        String uploadType = null;
        String accessToken = null;
        String quotaUser = null;
        String paramCallback = null;
        String $xgafv = null;
        GoogleCloudAiplatformV1TensorboardTimeSeries response = api.aiplatformProjectsLocationsTensorboardsExperimentsRunsTimeSeriesGet(projectsId, locationsId, tensorboardsId, experimentsId, runsId, timeSeriesId, uploadProtocol, oauthToken, prettyPrint, key, fields, alt, uploadType, accessToken, quotaUser, paramCallback, $xgafv);
        // TODO: test validations
    }

    /**
     * Lists TensorboardTimeSeries in a Location.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void aiplatformProjectsLocationsTensorboardsExperimentsRunsTimeSeriesListTest() throws ApiException {
        String projectsId = null;
        String locationsId = null;
        String tensorboardsId = null;
        String experimentsId = null;
        String runsId = null;
        String readMask = null;
        Integer pageSize = null;
        String orderBy = null;
        String pageToken = null;
        String filter = null;
        String uploadProtocol = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String key = null;
        String fields = null;
        String alt = null;
        String uploadType = null;
        String accessToken = null;
        String quotaUser = null;
        String paramCallback = null;
        String $xgafv = null;
        GoogleCloudAiplatformV1ListTensorboardTimeSeriesResponse response = api.aiplatformProjectsLocationsTensorboardsExperimentsRunsTimeSeriesList(projectsId, locationsId, tensorboardsId, experimentsId, runsId, readMask, pageSize, orderBy, pageToken, filter, uploadProtocol, oauthToken, prettyPrint, key, fields, alt, uploadType, accessToken, quotaUser, paramCallback, $xgafv);
        // TODO: test validations
    }

    /**
     * Starts asynchronous cancellation on a long-running operation. The server makes a best effort to cancel the operation, but success is not guaranteed. If the server doesn&#39;t support this method, it returns &#x60;google.rpc.Code.UNIMPLEMENTED&#x60;. Clients can use Operations.GetOperation or other methods to check whether the cancellation succeeded or whether the operation completed despite cancellation. On successful cancellation, the operation is not deleted; instead, it becomes an operation with an Operation.error value with a google.rpc.Status.code of 1, corresponding to &#x60;Code.CANCELLED&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void aiplatformProjectsLocationsTensorboardsExperimentsRunsTimeSeriesOperationsCancelTest() throws ApiException {
        String projectsId = null;
        String locationsId = null;
        String tensorboardsId = null;
        String experimentsId = null;
        String runsId = null;
        String timeSeriesId = null;
        String operationsId = null;
        String uploadProtocol = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String key = null;
        String fields = null;
        String alt = null;
        String uploadType = null;
        String accessToken = null;
        String quotaUser = null;
        String paramCallback = null;
        String $xgafv = null;
        Object response = api.aiplatformProjectsLocationsTensorboardsExperimentsRunsTimeSeriesOperationsCancel(projectsId, locationsId, tensorboardsId, experimentsId, runsId, timeSeriesId, operationsId, uploadProtocol, oauthToken, prettyPrint, key, fields, alt, uploadType, accessToken, quotaUser, paramCallback, $xgafv);
        // TODO: test validations
    }

    /**
     * Deletes a long-running operation. This method indicates that the client is no longer interested in the operation result. It does not cancel the operation. If the server doesn&#39;t support this method, it returns &#x60;google.rpc.Code.UNIMPLEMENTED&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void aiplatformProjectsLocationsTensorboardsExperimentsRunsTimeSeriesOperationsDeleteTest() throws ApiException {
        String projectsId = null;
        String locationsId = null;
        String tensorboardsId = null;
        String experimentsId = null;
        String runsId = null;
        String timeSeriesId = null;
        String operationsId = null;
        String uploadProtocol = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String key = null;
        String fields = null;
        String alt = null;
        String uploadType = null;
        String accessToken = null;
        String quotaUser = null;
        String paramCallback = null;
        String $xgafv = null;
        Object response = api.aiplatformProjectsLocationsTensorboardsExperimentsRunsTimeSeriesOperationsDelete(projectsId, locationsId, tensorboardsId, experimentsId, runsId, timeSeriesId, operationsId, uploadProtocol, oauthToken, prettyPrint, key, fields, alt, uploadType, accessToken, quotaUser, paramCallback, $xgafv);
        // TODO: test validations
    }

    /**
     * Gets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void aiplatformProjectsLocationsTensorboardsExperimentsRunsTimeSeriesOperationsGetTest() throws ApiException {
        String projectsId = null;
        String locationsId = null;
        String tensorboardsId = null;
        String experimentsId = null;
        String runsId = null;
        String timeSeriesId = null;
        String operationsId = null;
        String uploadProtocol = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String key = null;
        String fields = null;
        String alt = null;
        String uploadType = null;
        String accessToken = null;
        String quotaUser = null;
        String paramCallback = null;
        String $xgafv = null;
        GoogleLongrunningOperation response = api.aiplatformProjectsLocationsTensorboardsExperimentsRunsTimeSeriesOperationsGet(projectsId, locationsId, tensorboardsId, experimentsId, runsId, timeSeriesId, operationsId, uploadProtocol, oauthToken, prettyPrint, key, fields, alt, uploadType, accessToken, quotaUser, paramCallback, $xgafv);
        // TODO: test validations
    }

    /**
     * Lists operations that match the specified filter in the request. If the server doesn&#39;t support this method, it returns &#x60;UNIMPLEMENTED&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void aiplatformProjectsLocationsTensorboardsExperimentsRunsTimeSeriesOperationsListTest() throws ApiException {
        String projectsId = null;
        String locationsId = null;
        String tensorboardsId = null;
        String experimentsId = null;
        String runsId = null;
        String timeSeriesId = null;
        String pageToken = null;
        String filter = null;
        Integer pageSize = null;
        String uploadProtocol = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String key = null;
        String fields = null;
        String alt = null;
        String uploadType = null;
        String accessToken = null;
        String quotaUser = null;
        String paramCallback = null;
        String $xgafv = null;
        GoogleLongrunningListOperationsResponse response = api.aiplatformProjectsLocationsTensorboardsExperimentsRunsTimeSeriesOperationsList(projectsId, locationsId, tensorboardsId, experimentsId, runsId, timeSeriesId, pageToken, filter, pageSize, uploadProtocol, oauthToken, prettyPrint, key, fields, alt, uploadType, accessToken, quotaUser, paramCallback, $xgafv);
        // TODO: test validations
    }

    /**
     * Waits until the specified long-running operation is done or reaches at most a specified timeout, returning the latest state. If the operation is already done, the latest state is immediately returned. If the timeout specified is greater than the default HTTP/RPC timeout, the HTTP/RPC timeout is used. If the server does not support this method, it returns &#x60;google.rpc.Code.UNIMPLEMENTED&#x60;. Note that this method is on a best-effort basis. It may return the latest state before the specified timeout (including immediately), meaning even an immediate response is no guarantee that the operation is done.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void aiplatformProjectsLocationsTensorboardsExperimentsRunsTimeSeriesOperationsWaitTest() throws ApiException {
        String projectsId = null;
        String locationsId = null;
        String tensorboardsId = null;
        String experimentsId = null;
        String runsId = null;
        String timeSeriesId = null;
        String operationsId = null;
        String timeout = null;
        String uploadProtocol = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String key = null;
        String fields = null;
        String alt = null;
        String uploadType = null;
        String accessToken = null;
        String quotaUser = null;
        String paramCallback = null;
        String $xgafv = null;
        GoogleLongrunningOperation response = api.aiplatformProjectsLocationsTensorboardsExperimentsRunsTimeSeriesOperationsWait(projectsId, locationsId, tensorboardsId, experimentsId, runsId, timeSeriesId, operationsId, timeout, uploadProtocol, oauthToken, prettyPrint, key, fields, alt, uploadType, accessToken, quotaUser, paramCallback, $xgafv);
        // TODO: test validations
    }

    /**
     * Updates a TensorboardTimeSeries.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void aiplatformProjectsLocationsTensorboardsExperimentsRunsTimeSeriesPatchTest() throws ApiException {
        String projectsId = null;
        String locationsId = null;
        String tensorboardsId = null;
        String experimentsId = null;
        String runsId = null;
        String timeSeriesId = null;
        String updateMask = null;
        String uploadProtocol = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String key = null;
        String fields = null;
        String alt = null;
        String uploadType = null;
        String accessToken = null;
        String quotaUser = null;
        String paramCallback = null;
        String $xgafv = null;
        GoogleCloudAiplatformV1TensorboardTimeSeries googleCloudAiplatformV1TensorboardTimeSeries = null;
        GoogleCloudAiplatformV1TensorboardTimeSeries response = api.aiplatformProjectsLocationsTensorboardsExperimentsRunsTimeSeriesPatch(projectsId, locationsId, tensorboardsId, experimentsId, runsId, timeSeriesId, updateMask, uploadProtocol, oauthToken, prettyPrint, key, fields, alt, uploadType, accessToken, quotaUser, paramCallback, $xgafv, googleCloudAiplatformV1TensorboardTimeSeries);
        // TODO: test validations
    }

    /**
     * Reads a TensorboardTimeSeries&#39; data. By default, if the number of data points stored is less than 1000, all data is returned. Otherwise, 1000 data points is randomly selected from this time series and returned. This value can be changed by changing max_data_points, which can&#39;t be greater than 10k.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void aiplatformProjectsLocationsTensorboardsExperimentsRunsTimeSeriesReadTest() throws ApiException {
        String projectsId = null;
        String locationsId = null;
        String tensorboardsId = null;
        String experimentsId = null;
        String runsId = null;
        String timeSeriesId = null;
        Integer maxDataPoints = null;
        String filter = null;
        String uploadProtocol = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String key = null;
        String fields = null;
        String alt = null;
        String uploadType = null;
        String accessToken = null;
        String quotaUser = null;
        String paramCallback = null;
        String $xgafv = null;
        GoogleCloudAiplatformV1ReadTensorboardTimeSeriesDataResponse response = api.aiplatformProjectsLocationsTensorboardsExperimentsRunsTimeSeriesRead(projectsId, locationsId, tensorboardsId, experimentsId, runsId, timeSeriesId, maxDataPoints, filter, uploadProtocol, oauthToken, prettyPrint, key, fields, alt, uploadType, accessToken, quotaUser, paramCallback, $xgafv);
        // TODO: test validations
    }

    /**
     * Gets bytes of TensorboardBlobs. This is to allow reading blob data stored in consumer project&#39;s Cloud Storage bucket without users having to obtain Cloud Storage access permission.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void aiplatformProjectsLocationsTensorboardsExperimentsRunsTimeSeriesReadBlobDataTest() throws ApiException {
        String projectsId = null;
        String locationsId = null;
        String tensorboardsId = null;
        String experimentsId = null;
        String runsId = null;
        String timeSeriesId = null;
        String blobIds = null;
        String uploadProtocol = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String key = null;
        String fields = null;
        String alt = null;
        String uploadType = null;
        String accessToken = null;
        String quotaUser = null;
        String paramCallback = null;
        String $xgafv = null;
        GoogleCloudAiplatformV1ReadTensorboardBlobDataResponse response = api.aiplatformProjectsLocationsTensorboardsExperimentsRunsTimeSeriesReadBlobData(projectsId, locationsId, tensorboardsId, experimentsId, runsId, timeSeriesId, blobIds, uploadProtocol, oauthToken, prettyPrint, key, fields, alt, uploadType, accessToken, quotaUser, paramCallback, $xgafv);
        // TODO: test validations
    }

    /**
     * Write time series data points into multiple TensorboardTimeSeries under a TensorboardRun. If any data fail to be ingested, an error is returned.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void aiplatformProjectsLocationsTensorboardsExperimentsRunsWriteTest() throws ApiException {
        String projectsId = null;
        String locationsId = null;
        String tensorboardsId = null;
        String experimentsId = null;
        String runsId = null;
        String uploadProtocol = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String key = null;
        String fields = null;
        String alt = null;
        String uploadType = null;
        String accessToken = null;
        String quotaUser = null;
        String paramCallback = null;
        String $xgafv = null;
        GoogleCloudAiplatformV1WriteTensorboardRunDataRequest googleCloudAiplatformV1WriteTensorboardRunDataRequest = null;
        Object response = api.aiplatformProjectsLocationsTensorboardsExperimentsRunsWrite(projectsId, locationsId, tensorboardsId, experimentsId, runsId, uploadProtocol, oauthToken, prettyPrint, key, fields, alt, uploadType, accessToken, quotaUser, paramCallback, $xgafv, googleCloudAiplatformV1WriteTensorboardRunDataRequest);
        // TODO: test validations
    }

    /**
     * Write time series data points of multiple TensorboardTimeSeries in multiple TensorboardRun&#39;s. If any data fail to be ingested, an error is returned.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void aiplatformProjectsLocationsTensorboardsExperimentsWriteTest() throws ApiException {
        String projectsId = null;
        String locationsId = null;
        String tensorboardsId = null;
        String experimentsId = null;
        String uploadProtocol = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String key = null;
        String fields = null;
        String alt = null;
        String uploadType = null;
        String accessToken = null;
        String quotaUser = null;
        String paramCallback = null;
        String $xgafv = null;
        GoogleCloudAiplatformV1WriteTensorboardExperimentDataRequest googleCloudAiplatformV1WriteTensorboardExperimentDataRequest = null;
        Object response = api.aiplatformProjectsLocationsTensorboardsExperimentsWrite(projectsId, locationsId, tensorboardsId, experimentsId, uploadProtocol, oauthToken, prettyPrint, key, fields, alt, uploadType, accessToken, quotaUser, paramCallback, $xgafv, googleCloudAiplatformV1WriteTensorboardExperimentDataRequest);
        // TODO: test validations
    }

    /**
     * Gets a Tensorboard.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void aiplatformProjectsLocationsTensorboardsGetTest() throws ApiException {
        String projectsId = null;
        String locationsId = null;
        String tensorboardsId = null;
        String uploadProtocol = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String key = null;
        String fields = null;
        String alt = null;
        String uploadType = null;
        String accessToken = null;
        String quotaUser = null;
        String paramCallback = null;
        String $xgafv = null;
        GoogleCloudAiplatformV1Tensorboard response = api.aiplatformProjectsLocationsTensorboardsGet(projectsId, locationsId, tensorboardsId, uploadProtocol, oauthToken, prettyPrint, key, fields, alt, uploadType, accessToken, quotaUser, paramCallback, $xgafv);
        // TODO: test validations
    }

    /**
     * Lists Tensorboards in a Location.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void aiplatformProjectsLocationsTensorboardsListTest() throws ApiException {
        String projectsId = null;
        String locationsId = null;
        String readMask = null;
        String pageToken = null;
        Integer pageSize = null;
        String orderBy = null;
        String filter = null;
        String uploadProtocol = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String key = null;
        String fields = null;
        String alt = null;
        String uploadType = null;
        String accessToken = null;
        String quotaUser = null;
        String paramCallback = null;
        String $xgafv = null;
        GoogleCloudAiplatformV1ListTensorboardsResponse response = api.aiplatformProjectsLocationsTensorboardsList(projectsId, locationsId, readMask, pageToken, pageSize, orderBy, filter, uploadProtocol, oauthToken, prettyPrint, key, fields, alt, uploadType, accessToken, quotaUser, paramCallback, $xgafv);
        // TODO: test validations
    }

    /**
     * Starts asynchronous cancellation on a long-running operation. The server makes a best effort to cancel the operation, but success is not guaranteed. If the server doesn&#39;t support this method, it returns &#x60;google.rpc.Code.UNIMPLEMENTED&#x60;. Clients can use Operations.GetOperation or other methods to check whether the cancellation succeeded or whether the operation completed despite cancellation. On successful cancellation, the operation is not deleted; instead, it becomes an operation with an Operation.error value with a google.rpc.Status.code of 1, corresponding to &#x60;Code.CANCELLED&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void aiplatformProjectsLocationsTensorboardsOperationsCancelTest() throws ApiException {
        String projectsId = null;
        String locationsId = null;
        String tensorboardsId = null;
        String operationsId = null;
        String uploadProtocol = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String key = null;
        String fields = null;
        String alt = null;
        String uploadType = null;
        String accessToken = null;
        String quotaUser = null;
        String paramCallback = null;
        String $xgafv = null;
        Object response = api.aiplatformProjectsLocationsTensorboardsOperationsCancel(projectsId, locationsId, tensorboardsId, operationsId, uploadProtocol, oauthToken, prettyPrint, key, fields, alt, uploadType, accessToken, quotaUser, paramCallback, $xgafv);
        // TODO: test validations
    }

    /**
     * Deletes a long-running operation. This method indicates that the client is no longer interested in the operation result. It does not cancel the operation. If the server doesn&#39;t support this method, it returns &#x60;google.rpc.Code.UNIMPLEMENTED&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void aiplatformProjectsLocationsTensorboardsOperationsDeleteTest() throws ApiException {
        String projectsId = null;
        String locationsId = null;
        String tensorboardsId = null;
        String operationsId = null;
        String uploadProtocol = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String key = null;
        String fields = null;
        String alt = null;
        String uploadType = null;
        String accessToken = null;
        String quotaUser = null;
        String paramCallback = null;
        String $xgafv = null;
        Object response = api.aiplatformProjectsLocationsTensorboardsOperationsDelete(projectsId, locationsId, tensorboardsId, operationsId, uploadProtocol, oauthToken, prettyPrint, key, fields, alt, uploadType, accessToken, quotaUser, paramCallback, $xgafv);
        // TODO: test validations
    }

    /**
     * Gets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void aiplatformProjectsLocationsTensorboardsOperationsGetTest() throws ApiException {
        String projectsId = null;
        String locationsId = null;
        String tensorboardsId = null;
        String operationsId = null;
        String uploadProtocol = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String key = null;
        String fields = null;
        String alt = null;
        String uploadType = null;
        String accessToken = null;
        String quotaUser = null;
        String paramCallback = null;
        String $xgafv = null;
        GoogleLongrunningOperation response = api.aiplatformProjectsLocationsTensorboardsOperationsGet(projectsId, locationsId, tensorboardsId, operationsId, uploadProtocol, oauthToken, prettyPrint, key, fields, alt, uploadType, accessToken, quotaUser, paramCallback, $xgafv);
        // TODO: test validations
    }

    /**
     * Lists operations that match the specified filter in the request. If the server doesn&#39;t support this method, it returns &#x60;UNIMPLEMENTED&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void aiplatformProjectsLocationsTensorboardsOperationsListTest() throws ApiException {
        String projectsId = null;
        String locationsId = null;
        String tensorboardsId = null;
        Integer pageSize = null;
        String pageToken = null;
        String filter = null;
        String uploadProtocol = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String key = null;
        String fields = null;
        String alt = null;
        String uploadType = null;
        String accessToken = null;
        String quotaUser = null;
        String paramCallback = null;
        String $xgafv = null;
        GoogleLongrunningListOperationsResponse response = api.aiplatformProjectsLocationsTensorboardsOperationsList(projectsId, locationsId, tensorboardsId, pageSize, pageToken, filter, uploadProtocol, oauthToken, prettyPrint, key, fields, alt, uploadType, accessToken, quotaUser, paramCallback, $xgafv);
        // TODO: test validations
    }

    /**
     * Waits until the specified long-running operation is done or reaches at most a specified timeout, returning the latest state. If the operation is already done, the latest state is immediately returned. If the timeout specified is greater than the default HTTP/RPC timeout, the HTTP/RPC timeout is used. If the server does not support this method, it returns &#x60;google.rpc.Code.UNIMPLEMENTED&#x60;. Note that this method is on a best-effort basis. It may return the latest state before the specified timeout (including immediately), meaning even an immediate response is no guarantee that the operation is done.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void aiplatformProjectsLocationsTensorboardsOperationsWaitTest() throws ApiException {
        String projectsId = null;
        String locationsId = null;
        String tensorboardsId = null;
        String operationsId = null;
        String timeout = null;
        String uploadProtocol = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String key = null;
        String fields = null;
        String alt = null;
        String uploadType = null;
        String accessToken = null;
        String quotaUser = null;
        String paramCallback = null;
        String $xgafv = null;
        GoogleLongrunningOperation response = api.aiplatformProjectsLocationsTensorboardsOperationsWait(projectsId, locationsId, tensorboardsId, operationsId, timeout, uploadProtocol, oauthToken, prettyPrint, key, fields, alt, uploadType, accessToken, quotaUser, paramCallback, $xgafv);
        // TODO: test validations
    }

    /**
     * Updates a Tensorboard.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void aiplatformProjectsLocationsTensorboardsPatchTest() throws ApiException {
        String projectsId = null;
        String locationsId = null;
        String tensorboardsId = null;
        String updateMask = null;
        String uploadProtocol = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String key = null;
        String fields = null;
        String alt = null;
        String uploadType = null;
        String accessToken = null;
        String quotaUser = null;
        String paramCallback = null;
        String $xgafv = null;
        GoogleCloudAiplatformV1Tensorboard googleCloudAiplatformV1Tensorboard = null;
        GoogleLongrunningOperation response = api.aiplatformProjectsLocationsTensorboardsPatch(projectsId, locationsId, tensorboardsId, updateMask, uploadProtocol, oauthToken, prettyPrint, key, fields, alt, uploadType, accessToken, quotaUser, paramCallback, $xgafv, googleCloudAiplatformV1Tensorboard);
        // TODO: test validations
    }

    /**
     * Returns the storage size for a given TensorBoard instance.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void aiplatformProjectsLocationsTensorboardsReadSizeTest() throws ApiException {
        String projectsId = null;
        String locationsId = null;
        String tensorboardsId = null;
        String uploadProtocol = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String key = null;
        String fields = null;
        String alt = null;
        String uploadType = null;
        String accessToken = null;
        String quotaUser = null;
        String paramCallback = null;
        String $xgafv = null;
        GoogleCloudAiplatformV1ReadTensorboardSizeResponse response = api.aiplatformProjectsLocationsTensorboardsReadSize(projectsId, locationsId, tensorboardsId, uploadProtocol, oauthToken, prettyPrint, key, fields, alt, uploadType, accessToken, quotaUser, paramCallback, $xgafv);
        // TODO: test validations
    }

    /**
     * Returns a list of monthly active users for a given TensorBoard instance.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void aiplatformProjectsLocationsTensorboardsReadUsageTest() throws ApiException {
        String projectsId = null;
        String locationsId = null;
        String tensorboardsId = null;
        String uploadProtocol = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String key = null;
        String fields = null;
        String alt = null;
        String uploadType = null;
        String accessToken = null;
        String quotaUser = null;
        String paramCallback = null;
        String $xgafv = null;
        GoogleCloudAiplatformV1ReadTensorboardUsageResponse response = api.aiplatformProjectsLocationsTensorboardsReadUsage(projectsId, locationsId, tensorboardsId, uploadProtocol, oauthToken, prettyPrint, key, fields, alt, uploadType, accessToken, quotaUser, paramCallback, $xgafv);
        // TODO: test validations
    }

    /**
     * Cancels a TrainingPipeline. Starts asynchronous cancellation on the TrainingPipeline. The server makes a best effort to cancel the pipeline, but success is not guaranteed. Clients can use PipelineService.GetTrainingPipeline or other methods to check whether the cancellation succeeded or whether the pipeline completed despite cancellation. On successful cancellation, the TrainingPipeline is not deleted; instead it becomes a pipeline with a TrainingPipeline.error value with a google.rpc.Status.code of 1, corresponding to &#x60;Code.CANCELLED&#x60;, and TrainingPipeline.state is set to &#x60;CANCELLED&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void aiplatformProjectsLocationsTrainingPipelinesCancelTest() throws ApiException {
        String projectsId = null;
        String locationsId = null;
        String trainingPipelinesId = null;
        String uploadProtocol = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String key = null;
        String fields = null;
        String alt = null;
        String uploadType = null;
        String accessToken = null;
        String quotaUser = null;
        String paramCallback = null;
        String $xgafv = null;
        Object body = null;
        Object response = api.aiplatformProjectsLocationsTrainingPipelinesCancel(projectsId, locationsId, trainingPipelinesId, uploadProtocol, oauthToken, prettyPrint, key, fields, alt, uploadType, accessToken, quotaUser, paramCallback, $xgafv, body);
        // TODO: test validations
    }

    /**
     * Creates a TrainingPipeline. A created TrainingPipeline right away will be attempted to be run.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void aiplatformProjectsLocationsTrainingPipelinesCreateTest() throws ApiException {
        String projectsId = null;
        String locationsId = null;
        String uploadProtocol = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String key = null;
        String fields = null;
        String alt = null;
        String uploadType = null;
        String accessToken = null;
        String quotaUser = null;
        String paramCallback = null;
        String $xgafv = null;
        GoogleCloudAiplatformV1TrainingPipeline googleCloudAiplatformV1TrainingPipeline = null;
        GoogleCloudAiplatformV1TrainingPipeline response = api.aiplatformProjectsLocationsTrainingPipelinesCreate(projectsId, locationsId, uploadProtocol, oauthToken, prettyPrint, key, fields, alt, uploadType, accessToken, quotaUser, paramCallback, $xgafv, googleCloudAiplatformV1TrainingPipeline);
        // TODO: test validations
    }

    /**
     * Deletes a TrainingPipeline.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void aiplatformProjectsLocationsTrainingPipelinesDeleteTest() throws ApiException {
        String projectsId = null;
        String locationsId = null;
        String trainingPipelinesId = null;
        String uploadProtocol = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String key = null;
        String fields = null;
        String alt = null;
        String uploadType = null;
        String accessToken = null;
        String quotaUser = null;
        String paramCallback = null;
        String $xgafv = null;
        GoogleLongrunningOperation response = api.aiplatformProjectsLocationsTrainingPipelinesDelete(projectsId, locationsId, trainingPipelinesId, uploadProtocol, oauthToken, prettyPrint, key, fields, alt, uploadType, accessToken, quotaUser, paramCallback, $xgafv);
        // TODO: test validations
    }

    /**
     * Gets a TrainingPipeline.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void aiplatformProjectsLocationsTrainingPipelinesGetTest() throws ApiException {
        String projectsId = null;
        String locationsId = null;
        String trainingPipelinesId = null;
        String uploadProtocol = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String key = null;
        String fields = null;
        String alt = null;
        String uploadType = null;
        String accessToken = null;
        String quotaUser = null;
        String paramCallback = null;
        String $xgafv = null;
        GoogleCloudAiplatformV1TrainingPipeline response = api.aiplatformProjectsLocationsTrainingPipelinesGet(projectsId, locationsId, trainingPipelinesId, uploadProtocol, oauthToken, prettyPrint, key, fields, alt, uploadType, accessToken, quotaUser, paramCallback, $xgafv);
        // TODO: test validations
    }

    /**
     * Lists TrainingPipelines in a Location.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void aiplatformProjectsLocationsTrainingPipelinesListTest() throws ApiException {
        String projectsId = null;
        String locationsId = null;
        String pageToken = null;
        String readMask = null;
        Integer pageSize = null;
        String filter = null;
        String uploadProtocol = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String key = null;
        String fields = null;
        String alt = null;
        String uploadType = null;
        String accessToken = null;
        String quotaUser = null;
        String paramCallback = null;
        String $xgafv = null;
        GoogleCloudAiplatformV1ListTrainingPipelinesResponse response = api.aiplatformProjectsLocationsTrainingPipelinesList(projectsId, locationsId, pageToken, readMask, pageSize, filter, uploadProtocol, oauthToken, prettyPrint, key, fields, alt, uploadType, accessToken, quotaUser, paramCallback, $xgafv);
        // TODO: test validations
    }

    /**
     * Starts asynchronous cancellation on a long-running operation. The server makes a best effort to cancel the operation, but success is not guaranteed. If the server doesn&#39;t support this method, it returns &#x60;google.rpc.Code.UNIMPLEMENTED&#x60;. Clients can use Operations.GetOperation or other methods to check whether the cancellation succeeded or whether the operation completed despite cancellation. On successful cancellation, the operation is not deleted; instead, it becomes an operation with an Operation.error value with a google.rpc.Status.code of 1, corresponding to &#x60;Code.CANCELLED&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void aiplatformProjectsLocationsTrainingPipelinesOperationsCancelTest() throws ApiException {
        String projectsId = null;
        String locationsId = null;
        String trainingPipelinesId = null;
        String operationsId = null;
        String uploadProtocol = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String key = null;
        String fields = null;
        String alt = null;
        String uploadType = null;
        String accessToken = null;
        String quotaUser = null;
        String paramCallback = null;
        String $xgafv = null;
        Object response = api.aiplatformProjectsLocationsTrainingPipelinesOperationsCancel(projectsId, locationsId, trainingPipelinesId, operationsId, uploadProtocol, oauthToken, prettyPrint, key, fields, alt, uploadType, accessToken, quotaUser, paramCallback, $xgafv);
        // TODO: test validations
    }

    /**
     * Deletes a long-running operation. This method indicates that the client is no longer interested in the operation result. It does not cancel the operation. If the server doesn&#39;t support this method, it returns &#x60;google.rpc.Code.UNIMPLEMENTED&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void aiplatformProjectsLocationsTrainingPipelinesOperationsDeleteTest() throws ApiException {
        String projectsId = null;
        String locationsId = null;
        String trainingPipelinesId = null;
        String operationsId = null;
        String uploadProtocol = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String key = null;
        String fields = null;
        String alt = null;
        String uploadType = null;
        String accessToken = null;
        String quotaUser = null;
        String paramCallback = null;
        String $xgafv = null;
        Object response = api.aiplatformProjectsLocationsTrainingPipelinesOperationsDelete(projectsId, locationsId, trainingPipelinesId, operationsId, uploadProtocol, oauthToken, prettyPrint, key, fields, alt, uploadType, accessToken, quotaUser, paramCallback, $xgafv);
        // TODO: test validations
    }

    /**
     * Gets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void aiplatformProjectsLocationsTrainingPipelinesOperationsGetTest() throws ApiException {
        String projectsId = null;
        String locationsId = null;
        String trainingPipelinesId = null;
        String operationsId = null;
        String uploadProtocol = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String key = null;
        String fields = null;
        String alt = null;
        String uploadType = null;
        String accessToken = null;
        String quotaUser = null;
        String paramCallback = null;
        String $xgafv = null;
        GoogleLongrunningOperation response = api.aiplatformProjectsLocationsTrainingPipelinesOperationsGet(projectsId, locationsId, trainingPipelinesId, operationsId, uploadProtocol, oauthToken, prettyPrint, key, fields, alt, uploadType, accessToken, quotaUser, paramCallback, $xgafv);
        // TODO: test validations
    }

    /**
     * Lists operations that match the specified filter in the request. If the server doesn&#39;t support this method, it returns &#x60;UNIMPLEMENTED&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void aiplatformProjectsLocationsTrainingPipelinesOperationsListTest() throws ApiException {
        String projectsId = null;
        String locationsId = null;
        String trainingPipelinesId = null;
        Integer pageSize = null;
        String pageToken = null;
        String filter = null;
        String uploadProtocol = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String key = null;
        String fields = null;
        String alt = null;
        String uploadType = null;
        String accessToken = null;
        String quotaUser = null;
        String paramCallback = null;
        String $xgafv = null;
        GoogleLongrunningListOperationsResponse response = api.aiplatformProjectsLocationsTrainingPipelinesOperationsList(projectsId, locationsId, trainingPipelinesId, pageSize, pageToken, filter, uploadProtocol, oauthToken, prettyPrint, key, fields, alt, uploadType, accessToken, quotaUser, paramCallback, $xgafv);
        // TODO: test validations
    }

    /**
     * Waits until the specified long-running operation is done or reaches at most a specified timeout, returning the latest state. If the operation is already done, the latest state is immediately returned. If the timeout specified is greater than the default HTTP/RPC timeout, the HTTP/RPC timeout is used. If the server does not support this method, it returns &#x60;google.rpc.Code.UNIMPLEMENTED&#x60;. Note that this method is on a best-effort basis. It may return the latest state before the specified timeout (including immediately), meaning even an immediate response is no guarantee that the operation is done.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void aiplatformProjectsLocationsTrainingPipelinesOperationsWaitTest() throws ApiException {
        String projectsId = null;
        String locationsId = null;
        String trainingPipelinesId = null;
        String operationsId = null;
        String timeout = null;
        String uploadProtocol = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String key = null;
        String fields = null;
        String alt = null;
        String uploadType = null;
        String accessToken = null;
        String quotaUser = null;
        String paramCallback = null;
        String $xgafv = null;
        GoogleLongrunningOperation response = api.aiplatformProjectsLocationsTrainingPipelinesOperationsWait(projectsId, locationsId, trainingPipelinesId, operationsId, timeout, uploadProtocol, oauthToken, prettyPrint, key, fields, alt, uploadType, accessToken, quotaUser, paramCallback, $xgafv);
        // TODO: test validations
    }

    /**
     * Cancels a TuningJob. Starts asynchronous cancellation on the TuningJob. The server makes a best effort to cancel the job, but success is not guaranteed. Clients can use GenAiTuningService.GetTuningJob or other methods to check whether the cancellation succeeded or whether the job completed despite cancellation. On successful cancellation, the TuningJob is not deleted; instead it becomes a job with a TuningJob.error value with a google.rpc.Status.code of 1, corresponding to &#x60;Code.CANCELLED&#x60;, and TuningJob.state is set to &#x60;CANCELLED&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void aiplatformProjectsLocationsTuningJobsCancelTest() throws ApiException {
        String projectsId = null;
        String locationsId = null;
        String tuningJobsId = null;
        String uploadProtocol = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String key = null;
        String fields = null;
        String alt = null;
        String uploadType = null;
        String accessToken = null;
        String quotaUser = null;
        String paramCallback = null;
        String $xgafv = null;
        Object body = null;
        Object response = api.aiplatformProjectsLocationsTuningJobsCancel(projectsId, locationsId, tuningJobsId, uploadProtocol, oauthToken, prettyPrint, key, fields, alt, uploadType, accessToken, quotaUser, paramCallback, $xgafv, body);
        // TODO: test validations
    }

    /**
     * Creates a TuningJob. A created TuningJob right away will be attempted to be run.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void aiplatformProjectsLocationsTuningJobsCreateTest() throws ApiException {
        String projectsId = null;
        String locationsId = null;
        String uploadProtocol = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String key = null;
        String fields = null;
        String alt = null;
        String uploadType = null;
        String accessToken = null;
        String quotaUser = null;
        String paramCallback = null;
        String $xgafv = null;
        GoogleCloudAiplatformV1TuningJob googleCloudAiplatformV1TuningJob = null;
        GoogleCloudAiplatformV1TuningJob response = api.aiplatformProjectsLocationsTuningJobsCreate(projectsId, locationsId, uploadProtocol, oauthToken, prettyPrint, key, fields, alt, uploadType, accessToken, quotaUser, paramCallback, $xgafv, googleCloudAiplatformV1TuningJob);
        // TODO: test validations
    }

    /**
     * Gets a TuningJob.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void aiplatformProjectsLocationsTuningJobsGetTest() throws ApiException {
        String projectsId = null;
        String locationsId = null;
        String tuningJobsId = null;
        String uploadProtocol = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String key = null;
        String fields = null;
        String alt = null;
        String uploadType = null;
        String accessToken = null;
        String quotaUser = null;
        String paramCallback = null;
        String $xgafv = null;
        GoogleCloudAiplatformV1TuningJob response = api.aiplatformProjectsLocationsTuningJobsGet(projectsId, locationsId, tuningJobsId, uploadProtocol, oauthToken, prettyPrint, key, fields, alt, uploadType, accessToken, quotaUser, paramCallback, $xgafv);
        // TODO: test validations
    }

    /**
     * Lists TuningJobs in a Location.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void aiplatformProjectsLocationsTuningJobsListTest() throws ApiException {
        String projectsId = null;
        String locationsId = null;
        String filter = null;
        Integer pageSize = null;
        String pageToken = null;
        String uploadProtocol = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String key = null;
        String fields = null;
        String alt = null;
        String uploadType = null;
        String accessToken = null;
        String quotaUser = null;
        String paramCallback = null;
        String $xgafv = null;
        GoogleCloudAiplatformV1ListTuningJobsResponse response = api.aiplatformProjectsLocationsTuningJobsList(projectsId, locationsId, filter, pageSize, pageToken, uploadProtocol, oauthToken, prettyPrint, key, fields, alt, uploadType, accessToken, quotaUser, paramCallback, $xgafv);
        // TODO: test validations
    }

    /**
     * Starts asynchronous cancellation on a long-running operation. The server makes a best effort to cancel the operation, but success is not guaranteed. If the server doesn&#39;t support this method, it returns &#x60;google.rpc.Code.UNIMPLEMENTED&#x60;. Clients can use Operations.GetOperation or other methods to check whether the cancellation succeeded or whether the operation completed despite cancellation. On successful cancellation, the operation is not deleted; instead, it becomes an operation with an Operation.error value with a google.rpc.Status.code of 1, corresponding to &#x60;Code.CANCELLED&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void aiplatformProjectsLocationsTuningJobsOperationsCancelTest() throws ApiException {
        String projectsId = null;
        String locationsId = null;
        String tuningJobsId = null;
        String operationsId = null;
        String uploadProtocol = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String key = null;
        String fields = null;
        String alt = null;
        String uploadType = null;
        String accessToken = null;
        String quotaUser = null;
        String paramCallback = null;
        String $xgafv = null;
        Object response = api.aiplatformProjectsLocationsTuningJobsOperationsCancel(projectsId, locationsId, tuningJobsId, operationsId, uploadProtocol, oauthToken, prettyPrint, key, fields, alt, uploadType, accessToken, quotaUser, paramCallback, $xgafv);
        // TODO: test validations
    }

    /**
     * Gets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void aiplatformProjectsLocationsTuningJobsOperationsGetTest() throws ApiException {
        String projectsId = null;
        String locationsId = null;
        String tuningJobsId = null;
        String operationsId = null;
        String uploadProtocol = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String key = null;
        String fields = null;
        String alt = null;
        String uploadType = null;
        String accessToken = null;
        String quotaUser = null;
        String paramCallback = null;
        String $xgafv = null;
        GoogleLongrunningOperation response = api.aiplatformProjectsLocationsTuningJobsOperationsGet(projectsId, locationsId, tuningJobsId, operationsId, uploadProtocol, oauthToken, prettyPrint, key, fields, alt, uploadType, accessToken, quotaUser, paramCallback, $xgafv);
        // TODO: test validations
    }

    /**
     * Lists operations that match the specified filter in the request. If the server doesn&#39;t support this method, it returns &#x60;UNIMPLEMENTED&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void aiplatformProjectsLocationsTuningJobsOperationsListTest() throws ApiException {
        String projectsId = null;
        String locationsId = null;
        String tuningJobsId = null;
        Integer pageSize = null;
        String pageToken = null;
        String filter = null;
        String uploadProtocol = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String key = null;
        String fields = null;
        String alt = null;
        String uploadType = null;
        String accessToken = null;
        String quotaUser = null;
        String paramCallback = null;
        String $xgafv = null;
        GoogleLongrunningListOperationsResponse response = api.aiplatformProjectsLocationsTuningJobsOperationsList(projectsId, locationsId, tuningJobsId, pageSize, pageToken, filter, uploadProtocol, oauthToken, prettyPrint, key, fields, alt, uploadType, accessToken, quotaUser, paramCallback, $xgafv);
        // TODO: test validations
    }

    /**
     * Return a list of tokens based on the input text.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void aiplatformPublishersModelsComputeTokensTest() throws ApiException {
        String publishersId = null;
        String modelsId = null;
        String uploadProtocol = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String key = null;
        String fields = null;
        String alt = null;
        String uploadType = null;
        String accessToken = null;
        String quotaUser = null;
        String paramCallback = null;
        String $xgafv = null;
        GoogleCloudAiplatformV1ComputeTokensRequest googleCloudAiplatformV1ComputeTokensRequest = null;
        GoogleCloudAiplatformV1ComputeTokensResponse response = api.aiplatformPublishersModelsComputeTokens(publishersId, modelsId, uploadProtocol, oauthToken, prettyPrint, key, fields, alt, uploadType, accessToken, quotaUser, paramCallback, $xgafv, googleCloudAiplatformV1ComputeTokensRequest);
        // TODO: test validations
    }

    /**
     * Perform a token counting.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void aiplatformPublishersModelsCountTokensTest() throws ApiException {
        String publishersId = null;
        String modelsId = null;
        String uploadProtocol = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String key = null;
        String fields = null;
        String alt = null;
        String uploadType = null;
        String accessToken = null;
        String quotaUser = null;
        String paramCallback = null;
        String $xgafv = null;
        GoogleCloudAiplatformV1CountTokensRequest googleCloudAiplatformV1CountTokensRequest = null;
        GoogleCloudAiplatformV1CountTokensResponse response = api.aiplatformPublishersModelsCountTokens(publishersId, modelsId, uploadProtocol, oauthToken, prettyPrint, key, fields, alt, uploadType, accessToken, quotaUser, paramCallback, $xgafv, googleCloudAiplatformV1CountTokensRequest);
        // TODO: test validations
    }

    /**
     * Generate content with multimodal inputs.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void aiplatformPublishersModelsGenerateContentTest() throws ApiException {
        String publishersId = null;
        String modelsId = null;
        String uploadProtocol = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String key = null;
        String fields = null;
        String alt = null;
        String uploadType = null;
        String accessToken = null;
        String quotaUser = null;
        String paramCallback = null;
        String $xgafv = null;
        GoogleCloudAiplatformV1GenerateContentRequest googleCloudAiplatformV1GenerateContentRequest = null;
        GoogleCloudAiplatformV1GenerateContentResponse response = api.aiplatformPublishersModelsGenerateContent(publishersId, modelsId, uploadProtocol, oauthToken, prettyPrint, key, fields, alt, uploadType, accessToken, quotaUser, paramCallback, $xgafv, googleCloudAiplatformV1GenerateContentRequest);
        // TODO: test validations
    }

    /**
     * Gets a Model Garden publisher model.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void aiplatformPublishersModelsGetTest() throws ApiException {
        String publishersId = null;
        String modelsId = null;
        String view = null;
        String languageCode = null;
        Boolean isHuggingFaceModel = null;
        String huggingFaceToken = null;
        String uploadProtocol = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String key = null;
        String fields = null;
        String alt = null;
        String uploadType = null;
        String accessToken = null;
        String quotaUser = null;
        String paramCallback = null;
        String $xgafv = null;
        GoogleCloudAiplatformV1PublisherModel response = api.aiplatformPublishersModelsGet(publishersId, modelsId, view, languageCode, isHuggingFaceModel, huggingFaceToken, uploadProtocol, oauthToken, prettyPrint, key, fields, alt, uploadType, accessToken, quotaUser, paramCallback, $xgafv);
        // TODO: test validations
    }

    /**
     * Generate content with multimodal inputs with streaming support.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void aiplatformPublishersModelsStreamGenerateContentTest() throws ApiException {
        String publishersId = null;
        String modelsId = null;
        String uploadProtocol = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String key = null;
        String fields = null;
        String alt = null;
        String uploadType = null;
        String accessToken = null;
        String quotaUser = null;
        String paramCallback = null;
        String $xgafv = null;
        GoogleCloudAiplatformV1GenerateContentRequest googleCloudAiplatformV1GenerateContentRequest = null;
        GoogleCloudAiplatformV1GenerateContentResponse response = api.aiplatformPublishersModelsStreamGenerateContent(publishersId, modelsId, uploadProtocol, oauthToken, prettyPrint, key, fields, alt, uploadType, accessToken, quotaUser, paramCallback, $xgafv, googleCloudAiplatformV1GenerateContentRequest);
        // TODO: test validations
    }

}
